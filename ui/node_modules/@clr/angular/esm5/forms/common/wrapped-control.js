import { __decorate } from "tslib";
/**
 * Copyright (c) 2016-2020 VMware, Inc. All Rights Reserved.
 * This software is released under MIT license.
 * The full license information can be found in LICENSE in the root directory of this project.
 */
import { HostBinding, InjectionToken, HostListener, Injector, Input, OnInit, Type, ViewContainerRef, Renderer2, ElementRef, OnDestroy, Directive, } from '@angular/core';
import { filter, distinctUntilChanged, startWith } from 'rxjs/operators';
import { HostWrapper } from '../../utils/host-wrapping/host-wrapper';
import { ControlIdService } from './providers/control-id.service';
import { NgControlService } from './providers/ng-control.service';
import { IfErrorService } from './if-error/if-error.service';
import { NgControl } from '@angular/forms';
import { ControlClassService } from './providers/control-class.service';
import { MarkControlService } from './providers/mark-control.service';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@angular/forms';
var WrappedFormControl = /** @class */ (function () {
    // I lost way too much time trying to make this work without injecting the ViewContainerRef and the Injector,
    // I'm giving up. So we have to inject these two manually for now.
    function WrappedFormControl(vcr, wrapperType, injector, ngControl, renderer, el) {
        var _this = this;
        this.vcr = vcr;
        this.wrapperType = wrapperType;
        this.ngControl = ngControl;
        this.subscriptions = [];
        this.index = 0;
        this.renderer = renderer;
        this.el = el;
        try {
            this.ngControlService = injector.get(NgControlService);
            this.ifErrorService = injector.get(IfErrorService);
            this.controlClassService = injector.get(ControlClassService);
            this.markControlService = injector.get(MarkControlService);
        }
        catch (e) { }
        if (this.controlClassService) {
            this.controlClassService.initControlClass(renderer, el.nativeElement);
        }
        if (this.markControlService) {
            this.subscriptions.push(this.markControlService.touchedChange.subscribe(function () {
                _this.ngControl.control.markAsTouched();
                _this.ngControl.control.updateValueAndValidity();
            }));
        }
    }
    Object.defineProperty(WrappedFormControl.prototype, "id", {
        get: function () {
            return this._id;
        },
        set: function (value) {
            this._id = value;
            if (this.controlIdService) {
                this.controlIdService.id = value;
            }
        },
        enumerable: true,
        configurable: true
    });
    WrappedFormControl.prototype.triggerValidation = function () {
        if (this.ifErrorService) {
            this.ifErrorService.triggerStatusChange();
        }
    };
    // @TODO This method has a try/catch due to an unknown issue that came when building the clrToggle feature
    // We need to figure out why this fails for the ClrToggle scenario but works for Date picker...
    // To see the error, remove the try/catch here and run the ClrToggle suite to see issues getting the container
    // injector in time, and this ONLY HAPPENS in tests and not in dev/prod mode.
    WrappedFormControl.prototype.getProviderFromContainer = function (token, notFoundValue) {
        try {
            return this._containerInjector.get(token, notFoundValue);
        }
        catch (e) {
            return notFoundValue;
        }
    };
    WrappedFormControl.prototype.ngOnInit = function () {
        this._containerInjector = new HostWrapper(this.wrapperType, this.vcr, this.index);
        this.controlIdService = this._containerInjector.get(ControlIdService);
        if (this._id) {
            this.controlIdService.id = this._id;
        }
        else {
            this._id = this.controlIdService.id;
        }
        if (this.ngControlService) {
            this.ngControlService.setControl(this.ngControl);
        }
        this.listenForErrorStateChanges();
    };
    WrappedFormControl.prototype.ngOnDestroy = function () {
        this.subscriptions.forEach(function (sub) { return sub.unsubscribe(); });
    };
    WrappedFormControl.prototype.listenForErrorStateChanges = function () {
        var _this = this;
        if (this.ifErrorService) {
            this.subscriptions.push(this.ifErrorService.statusChanges
                .pipe(startWith(false), filter(function () { return _this.renderer && !!_this.el; }), distinctUntilChanged())
                .subscribe(function (error) { return _this.setAriaDescribedBy(error); }));
        }
    };
    WrappedFormControl.prototype.setAriaDescribedBy = function (error) {
        this.renderer.setAttribute(this.el.nativeElement, 'aria-describedby', this.getAriaDescribedById(error));
    };
    WrappedFormControl.prototype.getAriaDescribedById = function (error) {
        return this.controlIdService.id.concat(error ? '-error' : '-helper');
    };
    WrappedFormControl.ctorParameters = function () { return [
        { type: ViewContainerRef },
        { type: Type },
        { type: Injector },
        { type: NgControl },
        { type: Renderer2 },
        { type: ElementRef }
    ]; };
    __decorate([
        HostBinding(),
        Input()
    ], WrappedFormControl.prototype, "id", null);
    __decorate([
        HostListener('blur')
    ], WrappedFormControl.prototype, "triggerValidation", null);
WrappedFormControl.ɵfac = function WrappedFormControl_Factory(t) { return new (t || WrappedFormControl)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Type), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Injector), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.NgControl), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Renderer2), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef)); };
WrappedFormControl.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: WrappedFormControl, hostVars: 1, hostBindings: function WrappedFormControl_HostBindings(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵlistener("blur", function WrappedFormControl_blur_HostBindingHandler() { return ctx.triggerValidation(); });
    } if (rf & 2) {
        ɵngcc0.ɵɵhostProperty("id", ctx.id);
    } }, inputs: { id: "id" } });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(WrappedFormControl, [{
        type: Directive
    }], function () { return [{ type: ɵngcc0.ViewContainerRef }, { type: ɵngcc0.Type }, { type: ɵngcc0.Injector }, { type: ɵngcc1.NgControl }, { type: ɵngcc0.Renderer2 }, { type: ɵngcc0.ElementRef }]; }, { id: [{
            type: HostBinding
        }, {
            type: Input
        }], triggerValidation: [{
            type: HostListener,
            args: ['blur']
        }] }); })();
    return WrappedFormControl;
}());
export { WrappedFormControl };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,