import { __decorate, __param } from "tslib";
/*
 * Copyright (c) 2016-2019 VMware, Inc. All Rights Reserved.
 * This software is released under MIT license.
 * The full license information can be found in LICENSE in the root directory of this project.
 */
import { Directive, ElementRef, HostBinding, Input, OnDestroy, OnInit, Optional, Renderer2 } from '@angular/core';
import { ControlIdService } from './providers/control-id.service';
import { LayoutService } from './providers/layout.service';
import { NgControlService } from './providers/ng-control.service';
import * as ɵngcc0 from '@angular/core';
var ClrLabel = /** @class */ (function () {
    function ClrLabel(controlIdService, layoutService, ngControlService, renderer, el) {
        this.controlIdService = controlIdService;
        this.layoutService = layoutService;
        this.ngControlService = ngControlService;
        this.renderer = renderer;
        this.el = el;
        this.subscriptions = [];
        this.enableGrid = true;
    }
    Object.defineProperty(ClrLabel.prototype, "labelText", {
        get: function () {
            return this.el.nativeElement && this.el.nativeElement.textContent;
        },
        enumerable: true,
        configurable: true
    });
    ClrLabel.prototype.ngOnInit = function () {
        var _this = this;
        // Only add the clr-control-label if it is inside a control container
        if (this.controlIdService || this.ngControlService) {
            this.renderer.addClass(this.el.nativeElement, 'clr-control-label');
        }
        // Only set the grid column classes if we are in the right context and if they aren't already set
        if (this.enableGrid &&
            this.layoutService &&
            !this.layoutService.isVertical() &&
            this.el.nativeElement &&
            this.el.nativeElement.className.indexOf('clr-col') < 0) {
            this.renderer.addClass(this.el.nativeElement, 'clr-col-12');
            this.renderer.addClass(this.el.nativeElement, "clr-col-md-" + this.layoutService.labelSize);
        }
        if (this.controlIdService && !this.forAttr) {
            this.subscriptions.push(this.controlIdService.idChange.subscribe(function (id) { return (_this.forAttr = id); }));
        }
    };
    ClrLabel.prototype.disableGrid = function () {
        this.enableGrid = false;
    };
    ClrLabel.prototype.ngOnDestroy = function () {
        this.subscriptions.forEach(function (sub) { return sub.unsubscribe(); });
    };
    ClrLabel.ctorParameters = function () { return [
        { type: ControlIdService, decorators: [{ type: Optional }] },
        { type: LayoutService, decorators: [{ type: Optional }] },
        { type: NgControlService, decorators: [{ type: Optional }] },
        { type: Renderer2 },
        { type: ElementRef }
    ]; };
    __decorate([
        HostBinding('attr.for'),
        Input('for')
    ], ClrLabel.prototype, "forAttr", void 0);
    ClrLabel = __decorate([ __param(0, Optional()),
        __param(1, Optional()),
        __param(2, Optional())
    ], ClrLabel);
ClrLabel.ɵfac = function ClrLabel_Factory(t) { return new (t || ClrLabel)(ɵngcc0.ɵɵdirectiveInject(ControlIdService, 8), ɵngcc0.ɵɵdirectiveInject(LayoutService, 8), ɵngcc0.ɵɵdirectiveInject(NgControlService, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Renderer2), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef)); };
ClrLabel.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: ClrLabel, selectors: [["label"]], hostVars: 1, hostBindings: function ClrLabel_HostBindings(rf, ctx) { if (rf & 2) {
        ɵngcc0.ɵɵattribute("for", ctx.forAttr);
    } }, inputs: { forAttr: ["for", "forAttr"] } });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ClrLabel, [{
        type: Directive,
        args: [{ selector: 'label' }]
    }], function () { return [{ type: ControlIdService, decorators: [{
                type: Optional
            }] }, { type: LayoutService, decorators: [{
                type: Optional
            }] }, { type: NgControlService, decorators: [{
                type: Optional
            }] }, { type: ɵngcc0.Renderer2 }, { type: ɵngcc0.ElementRef }]; }, { forAttr: [{
            type: HostBinding,
            args: ['attr.for']
        }, {
            type: Input,
            args: ['for']
        }] }); })();
    return ClrLabel;
}());
export { ClrLabel };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibGFiZWwuanMiLCJzb3VyY2VzIjpbIm5nOi9AY2xyL2FuZ3VsYXIvZm9ybXMvY29tbW9uL2xhYmVsLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSCxPQUFPLEVBQUUsU0FBUyxFQUFFLFVBQVUsRUFBRSxXQUFXLEVBQUUsS0FBSyxFQUFFLFNBQVMsRUFBRSxNQUFNLEVBQUUsUUFBUSxFQUFFLFNBQVMsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUdsSCxPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSxnQ0FBZ0MsQ0FBQztBQUNsRSxPQUFPLEVBQUUsYUFBYSxFQUFFLE1BQU0sNEJBQTRCLENBQUM7QUFDM0QsT0FBTyxFQUFFLGdCQUFnQixFQUFFLE1BQU0sZ0NBQWdDLENBQUM7O0FBR2xFO0FBQTRDLElBQzFDLGtCQUNzQixnQkFBa0MsRUFDbEMsYUFBNEIsRUFDNUIsZ0JBQWtDLEVBQzlDLFFBQW1CLEVBQ25CLEVBQWM7QUFDdkIsUUFMcUIscUJBQWdCLEdBQWhCLGdCQUFnQixDQUFrQjtBQUFDLFFBQ25DLGtCQUFhLEdBQWIsYUFBYSxDQUFlO0FBQUMsUUFDN0IscUJBQWdCLEdBQWhCLGdCQUFnQixDQUFrQjtBQUFDLFFBQy9DLGFBQVEsR0FBUixRQUFRLENBQVc7QUFBQyxRQUNwQixPQUFFLEdBQUYsRUFBRSxDQUFZO0FBQzFCLFFBTVUsa0JBQWEsR0FBbUIsRUFBRSxDQUFDO0FBQzdDLFFBQVUsZUFBVSxHQUFHLElBQUksQ0FBQztBQUM1QixJQVJLLENBQUM7QUFDTixJQVFFLHNCQUFJLCtCQUFTO0FBQUksYUFBakI7QUFBYyxZQUNaLE9BQU8sSUFBSSxDQUFDLEVBQUUsQ0FBQyxhQUFhLElBQUksSUFBSSxDQUFDLEVBQUUsQ0FBQyxhQUFhLENBQUMsV0FBVyxDQUFDO0FBQ3RFLFFBQUUsQ0FBQztBQUVIO0FBQ1c7QUFBMkIsT0FIbkM7QUFDSCxJQUNFLDJCQUFRLEdBQVI7QUFDRCxRQURDLGlCQW1CQztBQUNILFFBbkJJLHFFQUFxRTtBQUN6RSxRQUFJLElBQUksSUFBSSxDQUFDLGdCQUFnQixJQUFJLElBQUksQ0FBQyxnQkFBZ0IsRUFBRTtBQUN4RCxZQUFNLElBQUksQ0FBQyxRQUFRLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsYUFBYSxFQUFFLG1CQUFtQixDQUFDLENBQUM7QUFDekUsU0FBSztBQUNMLFFBQUksaUdBQWlHO0FBQ3JHLFFBQUksSUFDRSxJQUFJLENBQUMsVUFBVTtBQUNyQixZQUFNLElBQUksQ0FBQyxhQUFhO0FBQ3hCLFlBQU0sQ0FBQyxJQUFJLENBQUMsYUFBYSxDQUFDLFVBQVUsRUFBRTtBQUN0QyxZQUFNLElBQUksQ0FBQyxFQUFFLENBQUMsYUFBYTtBQUMzQixZQUFNLElBQUksQ0FBQyxFQUFFLENBQUMsYUFBYSxDQUFDLFNBQVMsQ0FBQyxPQUFPLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxFQUN0RDtBQUNOLFlBQU0sSUFBSSxDQUFDLFFBQVEsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxhQUFhLEVBQUUsWUFBWSxDQUFDLENBQUM7QUFDbEUsWUFBTSxJQUFJLENBQUMsUUFBUSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLGFBQWEsRUFBRSxnQkFBYyxJQUFJLENBQUMsYUFBYSxDQUFDLFNBQVcsQ0FBQyxDQUFDO0FBQ2xHLFNBQUs7QUFDTCxRQUFJLElBQUksSUFBSSxDQUFDLGdCQUFnQixJQUFJLENBQUMsSUFBSSxDQUFDLE9BQU8sRUFBRTtBQUNoRCxZQUFNLElBQUksQ0FBQyxhQUFhLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxRQUFRLENBQUMsU0FBUyxDQUFDLFVBQUEsRUFBRSxJQUFJLE9BQUEsQ0FBQyxLQUFJLENBQUMsT0FBTyxHQUFHLEVBQUUsQ0FBQyxFQUFuQixDQUFtQixDQUFDLENBQUMsQ0FBQztBQUNuRyxTQUFLO0FBQ0wsSUFBRSxDQUFDO0FBRUgsSUFBRSw4QkFBVyxHQUFYO0FBQWMsUUFDWixJQUFJLENBQUMsVUFBVSxHQUFHLEtBQUssQ0FBQztBQUM1QixJQUFFLENBQUM7QUFFSCxJQUFFLDhCQUFXLEdBQVg7QUFBYyxRQUNaLElBQUksQ0FBQyxhQUFhLENBQUMsT0FBTyxDQUFDLFVBQUEsR0FBRyxJQUFJLE9BQUEsR0FBRyxDQUFDLFdBQVcsRUFBRSxFQUFqQixDQUFpQixDQUFDLENBQUM7QUFDekQsSUFBRSxDQUFDO0FBQ0Y7QUFDbUQsZ0JBL0NWLGdCQUFnQix1QkFBckQsUUFBUTtBQUFPLGdCQUNtQixhQUFhLHVCQUEvQyxRQUFRO0FBQU8sZ0JBQ3NCLGdCQUFnQix1QkFBckQsUUFBUTtBQUFPLGdCQUNFLFNBQVM7QUFDN0IsZ0JBQWMsVUFBVTtBQUN4QjtBQUVFLElBRUY7QUFBYSxRQUZaLFdBQVcsQ0FBQyxVQUFVLENBQUM7QUFDekIsUUFBRSxLQUFLLENBQUMsS0FBSyxDQUFDO0FBQ2YsNkNBQWtCO0FBRWxCLElBYmEsUUFBUSx3QkFEcEIsU0FBUyxDQUFDLEVBQUUsckJBQ0wsQ0FFSCxXQUFBLFFBQVEsRUFBRSxDQUFBO0lBSE0sRUFBRSxPQUFPLEVBQUUsQ0FBQyxoQkFHaEIsUUFDWixXQUFBLFFBQVEsRUFBRSxDQUFBO0FBQUUsUUFDWixXQUFBLFFBQVEsRUFBRSxDQUFBO0FBQUMsT0FKSCxRQUFRLENBZ0RwQjs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7b0JBQ0Q7QUFBQyxJQURELGVBQUM7QUFDQSxDQURBLEFBaERELElBZ0RDO0FBQ0QsU0FqRGEsUUFBUTtBQUFJIiwic291cmNlc0NvbnRlbnQiOlsiLypcbiAqIENvcHlyaWdodCAoYykgMjAxNi0yMDE5IFZNd2FyZSwgSW5jLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICogVGhpcyBzb2Z0d2FyZSBpcyByZWxlYXNlZCB1bmRlciBNSVQgbGljZW5zZS5cbiAqIFRoZSBmdWxsIGxpY2Vuc2UgaW5mb3JtYXRpb24gY2FuIGJlIGZvdW5kIGluIExJQ0VOU0UgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgcHJvamVjdC5cbiAqL1xuaW1wb3J0IHsgRGlyZWN0aXZlLCBFbGVtZW50UmVmLCBIb3N0QmluZGluZywgSW5wdXQsIE9uRGVzdHJveSwgT25Jbml0LCBPcHRpb25hbCwgUmVuZGVyZXIyIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBTdWJzY3JpcHRpb24gfSBmcm9tICdyeGpzJztcblxuaW1wb3J0IHsgQ29udHJvbElkU2VydmljZSB9IGZyb20gJy4vcHJvdmlkZXJzL2NvbnRyb2wtaWQuc2VydmljZSc7XG5pbXBvcnQgeyBMYXlvdXRTZXJ2aWNlIH0gZnJvbSAnLi9wcm92aWRlcnMvbGF5b3V0LnNlcnZpY2UnO1xuaW1wb3J0IHsgTmdDb250cm9sU2VydmljZSB9IGZyb20gJy4vcHJvdmlkZXJzL25nLWNvbnRyb2wuc2VydmljZSc7XG5cbkBEaXJlY3RpdmUoeyBzZWxlY3RvcjogJ2xhYmVsJyB9KVxuZXhwb3J0IGNsYXNzIENsckxhYmVsIGltcGxlbWVudHMgT25Jbml0LCBPbkRlc3Ryb3kge1xuICBjb25zdHJ1Y3RvcihcbiAgICBAT3B0aW9uYWwoKSBwcml2YXRlIGNvbnRyb2xJZFNlcnZpY2U6IENvbnRyb2xJZFNlcnZpY2UsXG4gICAgQE9wdGlvbmFsKCkgcHJpdmF0ZSBsYXlvdXRTZXJ2aWNlOiBMYXlvdXRTZXJ2aWNlLFxuICAgIEBPcHRpb25hbCgpIHByaXZhdGUgbmdDb250cm9sU2VydmljZTogTmdDb250cm9sU2VydmljZSxcbiAgICBwcml2YXRlIHJlbmRlcmVyOiBSZW5kZXJlcjIsXG4gICAgcHJpdmF0ZSBlbDogRWxlbWVudFJlZlxuICApIHt9XG5cbiAgQEhvc3RCaW5kaW5nKCdhdHRyLmZvcicpXG4gIEBJbnB1dCgnZm9yJylcbiAgZm9yQXR0cjogc3RyaW5nO1xuXG4gIHByaXZhdGUgc3Vic2NyaXB0aW9uczogU3Vic2NyaXB0aW9uW10gPSBbXTtcbiAgcHJpdmF0ZSBlbmFibGVHcmlkID0gdHJ1ZTtcblxuICBnZXQgbGFiZWxUZXh0KCk6IHN0cmluZyB7XG4gICAgcmV0dXJuIHRoaXMuZWwubmF0aXZlRWxlbWVudCAmJiB0aGlzLmVsLm5hdGl2ZUVsZW1lbnQudGV4dENvbnRlbnQ7XG4gIH1cblxuICBuZ09uSW5pdCgpIHtcbiAgICAvLyBPbmx5IGFkZCB0aGUgY2xyLWNvbnRyb2wtbGFiZWwgaWYgaXQgaXMgaW5zaWRlIGEgY29udHJvbCBjb250YWluZXJcbiAgICBpZiAodGhpcy5jb250cm9sSWRTZXJ2aWNlIHx8IHRoaXMubmdDb250cm9sU2VydmljZSkge1xuICAgICAgdGhpcy5yZW5kZXJlci5hZGRDbGFzcyh0aGlzLmVsLm5hdGl2ZUVsZW1lbnQsICdjbHItY29udHJvbC1sYWJlbCcpO1xuICAgIH1cbiAgICAvLyBPbmx5IHNldCB0aGUgZ3JpZCBjb2x1bW4gY2xhc3NlcyBpZiB3ZSBhcmUgaW4gdGhlIHJpZ2h0IGNvbnRleHQgYW5kIGlmIHRoZXkgYXJlbid0IGFscmVhZHkgc2V0XG4gICAgaWYgKFxuICAgICAgdGhpcy5lbmFibGVHcmlkICYmXG4gICAgICB0aGlzLmxheW91dFNlcnZpY2UgJiZcbiAgICAgICF0aGlzLmxheW91dFNlcnZpY2UuaXNWZXJ0aWNhbCgpICYmXG4gICAgICB0aGlzLmVsLm5hdGl2ZUVsZW1lbnQgJiZcbiAgICAgIHRoaXMuZWwubmF0aXZlRWxlbWVudC5jbGFzc05hbWUuaW5kZXhPZignY2xyLWNvbCcpIDwgMFxuICAgICkge1xuICAgICAgdGhpcy5yZW5kZXJlci5hZGRDbGFzcyh0aGlzLmVsLm5hdGl2ZUVsZW1lbnQsICdjbHItY29sLTEyJyk7XG4gICAgICB0aGlzLnJlbmRlcmVyLmFkZENsYXNzKHRoaXMuZWwubmF0aXZlRWxlbWVudCwgYGNsci1jb2wtbWQtJHt0aGlzLmxheW91dFNlcnZpY2UubGFiZWxTaXplfWApO1xuICAgIH1cbiAgICBpZiAodGhpcy5jb250cm9sSWRTZXJ2aWNlICYmICF0aGlzLmZvckF0dHIpIHtcbiAgICAgIHRoaXMuc3Vic2NyaXB0aW9ucy5wdXNoKHRoaXMuY29udHJvbElkU2VydmljZS5pZENoYW5nZS5zdWJzY3JpYmUoaWQgPT4gKHRoaXMuZm9yQXR0ciA9IGlkKSkpO1xuICAgIH1cbiAgfVxuXG4gIGRpc2FibGVHcmlkKCkge1xuICAgIHRoaXMuZW5hYmxlR3JpZCA9IGZhbHNlO1xuICB9XG5cbiAgbmdPbkRlc3Ryb3koKSB7XG4gICAgdGhpcy5zdWJzY3JpcHRpb25zLmZvckVhY2goc3ViID0+IHN1Yi51bnN1YnNjcmliZSgpKTtcbiAgfVxufVxuIl19