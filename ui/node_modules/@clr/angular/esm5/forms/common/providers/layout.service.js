/*
 * Copyright (c) 2016-2019 VMware, Inc. All Rights Reserved.
 * This software is released under MIT license.
 * The full license information can be found in LICENSE in the root directory of this project.
 */
import { __decorate } from "tslib";
import { Injectable } from '@angular/core';
import * as ɵngcc0 from '@angular/core';
export var Layouts;
(function (Layouts) {
    Layouts["VERTICAL"] = "vertical";
    Layouts["HORIZONTAL"] = "horizontal";
    Layouts["COMPACT"] = "compact";
})(Layouts || (Layouts = {}));
var LayoutService = /** @class */ (function () {
    function LayoutService() {
        this.minLabelSize = 1;
        this.maxLabelSize = 12;
        this.layout = Layouts.HORIZONTAL;
        // This is basically a replacement for Object.values(), which IE11 and Node <9 don't support :(
        // String enums cannot be reverse-mapped, meaning Layouts['COMPACT'] does not return 'compact' so
        // this exists to deal with this little caveat to get the list of the values as an array.
        this.layoutValues = Object.keys(Layouts).map(function (key) { return Layouts[key]; });
        this._labelSize = 2;
    }
    Object.defineProperty(LayoutService.prototype, "labelSize", {
        get: function () {
            return this._labelSize;
        },
        set: function (size) {
            if (this.labelSizeIsValid(size)) {
                this._labelSize = size;
            }
        },
        enumerable: true,
        configurable: true
    });
    LayoutService.prototype.isVertical = function () {
        return this.layout === Layouts.VERTICAL;
    };
    LayoutService.prototype.isHorizontal = function () {
        return this.layout === Layouts.HORIZONTAL;
    };
    LayoutService.prototype.isCompact = function () {
        return this.layout === Layouts.COMPACT;
    };
    Object.defineProperty(LayoutService.prototype, "layoutClass", {
        get: function () {
            return "clr-form-" + this.layout;
        },
        enumerable: true,
        configurable: true
    });
    LayoutService.prototype.isValid = function (layout) {
        return this.layoutValues.indexOf(layout) > -1;
    };
    LayoutService.prototype.labelSizeIsValid = function (labelSize) {
        return Number.isInteger(labelSize) && labelSize >= this.minLabelSize && labelSize <= this.maxLabelSize;
    };
LayoutService.ɵfac = function LayoutService_Factory(t) { return new (t || LayoutService)(); };
LayoutService.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: LayoutService, factory: function (t) { return LayoutService.ɵfac(t); } });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(LayoutService, [{
        type: Injectable
    }], function () { return []; }, null); })();
    return LayoutService;
}());
export { LayoutService };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibGF5b3V0LnNlcnZpY2UuanMiLCJzb3VyY2VzIjpbIm5nOi9AY2xyL2FuZ3VsYXIvZm9ybXMvY29tbW9uL3Byb3ZpZGVycy9sYXlvdXQuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7O0FBRTNDLE1BQU0sQ0FBTixJQUFZLE9BSVg7QUFKRCxXQUFZLE9BQU87QUFDbEIsSUFBQyxnQ0FBcUIsQ0FBQTtBQUFDLElBQ3RCLG9DQUF5QixDQUFBO0FBQUMsSUFDMUIsOEJBQW1CLENBQUE7QUFDckIsQ0FBQyxFQUpXLE9BQU8sS0FBUCxPQUFPLFFBSWxCO0FBR0Q7QUFDb0IsSUFEcEI7QUFBMkIsUUFDaEIsaUJBQVksR0FBRyxDQUFDLENBQUM7QUFDNUIsUUFBVyxpQkFBWSxHQUFHLEVBQUUsQ0FBQztBQUM3QixRQUFFLFdBQU0sR0FBWSxPQUFPLENBQUMsVUFBVSxDQUFDO0FBQ3ZDLFFBQ0UsK0ZBQStGO0FBQ2pHLFFBQUUsaUdBQWlHO0FBQ25HLFFBQUUseUZBQXlGO0FBQzNGLFFBQVUsaUJBQVksR0FBYSxNQUFNLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDLEdBQUcsQ0FBQyxVQUFBLEdBQUcsSUFBSSxPQUFBLE9BQU8sQ0FBQyxHQUFHLENBQUMsRUFBWixDQUFZLENBQUMsQ0FBQztBQUNqRixRQUFVLGVBQVUsR0FBVyxDQUFDLENBQUM7QUFDakMsSUFrQ0EsQ0FBQztBQUNELElBbENFLHNCQUFJLG9DQUFTO0FBQUksYUFNakI7QUFBYyxZQUNaLE9BQU8sSUFBSSxDQUFDLFVBQVUsQ0FBQztBQUMzQixRQUFFLENBQUM7QUFFSCxhQVZFLFVBQWMsSUFBWTtBQUM1QixZQUFJLElBQUksSUFBSSxDQUFDLGdCQUFnQixDQUFDLElBQUksQ0FBQyxFQUFFO0FBQ3JDLGdCQUFNLElBQUksQ0FBQyxVQUFVLEdBQUcsSUFBSSxDQUFDO0FBQzdCLGFBQUs7QUFDTCxRQUFFLENBQUM7QUFFSDtBQUEwQjtBQUNELE9BSHRCO0FBQ0gsSUFLRSxrQ0FBVSxHQUFWO0FBQWMsUUFDWixPQUFPLElBQUksQ0FBQyxNQUFNLEtBQUssT0FBTyxDQUFDLFFBQVEsQ0FBQztBQUM1QyxJQUFFLENBQUM7QUFFSCxJQUFFLG9DQUFZLEdBQVo7QUFBYyxRQUNaLE9BQU8sSUFBSSxDQUFDLE1BQU0sS0FBSyxPQUFPLENBQUMsVUFBVSxDQUFDO0FBQzlDLElBQUUsQ0FBQztBQUVILElBQUUsaUNBQVMsR0FBVDtBQUFjLFFBQ1osT0FBTyxJQUFJLENBQUMsTUFBTSxLQUFLLE9BQU8sQ0FBQyxPQUFPLENBQUM7QUFDM0MsSUFBRSxDQUFDO0FBRUgsSUFBRSxzQkFBSSxzQ0FBVztBQUFJLGFBQW5CO0FBQWMsWUFDWixPQUFPLGNBQVksSUFBSSxDQUFDLE1BQVEsQ0FBQztBQUNyQyxRQUFFLENBQUM7QUFFSDtBQUEwQjtBQUNWLE9BSGI7QUFDSCxJQUNFLCtCQUFPLEdBQVAsVUFBUSxNQUFjO0FBQUksUUFDeEIsT0FBTyxJQUFJLENBQUMsWUFBWSxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztBQUNsRCxJQUFFLENBQUM7QUFFSCxJQUFFLHdDQUFnQixHQUFoQixVQUFpQixTQUFpQjtBQUFJLFFBQ3BDLE9BQU8sTUFBTSxDQUFDLFNBQVMsQ0FBQyxTQUFTLENBQUMsSUFBSSxTQUFTLElBQUksSUFBSSxDQUFDLFlBQVksSUFBSSxTQUFTLElBQUksSUFBSSxDQUFDLFlBQVksQ0FBQztBQUMzRyxJQUFFLENBQUM7SUEzQ1UsYUFBYSx3QkFEekIsVUFBVSxFQUFFLFFBQ0EsYUFBYSxDQTRDekI7Ozs7Z0RBQ0Q7QUFBQyxJQURELG9CQUFDO0FBQ0EsQ0FEQSxBQTVDRCxJQTRDQztBQUNELFNBN0NhLGFBQWE7QUFDekIiLCJzb3VyY2VzQ29udGVudCI6WyIvKlxuICogQ29weXJpZ2h0IChjKSAyMDE2LTIwMTkgVk13YXJlLCBJbmMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKiBUaGlzIHNvZnR3YXJlIGlzIHJlbGVhc2VkIHVuZGVyIE1JVCBsaWNlbnNlLlxuICogVGhlIGZ1bGwgbGljZW5zZSBpbmZvcm1hdGlvbiBjYW4gYmUgZm91bmQgaW4gTElDRU5TRSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBwcm9qZWN0LlxuICovXG5cbmltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuZXhwb3J0IGVudW0gTGF5b3V0cyB7XG4gIFZFUlRJQ0FMID0gJ3ZlcnRpY2FsJyxcbiAgSE9SSVpPTlRBTCA9ICdob3Jpem9udGFsJyxcbiAgQ09NUEFDVCA9ICdjb21wYWN0Jyxcbn1cblxuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIExheW91dFNlcnZpY2Uge1xuICByZWFkb25seSBtaW5MYWJlbFNpemUgPSAxO1xuICByZWFkb25seSBtYXhMYWJlbFNpemUgPSAxMjtcbiAgbGF5b3V0OiBMYXlvdXRzID0gTGF5b3V0cy5IT1JJWk9OVEFMO1xuXG4gIC8vIFRoaXMgaXMgYmFzaWNhbGx5IGEgcmVwbGFjZW1lbnQgZm9yIE9iamVjdC52YWx1ZXMoKSwgd2hpY2ggSUUxMSBhbmQgTm9kZSA8OSBkb24ndCBzdXBwb3J0IDooXG4gIC8vIFN0cmluZyBlbnVtcyBjYW5ub3QgYmUgcmV2ZXJzZS1tYXBwZWQsIG1lYW5pbmcgTGF5b3V0c1snQ09NUEFDVCddIGRvZXMgbm90IHJldHVybiAnY29tcGFjdCcgc29cbiAgLy8gdGhpcyBleGlzdHMgdG8gZGVhbCB3aXRoIHRoaXMgbGl0dGxlIGNhdmVhdCB0byBnZXQgdGhlIGxpc3Qgb2YgdGhlIHZhbHVlcyBhcyBhbiBhcnJheS5cbiAgcHJpdmF0ZSBsYXlvdXRWYWx1ZXM6IHN0cmluZ1tdID0gT2JqZWN0LmtleXMoTGF5b3V0cykubWFwKGtleSA9PiBMYXlvdXRzW2tleV0pO1xuICBwcml2YXRlIF9sYWJlbFNpemU6IG51bWJlciA9IDI7XG5cbiAgc2V0IGxhYmVsU2l6ZShzaXplOiBudW1iZXIpIHtcbiAgICBpZiAodGhpcy5sYWJlbFNpemVJc1ZhbGlkKHNpemUpKSB7XG4gICAgICB0aGlzLl9sYWJlbFNpemUgPSBzaXplO1xuICAgIH1cbiAgfVxuXG4gIGdldCBsYWJlbFNpemUoKTogbnVtYmVyIHtcbiAgICByZXR1cm4gdGhpcy5fbGFiZWxTaXplO1xuICB9XG5cbiAgaXNWZXJ0aWNhbCgpOiBib29sZWFuIHtcbiAgICByZXR1cm4gdGhpcy5sYXlvdXQgPT09IExheW91dHMuVkVSVElDQUw7XG4gIH1cblxuICBpc0hvcml6b250YWwoKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIHRoaXMubGF5b3V0ID09PSBMYXlvdXRzLkhPUklaT05UQUw7XG4gIH1cblxuICBpc0NvbXBhY3QoKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIHRoaXMubGF5b3V0ID09PSBMYXlvdXRzLkNPTVBBQ1Q7XG4gIH1cblxuICBnZXQgbGF5b3V0Q2xhc3MoKTogc3RyaW5nIHtcbiAgICByZXR1cm4gYGNsci1mb3JtLSR7dGhpcy5sYXlvdXR9YDtcbiAgfVxuXG4gIGlzVmFsaWQobGF5b3V0OiBzdHJpbmcpOiBib29sZWFuIHtcbiAgICByZXR1cm4gdGhpcy5sYXlvdXRWYWx1ZXMuaW5kZXhPZihsYXlvdXQpID4gLTE7XG4gIH1cblxuICBsYWJlbFNpemVJc1ZhbGlkKGxhYmVsU2l6ZTogbnVtYmVyKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIE51bWJlci5pc0ludGVnZXIobGFiZWxTaXplKSAmJiBsYWJlbFNpemUgPj0gdGhpcy5taW5MYWJlbFNpemUgJiYgbGFiZWxTaXplIDw9IHRoaXMubWF4TGFiZWxTaXplO1xuICB9XG59XG4iXX0=