import { __decorate, __param } from "tslib";
/*
 * Copyright (c) 2016-2020 VMware, Inc. All Rights Reserved.
 * This software is released under MIT license.
 * The full license information can be found in LICENSE in the root directory of this project.
 */
import { Component, Optional, ContentChild, ViewChild, Input, } from '@angular/core';
import { ClrPopoverToggleService } from '../../utils/popover/providers/popover-toggle.service';
import { IfErrorService } from '../common/if-error/if-error.service';
import { ControlClassService } from '../common/providers/control-class.service';
import { ControlIdService } from '../common/providers/control-id.service';
import { FocusService } from '../common/providers/focus.service';
import { LayoutService } from '../common/providers/layout.service';
import { NgControlService } from '../common/providers/ng-control.service';
import { ClrLabel } from '../common/label';
import { DateFormControlService } from './providers/date-form-control.service';
import { DateIOService } from './providers/date-io.service';
import { DateNavigationService } from './providers/date-navigation.service';
import { DatepickerEnabledService } from './providers/datepicker-enabled.service';
import { LocaleHelperService } from './providers/locale-helper.service';
import { ClrCommonStringsService } from '../../utils/i18n/common-strings.service';
import { ClrPopoverPositions } from '../../utils/popover/enums/positions.enum';
import { ClrPopoverEventsService } from '../../utils/popover/providers/popover-events.service';
import { ClrPopoverPositionService } from '../../utils/popover/providers/popover-position.service';
import { ViewManagerService } from './providers/view-manager.service';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@angular/common';
import * as ɵngcc2 from '../../utils/popover/popover-anchor';
import * as ɵngcc3 from '../../utils/popover/popover-content';
import * as ɵngcc4 from '../../icon/icon';
import * as ɵngcc5 from '../common/label';
import * as ɵngcc6 from '../../utils/popover/popover-open-close-button';
import * as ɵngcc7 from './datepicker-view-manager';
import * as ɵngcc8 from '../../utils/focus-trap/focus-trap.directive';

var _c0 = ["actionButton"];
function ClrDateContainer_label_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelement(0, "label");
} }
function ClrDateContainer_button_6_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "button", 7, 8);
    ɵngcc0.ɵɵelement(2, "clr-icon", 9);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    var ctx_r1 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("disabled", ctx_r1.isInputDateDisabled);
    ɵngcc0.ɵɵattribute("title", ctx_r1.commonStrings.keys.datepickerToggle)("aria-label", ctx_r1.commonStrings.keys.datepickerToggle);
} }
function ClrDateContainer_clr_datepicker_view_manager_7_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelement(0, "clr-datepicker-view-manager", 10);
} }
function ClrDateContainer_9_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵprojection(0, 2, ["*ngIf", "!invalid"]);
} }
function ClrDateContainer_10_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵprojection(0, 3, ["*ngIf", "invalid"]);
} }
var _c1 = [[["label"]], [["", "clrDate", ""]], [["clr-control-helper"]], [["clr-control-error"]]];
var _c2 = ["label", "[clrDate]", "clr-control-helper", "clr-control-error"];
var ClrDateContainer = /** @class */ (function () {
    function ClrDateContainer(toggleService, dateNavigationService, datepickerEnabledService, dateFormControlService, commonStrings, ifErrorService, focusService, viewManagerService, controlClassService, layoutService, ngControlService) {
        var _this = this;
        this.toggleService = toggleService;
        this.dateNavigationService = dateNavigationService;
        this.datepickerEnabledService = datepickerEnabledService;
        this.dateFormControlService = dateFormControlService;
        this.commonStrings = commonStrings;
        this.ifErrorService = ifErrorService;
        this.focusService = focusService;
        this.viewManagerService = viewManagerService;
        this.controlClassService = controlClassService;
        this.layoutService = layoutService;
        this.ngControlService = ngControlService;
        this._dynamic = false;
        this.invalid = false;
        this.focus = false;
        this.subscriptions = [];
        this.subscriptions.push(this.focusService.focusChange.subscribe(function (state) {
            _this.focus = state;
        }), this.ngControlService.controlChanges.subscribe(function (control) {
            _this.control = control;
        }), this.toggleService.openChange.subscribe(function (state) {
            _this.dateFormControlService.markAsTouched();
        }));
    }
    Object.defineProperty(ClrDateContainer.prototype, "clrPosition", {
        set: function (position) {
            if (position && ClrPopoverPositions[position]) {
                this.viewManagerService.position = ClrPopoverPositions[position];
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ClrDateContainer.prototype, "popoverPosition", {
        get: function () {
            return this.viewManagerService.position;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ClrDateContainer.prototype, "open", {
        get: function () {
            return this.toggleService.open;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ClrDateContainer.prototype, "actionButton", {
        set: function (button) {
            this.toggleButton = button;
        },
        enumerable: true,
        configurable: true
    });
    ClrDateContainer.prototype.ngOnInit = function () {
        var _this = this;
        this.subscriptions.push(this.ifErrorService.statusChanges.subscribe(function (invalid) {
            _this.invalid = invalid;
        }));
    };
    ClrDateContainer.prototype.ngAfterViewInit = function () {
        var _this = this;
        this.subscriptions.push(this.toggleService.openChange.subscribe(function (open) {
            if (open) {
                _this.initializeCalendar();
            }
            else {
                _this.toggleButton.nativeElement.focus();
            }
        }));
    };
    /**
     * Returns the classes to apply to the control
     */
    ClrDateContainer.prototype.controlClass = function () {
        return this.controlClassService.controlClass(this.invalid, this.addGrid());
    };
    /**
     * Determines if the control needs to add grid classes
     */
    ClrDateContainer.prototype.addGrid = function () {
        return this.layoutService && !this.layoutService.isVertical();
    };
    Object.defineProperty(ClrDateContainer.prototype, "isEnabled", {
        /**
         * Returns if the Datepicker is enabled or not. If disabled, hides the datepicker trigger.
         */
        get: function () {
            return this.datepickerEnabledService.isEnabled;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ClrDateContainer.prototype, "isInputDateDisabled", {
        /**
         * Return if Datepicker is diabled or not as Form Control
         */
        get: function () {
            /* clrForm wrapper or without clrForm */
            return ((this.control && this.control.disabled) || (this.dateFormControlService && this.dateFormControlService.disabled));
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Processes the user input and Initializes the Calendar everytime the datepicker popover is open.
     */
    ClrDateContainer.prototype.initializeCalendar = function () {
        this.dateNavigationService.initializeCalendar();
    };
    /**
     * Unsubscribe from subscriptions.
     */
    ClrDateContainer.prototype.ngOnDestroy = function () {
        this.subscriptions.map(function (sub) { return sub.unsubscribe(); });
    };
    ClrDateContainer.ctorParameters = function () { return [
        { type: ClrPopoverToggleService },
        { type: DateNavigationService },
        { type: DatepickerEnabledService },
        { type: DateFormControlService },
        { type: ClrCommonStringsService },
        { type: IfErrorService },
        { type: FocusService },
        { type: ViewManagerService },
        { type: ControlClassService },
        { type: LayoutService, decorators: [{ type: Optional }] },
        { type: NgControlService }
    ]; };
    __decorate([
        ContentChild(ClrLabel)
    ], ClrDateContainer.prototype, "label", void 0);
    __decorate([
        Input('clrPosition')
    ], ClrDateContainer.prototype, "clrPosition", null);
    __decorate([
        ViewChild('actionButton')
    ], ClrDateContainer.prototype, "actionButton", null);
    ClrDateContainer = __decorate([ __param(9, Optional())
    ], ClrDateContainer);
ClrDateContainer.ɵfac = function ClrDateContainer_Factory(t) { return new (t || ClrDateContainer)(ɵngcc0.ɵɵdirectiveInject(ClrPopoverToggleService), ɵngcc0.ɵɵdirectiveInject(DateNavigationService), ɵngcc0.ɵɵdirectiveInject(DatepickerEnabledService), ɵngcc0.ɵɵdirectiveInject(DateFormControlService), ɵngcc0.ɵɵdirectiveInject(ClrCommonStringsService), ɵngcc0.ɵɵdirectiveInject(IfErrorService), ɵngcc0.ɵɵdirectiveInject(FocusService), ɵngcc0.ɵɵdirectiveInject(ViewManagerService), ɵngcc0.ɵɵdirectiveInject(ControlClassService), ɵngcc0.ɵɵdirectiveInject(LayoutService, 8), ɵngcc0.ɵɵdirectiveInject(NgControlService)); };
ClrDateContainer.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: ClrDateContainer, selectors: [["clr-date-container"]], contentQueries: function ClrDateContainer_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {
        ɵngcc0.ɵɵcontentQuery(dirIndex, ClrLabel, true);
    } if (rf & 2) {
        var _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.label = _t.first);
    } }, viewQuery: function ClrDateContainer_Query(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵviewQuery(_c0, true);
    } if (rf & 2) {
        var _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.actionButton = _t.first);
    } }, hostVars: 6, hostBindings: function ClrDateContainer_HostBindings(rf, ctx) { if (rf & 2) {
        ɵngcc0.ɵɵclassProp("clr-form-control-disabled", ctx.isInputDateDisabled)("clr-form-control", true)("clr-row", ctx.addGrid());
    } }, inputs: { clrPosition: "clrPosition" }, features: [ɵngcc0.ɵɵProvidersFeature([
            ControlIdService,
            ClrPopoverToggleService,
            ClrPopoverEventsService,
            ClrPopoverPositionService,
            LocaleHelperService,
            IfErrorService,
            ControlClassService,
            FocusService,
            NgControlService,
            DateIOService,
            DateNavigationService,
            DatepickerEnabledService,
            DateFormControlService,
            ViewManagerService,
        ])], ngContentSelectors: _c2, decls: 11, vars: 11, consts: [[4, "ngIf"], [1, "clr-control-container", 3, "ngClass"], ["clrPopoverAnchor", "", 1, "clr-input-wrapper"], [1, "clr-input-group"], ["type", "button", "clrPopoverOpenCloseButton", "", "class", "clr-input-group-icon-action", 3, "disabled", 4, "ngIf"], ["clrFocusTrap", "", 4, "clrPopoverContent", "clrPopoverContentAt", "clrPopoverContentOutsideClickToClose", "clrPopoverContentScrollToClose"], ["shape", "exclamation-circle", 1, "clr-validate-icon"], ["type", "button", "clrPopoverOpenCloseButton", "", 1, "clr-input-group-icon-action", 3, "disabled"], ["actionButton", ""], ["shape", "calendar"], ["clrFocusTrap", ""]], template: function ClrDateContainer_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef(_c1);
        ɵngcc0.ɵɵprojection(0);
        ɵngcc0.ɵɵtemplate(1, ClrDateContainer_label_1_Template, 1, 0, "label", 0);
        ɵngcc0.ɵɵelementStart(2, "div", 1);
        ɵngcc0.ɵɵelementStart(3, "div", 2);
        ɵngcc0.ɵɵelementStart(4, "div", 3);
        ɵngcc0.ɵɵprojection(5, 1);
        ɵngcc0.ɵɵtemplate(6, ClrDateContainer_button_6_Template, 3, 3, "button", 4);
        ɵngcc0.ɵɵtemplate(7, ClrDateContainer_clr_datepicker_view_manager_7_Template, 1, 0, "clr-datepicker-view-manager", 5);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelement(8, "clr-icon", 6);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵtemplate(9, ClrDateContainer_9_Template, 1, 0, undefined, 0);
        ɵngcc0.ɵɵtemplate(10, ClrDateContainer_10_Template, 1, 0, undefined, 0);
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", !ctx.label && ctx.addGrid());
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngClass", ctx.controlClass());
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵclassProp("clr-focus", ctx.focus);
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("ngIf", ctx.isEnabled);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("clrPopoverContent", ctx.open)("clrPopoverContentAt", ctx.popoverPosition)("clrPopoverContentOutsideClickToClose", true)("clrPopoverContentScrollToClose", true);
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("ngIf", !ctx.invalid);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.invalid);
    } }, directives: [ɵngcc1.NgIf, ɵngcc1.NgClass, ɵngcc2.ClrPopoverAnchor, ɵngcc3.ClrPopoverContent, ɵngcc4.ClrIconCustomTag, ɵngcc5.ClrLabel, ɵngcc6.ClrPopoverOpenCloseButton, ɵngcc7.ClrDatepickerViewManager, ɵngcc8.FocusTrapDirective], encapsulation: 2 });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ClrDateContainer, [{
        type: Component,
        args: [{
                selector: 'clr-date-container',
                template: "\n      <ng-content select=\"label\"></ng-content>\n      <label *ngIf=\"!label && addGrid()\"></label>\n      <div class=\"clr-control-container\" [ngClass]=\"controlClass()\">\n        <div class=\"clr-input-wrapper\" clrPopoverAnchor>\n          <div class=\"clr-input-group\" [class.clr-focus]=\"focus\">\n            <ng-content select=\"[clrDate]\"></ng-content>\n            <button #actionButton\n                    type=\"button\"\n                    clrPopoverOpenCloseButton\n                    class=\"clr-input-group-icon-action\"\n                    [attr.title]=\"commonStrings.keys.datepickerToggle\"\n                    [attr.aria-label]=\"commonStrings.keys.datepickerToggle\"\n                    [disabled]=\"isInputDateDisabled\"\n                    *ngIf=\"isEnabled\">\n              <clr-icon shape=\"calendar\"></clr-icon>\n            </button>\n            <clr-datepicker-view-manager *clrPopoverContent=\"open at popoverPosition; outsideClickToClose: true; scrollToClose: true\" clrFocusTrap></clr-datepicker-view-manager>\n          </div>\n          <clr-icon class=\"clr-validate-icon\" shape=\"exclamation-circle\"></clr-icon>\n        </div>\n        <ng-content select=\"clr-control-helper\" *ngIf=\"!invalid\"></ng-content>\n        <ng-content select=\"clr-control-error\" *ngIf=\"invalid\"></ng-content>\n      </div>\n    ",
                providers: [
                    ControlIdService,
                    ClrPopoverToggleService,
                    ClrPopoverEventsService,
                    ClrPopoverPositionService,
                    LocaleHelperService,
                    IfErrorService,
                    ControlClassService,
                    FocusService,
                    NgControlService,
                    DateIOService,
                    DateNavigationService,
                    DatepickerEnabledService,
                    DateFormControlService,
                    ViewManagerService,
                ],
                host: {
                    '[class.clr-form-control-disabled]': 'isInputDateDisabled',
                    '[class.clr-form-control]': 'true',
                    '[class.clr-row]': 'addGrid()'
                }
            }]
    }], function () { return [{ type: ClrPopoverToggleService }, { type: DateNavigationService }, { type: DatepickerEnabledService }, { type: DateFormControlService }, { type: ClrCommonStringsService }, { type: IfErrorService }, { type: FocusService }, { type: ViewManagerService }, { type: ControlClassService }, { type: LayoutService, decorators: [{
                type: Optional
            }] }, { type: NgControlService }]; }, { clrPosition: [{
            type: Input,
            args: ['clrPosition']
        }], actionButton: [{
            type: ViewChild,
            args: ['actionButton']
        }], label: [{
            type: ContentChild,
            args: [ClrLabel]
        }] }); })();
    return ClrDateContainer;
}());
export { ClrDateContainer };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,