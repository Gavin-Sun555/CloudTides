/**
 * Copyright (c) 2016-2018 VMware, Inc. All Rights Reserved.
 * This software is released under MIT license.
 * The full license information can be found in LICENSE in the root directory of this project.
 */
import { __decorate, __extends, __param } from "tslib";
import { Directive, ElementRef, HostListener, Inject, Injector, OnDestroy, OnInit, Optional, Renderer2, Self, ViewContainerRef, } from '@angular/core';
import { BehaviorSubject } from 'rxjs';
import { NgControl } from '@angular/forms';
import { ClrPasswordContainer, TOGGLE_SERVICE } from './password-container';
import { WrappedFormControl } from '../common/wrapped-control';
import { FocusService } from '../common/providers/focus.service';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@angular/forms';
import * as ɵngcc2 from 'rxjs';
var ClrPassword = /** @class */ (function (_super) {
    __extends(ClrPassword, _super);
    function ClrPassword(vcr, injector, control, renderer, el, focusService, toggleService) {
        var _this = _super.call(this, vcr, ClrPasswordContainer, injector, control, renderer, el) || this;
        _this.focusService = focusService;
        _this.toggleService = toggleService;
        _this.index = 1;
        if (!_this.focusService) {
            throw new Error('clrPassword requires being wrapped in <clr-password-container>');
        }
        _this.subscriptions.push(_this.toggleService.subscribe(function (toggle) {
            renderer.setProperty(el.nativeElement, 'type', toggle ? 'text' : 'password');
        }));
        return _this;
    }
    ClrPassword.prototype.triggerFocus = function () {
        if (this.focusService) {
            this.focusService.focused = true;
        }
    };
    ClrPassword.prototype.triggerValidation = function () {
        _super.prototype.triggerValidation.call(this);
        if (this.focusService) {
            this.focusService.focused = false;
        }
    };
    ClrPassword.ctorParameters = function () { return [
        { type: ViewContainerRef },
        { type: Injector },
        { type: NgControl, decorators: [{ type: Self }, { type: Optional }] },
        { type: Renderer2 },
        { type: ElementRef },
        { type: FocusService, decorators: [{ type: Optional }] },
        { type: BehaviorSubject, decorators: [{ type: Optional }, { type: Inject, args: [TOGGLE_SERVICE,] }] }
    ]; };
    __decorate([
        HostListener('focus')
    ], ClrPassword.prototype, "triggerFocus", null);
    __decorate([
        HostListener('blur')
    ], ClrPassword.prototype, "triggerValidation", null);
    ClrPassword = __decorate([ __param(2, Self()),
        __param(2, Optional()),
        __param(5, Optional()),
        __param(6, Optional()),
        __param(6, Inject(TOGGLE_SERVICE))
    ], ClrPassword);
ClrPassword.ɵfac = function ClrPassword_Factory(t) { return new (t || ClrPassword)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Injector), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.NgControl, 10), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Renderer2), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(FocusService, 8), ɵngcc0.ɵɵdirectiveInject(TOGGLE_SERVICE, 8)); };
ClrPassword.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: ClrPassword, selectors: [["", "clrPassword", ""]], hostVars: 2, hostBindings: function ClrPassword_HostBindings(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵlistener("focus", function ClrPassword_focus_HostBindingHandler() { return ctx.triggerFocus(); })("blur", function ClrPassword_blur_HostBindingHandler() { return ctx.triggerValidation(); });
    } if (rf & 2) {
        ɵngcc0.ɵɵclassProp("clr-input", true);
    } }, features: [ɵngcc0.ɵɵInheritDefinitionFeature] });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ClrPassword, [{
        type: Directive,
        args: [{ selector: '[clrPassword]', host: { '[class.clr-input]': 'true' } }]
    }], function () { return [{ type: ɵngcc0.ViewContainerRef }, { type: ɵngcc0.Injector }, { type: ɵngcc1.NgControl, decorators: [{
                type: Self
            }, {
                type: Optional
            }] }, { type: ɵngcc0.Renderer2 }, { type: ɵngcc0.ElementRef }, { type: FocusService, decorators: [{
                type: Optional
            }] }, { type: ɵngcc2.BehaviorSubject, decorators: [{
                type: Optional
            }, {
                type: Inject,
                args: [TOGGLE_SERVICE]
            }] }]; }, { triggerFocus: [{
            type: HostListener,
            args: ['focus']
        }], triggerValidation: [{
            type: HostListener,
            args: ['blur']
        }] }); })();
    return ClrPassword;
}(WrappedFormControl));
export { ClrPassword };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGFzc3dvcmQuanMiLCJzb3VyY2VzIjpbIm5nOi9AY2xyL2FuZ3VsYXIvZm9ybXMvcGFzc3dvcmQvcGFzc3dvcmQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQSxPQUFPLEVBQ0wsU0FBUyxFQUNULFVBQVUsRUFDVixZQUFZLEVBQ1osTUFBTSxFQUNOLFFBQVEsRUFDUixTQUFTLEVBQ1QsTUFBTSxFQUNOLFFBQVEsRUFDUixTQUFTLEVBQ1QsSUFBSSxFQUNKLGdCQUFnQixHQUNqQixNQUFNLGVBQWUsQ0FBQztBQUN2QixPQUFPLEVBQUUsZUFBZSxFQUFFLE1BQU0sTUFBTSxDQUFDO0FBQ3ZDLE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUUzQyxPQUFPLEVBQUUsb0JBQW9CLEVBQUUsY0FBYyxFQUFFLE1BQU0sc0JBQXNCLENBQUM7QUFDNUUsT0FBTyxFQUFFLGtCQUFrQixFQUFFLE1BQU0sMkJBQTJCLENBQUM7QUFDL0QsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLG1DQUFtQyxDQUFDOzs7O0FBR2pFO0FBQXFELElBQXBCLCtCQUF3QztBQUFDLElBR3hFLHFCQUNFLEdBQXFCLEVBQ3JCLFFBQWtCLEVBR2xCLE9BQWtCLEVBQ2xCLFFBQW1CLEVBQ25CLEVBQWMsRUFDTSxZQUEwQixFQUd0QyxhQUF1QztBQUNoRCxRQVpELFlBYUUsa0JBQU0sR0FBRyxFQUFFLG9CQUFvQixFQUFFLFFBQVEsRUFBRSxPQUFPLEVBQUUsUUFBUSxFQUFFLEVBQUUsQ0FBQyxTQVdsRTtBQUNILFFBakJ3QixrQkFBWSxHQUFaLFlBQVksQ0FBYztBQUFDLFFBR3ZDLG1CQUFhLEdBQWIsYUFBYSxDQUEwQjtBQUNuRCxRQWRZLFdBQUssR0FBRyxDQUFDLENBQUM7QUFDdEIsUUFnQkksSUFBSSxDQUFDLEtBQUksQ0FBQyxZQUFZLEVBQUU7QUFDNUIsWUFBTSxNQUFNLElBQUksS0FBSyxDQUFDLGdFQUFnRSxDQUFDLENBQUM7QUFDeEYsU0FBSztBQUNMLFFBQ0ksS0FBSSxDQUFDLGFBQWEsQ0FBQyxJQUFJLENBQ3JCLEtBQUksQ0FBQyxhQUFhLENBQUMsU0FBUyxDQUFDLFVBQUEsTUFBTTtBQUFJLFlBQ3JDLFFBQVEsQ0FBQyxXQUFXLENBQUMsRUFBRSxDQUFDLGFBQWEsRUFBRSxNQUFNLEVBQUUsTUFBTSxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLFVBQVUsQ0FBQyxDQUFDO0FBQ3JGLFFBQU0sQ0FBQyxDQUFDLENBQ0gsQ0FBQztBQUNOO0FBRWlCLElBRmYsQ0FBQztBQUNILElBRUUsa0NBQVksR0FBWjtBQUFjLFFBQ1osSUFBSSxJQUFJLENBQUMsWUFBWSxFQUFFO0FBQzNCLFlBQU0sSUFBSSxDQUFDLFlBQVksQ0FBQyxPQUFPLEdBQUcsSUFBSSxDQUFDO0FBQ3ZDLFNBQUs7QUFDTCxJQUFFLENBQUM7QUFFSCxJQUNFLHVDQUFpQixHQUFqQjtBQUFjLFFBQ1osaUJBQU0saUJBQWlCLFdBQUUsQ0FBQztBQUM5QixRQUFJLElBQUksSUFBSSxDQUFDLFlBQVksRUFBRTtBQUMzQixZQUFNLElBQUksQ0FBQyxZQUFZLENBQUMsT0FBTyxHQUFHLEtBQUssQ0FBQztBQUN4QyxTQUFLO0FBQ0wsSUFBRSxDQUFDO0FBQ0Y7QUFDc0QsZ0JBeEM5QyxnQkFBZ0I7QUFDdkIsZ0JBQVksUUFBUTtBQUNwQixnQkFFVyxTQUFTLHVCQUZqQixJQUFJLFlBQ0osUUFBUTtBQUNULGdCQUNVLFNBQVM7QUFDckIsZ0JBQU0sVUFBVTtBQUNoQixnQkFBb0MsWUFBWSx1QkFBN0MsUUFBUTtBQUFPLGdCQUdPLGVBQWUsdUJBRnJDLFFBQVEsWUFDUixNQUFNLFNBQUMsY0FBYztBQUNwQjtBQUFVLElBZ0JkO0FBQWEsUUFEWixZQUFZLENBQUMsT0FBTyxDQUFDO0FBQ3hCLG1EQUlHO0FBRUgsSUFDRTtBQUFhLFFBRFosWUFBWSxDQUFDLE1BQU0sQ0FBQztBQUN2Qix3REFLRztBQUNGLElBM0NZLFdBQVcsd0JBRHZCLFNBQVMsQ0FBQyxuQkFDSCxDQU1ILFdBQUEsSUFBSSxFQUFFLENBQUE7QUFQRSxRQUFRLEVBQUUsZUFBZSxFQUFFLElBQUksL0JBUTNDLFFBQUksV0FBQSxRQUFRLEVBQUUsQ0FBQTtDQVIrQixFQUFFLG1CQUFtQixFQUFFLE1BQU0sOUJBUzFFLFFBR0ksV0FBQSxRQUFRLEVBQUUsQ0FBQTtBQVo4RCxFQUFFLENBQUMsSEFZL0QsUUFDWixXQUFBLFFBQVEsRUFBRSxDQUFBO0FBQ2QsUUFBSSxXQUFBLE1BQU0sQ0FBQyxjQUFjLENBQUMsQ0FBQTtBQUMzQixPQWRhLFdBQVcsQ0EyQ3ZCOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7b0JBQ0Q7QUFBQyxJQURELGtCQUFDO0FBQ0EsQ0FEQSxBQTNDRCxDQUFpQyxrQkFBa0IsR0EyQ2xEO0FBQ0QsU0E1Q2EsV0FBVztBQUFJIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTYtMjAxOCBWTXdhcmUsIEluYy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqIFRoaXMgc29mdHdhcmUgaXMgcmVsZWFzZWQgdW5kZXIgTUlUIGxpY2Vuc2UuXG4gKiBUaGUgZnVsbCBsaWNlbnNlIGluZm9ybWF0aW9uIGNhbiBiZSBmb3VuZCBpbiBMSUNFTlNFIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHByb2plY3QuXG4gKi9cblxuaW1wb3J0IHtcbiAgRGlyZWN0aXZlLFxuICBFbGVtZW50UmVmLFxuICBIb3N0TGlzdGVuZXIsXG4gIEluamVjdCxcbiAgSW5qZWN0b3IsXG4gIE9uRGVzdHJveSxcbiAgT25Jbml0LFxuICBPcHRpb25hbCxcbiAgUmVuZGVyZXIyLFxuICBTZWxmLFxuICBWaWV3Q29udGFpbmVyUmVmLFxufSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IEJlaGF2aW9yU3ViamVjdCB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgTmdDb250cm9sIH0gZnJvbSAnQGFuZ3VsYXIvZm9ybXMnO1xuXG5pbXBvcnQgeyBDbHJQYXNzd29yZENvbnRhaW5lciwgVE9HR0xFX1NFUlZJQ0UgfSBmcm9tICcuL3Bhc3N3b3JkLWNvbnRhaW5lcic7XG5pbXBvcnQgeyBXcmFwcGVkRm9ybUNvbnRyb2wgfSBmcm9tICcuLi9jb21tb24vd3JhcHBlZC1jb250cm9sJztcbmltcG9ydCB7IEZvY3VzU2VydmljZSB9IGZyb20gJy4uL2NvbW1vbi9wcm92aWRlcnMvZm9jdXMuc2VydmljZSc7XG5cbkBEaXJlY3RpdmUoeyBzZWxlY3RvcjogJ1tjbHJQYXNzd29yZF0nLCBob3N0OiB7ICdbY2xhc3MuY2xyLWlucHV0XSc6ICd0cnVlJyB9IH0pXG5leHBvcnQgY2xhc3MgQ2xyUGFzc3dvcmQgZXh0ZW5kcyBXcmFwcGVkRm9ybUNvbnRyb2w8Q2xyUGFzc3dvcmRDb250YWluZXI+IGltcGxlbWVudHMgT25Jbml0LCBPbkRlc3Ryb3kge1xuICBwcm90ZWN0ZWQgaW5kZXggPSAxO1xuXG4gIGNvbnN0cnVjdG9yKFxuICAgIHZjcjogVmlld0NvbnRhaW5lclJlZixcbiAgICBpbmplY3RvcjogSW5qZWN0b3IsXG4gICAgQFNlbGYoKVxuICAgIEBPcHRpb25hbCgpXG4gICAgY29udHJvbDogTmdDb250cm9sLFxuICAgIHJlbmRlcmVyOiBSZW5kZXJlcjIsXG4gICAgZWw6IEVsZW1lbnRSZWYsXG4gICAgQE9wdGlvbmFsKCkgcHJpdmF0ZSBmb2N1c1NlcnZpY2U6IEZvY3VzU2VydmljZSxcbiAgICBAT3B0aW9uYWwoKVxuICAgIEBJbmplY3QoVE9HR0xFX1NFUlZJQ0UpXG4gICAgcHJpdmF0ZSB0b2dnbGVTZXJ2aWNlOiBCZWhhdmlvclN1YmplY3Q8Ym9vbGVhbj5cbiAgKSB7XG4gICAgc3VwZXIodmNyLCBDbHJQYXNzd29yZENvbnRhaW5lciwgaW5qZWN0b3IsIGNvbnRyb2wsIHJlbmRlcmVyLCBlbCk7XG5cbiAgICBpZiAoIXRoaXMuZm9jdXNTZXJ2aWNlKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ2NsclBhc3N3b3JkIHJlcXVpcmVzIGJlaW5nIHdyYXBwZWQgaW4gPGNsci1wYXNzd29yZC1jb250YWluZXI+Jyk7XG4gICAgfVxuXG4gICAgdGhpcy5zdWJzY3JpcHRpb25zLnB1c2goXG4gICAgICB0aGlzLnRvZ2dsZVNlcnZpY2Uuc3Vic2NyaWJlKHRvZ2dsZSA9PiB7XG4gICAgICAgIHJlbmRlcmVyLnNldFByb3BlcnR5KGVsLm5hdGl2ZUVsZW1lbnQsICd0eXBlJywgdG9nZ2xlID8gJ3RleHQnIDogJ3Bhc3N3b3JkJyk7XG4gICAgICB9KVxuICAgICk7XG4gIH1cblxuICBASG9zdExpc3RlbmVyKCdmb2N1cycpXG4gIHRyaWdnZXJGb2N1cygpIHtcbiAgICBpZiAodGhpcy5mb2N1c1NlcnZpY2UpIHtcbiAgICAgIHRoaXMuZm9jdXNTZXJ2aWNlLmZvY3VzZWQgPSB0cnVlO1xuICAgIH1cbiAgfVxuXG4gIEBIb3N0TGlzdGVuZXIoJ2JsdXInKVxuICB0cmlnZ2VyVmFsaWRhdGlvbigpIHtcbiAgICBzdXBlci50cmlnZ2VyVmFsaWRhdGlvbigpO1xuICAgIGlmICh0aGlzLmZvY3VzU2VydmljZSkge1xuICAgICAgdGhpcy5mb2N1c1NlcnZpY2UuZm9jdXNlZCA9IGZhbHNlO1xuICAgIH1cbiAgfVxufVxuIl19