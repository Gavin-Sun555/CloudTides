/**
 * Copyright (c) 2016-2020 VMware, Inc. All Rights Reserved.
 * This software is released under MIT license.
 * The full license information can be found in LICENSE in the root directory of this project.
 */
import { __decorate, __extends, __param } from "tslib";
import { Component, Inject, InjectionToken, Input, Optional } from '@angular/core';
import { BehaviorSubject } from 'rxjs';
import { IfErrorService } from '../common/if-error/if-error.service';
import { ControlClassService } from '../common/providers/control-class.service';
import { ControlIdService } from '../common/providers/control-id.service';
import { FocusService } from '../common/providers/focus.service';
import { LayoutService } from '../common/providers/layout.service';
import { NgControlService } from '../common/providers/ng-control.service';
import { ClrCommonStringsService } from '../../utils/i18n/common-strings.service';
import { ClrAbstractContainer } from '../common/abstract-container';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@angular/common';
import * as ɵngcc2 from '../common/label';
import * as ɵngcc3 from '../../icon/icon';
import * as ɵngcc4 from 'rxjs';

function ClrPasswordContainer_label_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelement(0, "label");
} }
function ClrPasswordContainer_button_6_Template(rf, ctx) { if (rf & 1) {
    var _r6 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "button", 6);
    ɵngcc0.ɵɵlistener("click", function ClrPasswordContainer_button_6_Template_button_click_0_listener() { ɵngcc0.ɵɵrestoreView(_r6); var ctx_r5 = ɵngcc0.ɵɵnextContext(); return ctx_r5.toggle(); });
    ɵngcc0.ɵɵelement(1, "clr-icon");
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    var ctx_r1 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("disabled", ctx_r1.control == null ? null : ctx_r1.control.disabled);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵattribute("shape", ctx_r1.show ? "eye-hide" : "eye")("title", ctx_r1.show ? ctx_r1.commonStrings.keys.hide : ctx_r1.commonStrings.keys.show);
} }
function ClrPasswordContainer_clr_icon_7_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelement(0, "clr-icon", 7);
} }
function ClrPasswordContainer_8_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵprojection(0, 2, ["*ngIf", "!invalid"]);
} }
function ClrPasswordContainer_9_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵprojection(0, 3, ["*ngIf", "invalid"]);
} }
var _c0 = [[["label"]], [["", "clrPassword", ""]], [["clr-control-helper"]], [["clr-control-error"]]];
var _c1 = ["label", "[clrPassword]", "clr-control-helper", "clr-control-error"];
export var TOGGLE_SERVICE = new InjectionToken(undefined);
export function ToggleServiceFactory() {
    return new BehaviorSubject(false);
}
export var TOGGLE_SERVICE_PROVIDER = { provide: TOGGLE_SERVICE, useFactory: ToggleServiceFactory };
var ClrPasswordContainer = /** @class */ (function (_super) {
    __extends(ClrPasswordContainer, _super);
    function ClrPasswordContainer(ifErrorService, layoutService, controlClassService, ngControlService, focusService, toggleService, commonStrings) {
        var _this = _super.call(this, ifErrorService, layoutService, controlClassService, ngControlService) || this;
        _this.focusService = focusService;
        _this.toggleService = toggleService;
        _this.commonStrings = commonStrings;
        _this.show = false;
        _this.focus = false;
        _this._toggle = true;
        _this.subscriptions.push(_this.focusService.focusChange.subscribe(function (state) {
            _this.focus = state;
        }));
        return _this;
    }
    Object.defineProperty(ClrPasswordContainer.prototype, "clrToggle", {
        get: function () {
            return this._toggle;
        },
        set: function (state) {
            this._toggle = state;
            if (!state) {
                this.show = false;
            }
        },
        enumerable: true,
        configurable: true
    });
    ClrPasswordContainer.prototype.toggle = function () {
        this.show = !this.show;
        this.toggleService.next(this.show);
    };
    ClrPasswordContainer.ctorParameters = function () { return [
        { type: IfErrorService },
        { type: LayoutService, decorators: [{ type: Optional }] },
        { type: ControlClassService },
        { type: NgControlService },
        { type: FocusService },
        { type: BehaviorSubject, decorators: [{ type: Inject, args: [TOGGLE_SERVICE,] }] },
        { type: ClrCommonStringsService }
    ]; };
    __decorate([
        Input('clrToggle')
    ], ClrPasswordContainer.prototype, "clrToggle", null);
    ClrPasswordContainer = __decorate([ __param(1, Optional()),
        __param(5, Inject(TOGGLE_SERVICE))
    ], ClrPasswordContainer);
ClrPasswordContainer.ɵfac = function ClrPasswordContainer_Factory(t) { return new (t || ClrPasswordContainer)(ɵngcc0.ɵɵdirectiveInject(IfErrorService), ɵngcc0.ɵɵdirectiveInject(LayoutService, 8), ɵngcc0.ɵɵdirectiveInject(ControlClassService), ɵngcc0.ɵɵdirectiveInject(NgControlService), ɵngcc0.ɵɵdirectiveInject(FocusService), ɵngcc0.ɵɵdirectiveInject(TOGGLE_SERVICE), ɵngcc0.ɵɵdirectiveInject(ClrCommonStringsService)); };
ClrPasswordContainer.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: ClrPasswordContainer, selectors: [["clr-password-container"]], hostVars: 6, hostBindings: function ClrPasswordContainer_HostBindings(rf, ctx) { if (rf & 2) {
        ɵngcc0.ɵɵclassProp("clr-form-control", true)("clr-form-control-disabled", ctx.control == null ? null : ctx.control.disabled)("clr-row", ctx.addGrid());
    } }, inputs: { clrToggle: "clrToggle" }, features: [ɵngcc0.ɵɵProvidersFeature([
            IfErrorService,
            NgControlService,
            ControlIdService,
            ControlClassService,
            FocusService,
            TOGGLE_SERVICE_PROVIDER,
        ]), ɵngcc0.ɵɵInheritDefinitionFeature], ngContentSelectors: _c1, decls: 10, vars: 8, consts: [[4, "ngIf"], [1, "clr-control-container", 3, "ngClass"], [1, "clr-input-wrapper"], [1, "clr-input-group"], ["class", "clr-input-group-icon-action", "type", "button", 3, "disabled", "click", 4, "ngIf"], ["class", "clr-validate-icon", "shape", "exclamation-circle", "aria-hidden", "true", 4, "ngIf"], ["type", "button", 1, "clr-input-group-icon-action", 3, "disabled", "click"], ["shape", "exclamation-circle", "aria-hidden", "true", 1, "clr-validate-icon"]], template: function ClrPasswordContainer_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef(_c0);
        ɵngcc0.ɵɵprojection(0);
        ɵngcc0.ɵɵtemplate(1, ClrPasswordContainer_label_1_Template, 1, 0, "label", 0);
        ɵngcc0.ɵɵelementStart(2, "div", 1);
        ɵngcc0.ɵɵelementStart(3, "div", 2);
        ɵngcc0.ɵɵelementStart(4, "div", 3);
        ɵngcc0.ɵɵprojection(5, 1);
        ɵngcc0.ɵɵtemplate(6, ClrPasswordContainer_button_6_Template, 2, 3, "button", 4);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵtemplate(7, ClrPasswordContainer_clr_icon_7_Template, 1, 0, "clr-icon", 5);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵtemplate(8, ClrPasswordContainer_8_Template, 1, 0, undefined, 0);
        ɵngcc0.ɵɵtemplate(9, ClrPasswordContainer_9_Template, 1, 0, undefined, 0);
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", !ctx.label && ctx.addGrid());
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngClass", ctx.controlClass());
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵclassProp("clr-focus", ctx.focus);
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("ngIf", ctx.clrToggle);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.invalid);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", !ctx.invalid);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.invalid);
    } }, directives: [ɵngcc1.NgIf, ɵngcc1.NgClass, ɵngcc2.ClrLabel, ɵngcc3.ClrIconCustomTag], encapsulation: 2 });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ClrPasswordContainer, [{
        type: Component,
        args: [{
                selector: 'clr-password-container',
                template: "\n    <ng-content select=\"label\"></ng-content>\n    <label *ngIf=\"!label && addGrid()\"></label>\n    <div class=\"clr-control-container\" [ngClass]=\"controlClass()\">\n      <div class=\"clr-input-wrapper\">\n        <div class=\"clr-input-group\" [class.clr-focus]=\"focus\">\n          <ng-content select=\"[clrPassword]\"></ng-content>\n          <button\n            *ngIf=\"clrToggle\"\n            (click)=\"toggle()\"\n            [disabled]=\"control?.disabled\"\n            class=\"clr-input-group-icon-action\"\n            type=\"button\">\n            <clr-icon\n            [attr.shape]=\"show ? 'eye-hide' : 'eye'\"\n            [attr.title]=\"show ? commonStrings.keys.hide : commonStrings.keys.show\"></clr-icon>\n          </button>\n        </div>\n        <clr-icon *ngIf=\"invalid\" class=\"clr-validate-icon\" shape=\"exclamation-circle\" aria-hidden=\"true\"></clr-icon>\n      </div>\n      <ng-content select=\"clr-control-helper\" *ngIf=\"!invalid\"></ng-content>\n      <ng-content select=\"clr-control-error\" *ngIf=\"invalid\"></ng-content>\n    </div>\n    ",
                host: {
                    '[class.clr-form-control]': 'true',
                    '[class.clr-form-control-disabled]': 'control?.disabled',
                    '[class.clr-row]': 'addGrid()'
                },
                providers: [
                    IfErrorService,
                    NgControlService,
                    ControlIdService,
                    ControlClassService,
                    FocusService,
                    TOGGLE_SERVICE_PROVIDER,
                ]
            }]
    }], function () { return [{ type: IfErrorService }, { type: LayoutService, decorators: [{
                type: Optional
            }] }, { type: ControlClassService }, { type: NgControlService }, { type: FocusService }, { type: ɵngcc4.BehaviorSubject, decorators: [{
                type: Inject,
                args: [TOGGLE_SERVICE]
            }] }, { type: ClrCommonStringsService }]; }, { clrToggle: [{
            type: Input,
            args: ['clrToggle']
        }] }); })();
    return ClrPasswordContainer;
}(ClrAbstractContainer));
export { ClrPasswordContainer };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,