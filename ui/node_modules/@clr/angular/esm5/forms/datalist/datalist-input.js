/**
 * Copyright (c) 2016-2020 VMware, Inc. All Rights Reserved.
 * This software is released under MIT license.
 * The full license information can be found in LICENSE in the root directory of this project.
 */
import { __decorate, __extends, __param } from "tslib";
import { Directive, ViewContainerRef, Injector, Self, Optional, Renderer2, ElementRef, HostListener, AfterContentInit, } from '@angular/core';
import { WrappedFormControl } from '../common/wrapped-control';
import { ClrDatalistContainer } from './datalist-container';
import { NgControl } from '@angular/forms';
import { FocusService } from '../common/providers/focus.service';
import { DatalistIdService } from './providers/datalist-id.service';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@angular/forms';
var ClrDatalistInput = /** @class */ (function (_super) {
    __extends(ClrDatalistInput, _super);
    function ClrDatalistInput(focusService, vcr, injector, control, renderer, el, datalistIdService) {
        var _this = _super.call(this, vcr, ClrDatalistContainer, injector, control, renderer, el) || this;
        _this.focusService = focusService;
        _this.datalistIdService = datalistIdService;
        if (!_this.focusService) {
            throw new Error('clrDatalist requires being wrapped in <clr-datalist-container>');
        }
        return _this;
    }
    ClrDatalistInput.prototype.ngAfterContentInit = function () {
        var _this = this;
        // Subscriptions is inherited from WrappedFormControl, unsubscribe is handled there
        this.subscriptions.push(this.datalistIdService.idChange.subscribe(function (id) { return (_this.listValue = id); }));
    };
    ClrDatalistInput.prototype.triggerFocus = function () {
        if (this.focusService) {
            this.focusService.focused = true;
        }
    };
    ClrDatalistInput.prototype.triggerValidation = function () {
        _super.prototype.triggerValidation.call(this);
        if (this.focusService) {
            this.focusService.focused = false;
        }
    };
    ClrDatalistInput.ctorParameters = function () { return [
        { type: FocusService, decorators: [{ type: Optional }] },
        { type: ViewContainerRef },
        { type: Injector },
        { type: NgControl, decorators: [{ type: Self }, { type: Optional }] },
        { type: Renderer2 },
        { type: ElementRef },
        { type: DatalistIdService }
    ]; };
    __decorate([
        HostListener('focus')
    ], ClrDatalistInput.prototype, "triggerFocus", null);
    __decorate([
        HostListener('blur')
    ], ClrDatalistInput.prototype, "triggerValidation", null);
    ClrDatalistInput = __decorate([ __param(0, Optional()),
        __param(3, Self()),
        __param(3, Optional())
    ], ClrDatalistInput);
ClrDatalistInput.ɵfac = function ClrDatalistInput_Factory(t) { return new (t || ClrDatalistInput)(ɵngcc0.ɵɵdirectiveInject(FocusService, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Injector), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.NgControl, 10), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Renderer2), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(DatalistIdService)); };
ClrDatalistInput.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: ClrDatalistInput, selectors: [["", "clrDatalistInput", ""]], hostVars: 3, hostBindings: function ClrDatalistInput_HostBindings(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵlistener("focus", function ClrDatalistInput_focus_HostBindingHandler() { return ctx.triggerFocus(); })("blur", function ClrDatalistInput_blur_HostBindingHandler() { return ctx.triggerValidation(); });
    } if (rf & 2) {
        ɵngcc0.ɵɵattribute("list", ctx.listValue);
        ɵngcc0.ɵɵclassProp("clr-input", true);
    } }, features: [ɵngcc0.ɵɵInheritDefinitionFeature] });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ClrDatalistInput, [{
        type: Directive,
        args: [{
                selector: '[clrDatalistInput]',
                host: {
                    '[class.clr-input]': 'true',
                    '[attr.list]': 'listValue'
                }
            }]
    }], function () { return [{ type: FocusService, decorators: [{
                type: Optional
            }] }, { type: ɵngcc0.ViewContainerRef }, { type: ɵngcc0.Injector }, { type: ɵngcc1.NgControl, decorators: [{
                type: Self
            }, {
                type: Optional
            }] }, { type: ɵngcc0.Renderer2 }, { type: ɵngcc0.ElementRef }, { type: DatalistIdService }]; }, { triggerFocus: [{
            type: HostListener,
            args: ['focus']
        }], triggerValidation: [{
            type: HostListener,
            args: ['blur']
        }] }); })();
    return ClrDatalistInput;
}(WrappedFormControl));
export { ClrDatalistInput };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGF0YWxpc3QtaW5wdXQuanMiLCJzb3VyY2VzIjpbIm5nOi9AY2xyL2FuZ3VsYXIvZm9ybXMvZGF0YWxpc3QvZGF0YWxpc3QtaW5wdXQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQSxPQUFPLEVBQ0wsU0FBUyxFQUNULGdCQUFnQixFQUNoQixRQUFRLEVBQ1IsSUFBSSxFQUNKLFFBQVEsRUFDUixTQUFTLEVBQ1QsVUFBVSxFQUNWLFlBQVksRUFDWixnQkFBZ0IsR0FDakIsTUFBTSxlQUFlLENBQUM7QUFDdkIsT0FBTyxFQUFFLGtCQUFrQixFQUFFLE1BQU0sMkJBQTJCLENBQUM7QUFDL0QsT0FBTyxFQUFFLG9CQUFvQixFQUFFLE1BQU0sc0JBQXNCLENBQUM7QUFDNUQsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBQzNDLE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSxtQ0FBbUMsQ0FBQztBQUNqRSxPQUFPLEVBQUUsaUJBQWlCLEVBQUUsTUFBTSxpQ0FBaUMsQ0FBQzs7O0FBU3BFO0FBQTBELElBQXBCLG9DQUF3QztBQUFDLElBQzdFLDBCQUNzQixZQUEwQixFQUM5QyxHQUFxQixFQUNyQixRQUFrQixFQUdsQixPQUFrQixFQUNsQixRQUFtQixFQUNuQixFQUFjLEVBQ04saUJBQW9DO0FBQzdDLFFBVkQsWUFXRSxrQkFBTSxHQUFHLEVBQUUsb0JBQW9CLEVBQUUsUUFBUSxFQUFFLE9BQU8sRUFBRSxRQUFRLEVBQUUsRUFBRSxDQUFDLFNBS2xFO0FBQ0gsUUFoQndCLGtCQUFZLEdBQVosWUFBWSxDQUFjO0FBQUMsUUFRdkMsdUJBQWlCLEdBQWpCLGlCQUFpQixDQUFtQjtBQUNoRCxRQUdJLElBQUksQ0FBQyxLQUFJLENBQUMsWUFBWSxFQUFFO0FBQzVCLFlBQU0sTUFBTSxJQUFJLEtBQUssQ0FBQyxnRUFBZ0UsQ0FBQyxDQUFDO0FBQ3hGLFNBQUs7QUFDTDtBQUVpQixJQUZmLENBQUM7QUFDSCxJQUdFLDZDQUFrQixHQUFsQjtBQUFjLFFBQWQsaUJBR0M7QUFDSCxRQUhJLG1GQUFtRjtBQUN2RixRQUFJLElBQUksQ0FBQyxhQUFhLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxRQUFRLENBQUMsU0FBUyxDQUFDLFVBQUEsRUFBRSxJQUFJLE9BQUEsQ0FBQyxLQUFJLENBQUMsU0FBUyxHQUFHLEVBQUUsQ0FBQyxFQUFyQixDQUFxQixDQUFDLENBQUMsQ0FBQztBQUNwRyxJQUFFLENBQUM7QUFFSCxJQUNFLHVDQUFZLEdBQVo7QUFBYyxRQUNaLElBQUksSUFBSSxDQUFDLFlBQVksRUFBRTtBQUMzQixZQUFNLElBQUksQ0FBQyxZQUFZLENBQUMsT0FBTyxHQUFHLElBQUksQ0FBQztBQUN2QyxTQUFLO0FBQ0wsSUFBRSxDQUFDO0FBRUgsSUFDRSw0Q0FBaUIsR0FBakI7QUFBYyxRQUNaLGlCQUFNLGlCQUFpQixXQUFFLENBQUM7QUFDOUIsUUFBSSxJQUFJLElBQUksQ0FBQyxZQUFZLEVBQUU7QUFDM0IsWUFBTSxJQUFJLENBQUMsWUFBWSxDQUFDLE9BQU8sR0FBRyxLQUFLLENBQUM7QUFDeEMsU0FBSztBQUNMLElBQUUsQ0FBQztBQUNGO0FBQzJELGdCQXZDdEIsWUFBWSx1QkFBN0MsUUFBUTtBQUFPLGdCQUNYLGdCQUFnQjtBQUN2QixnQkFBWSxRQUFRO0FBQ3BCLGdCQUVXLFNBQVMsdUJBRmpCLElBQUksWUFDSixRQUFRO0FBQ1QsZ0JBQ1UsU0FBUztBQUNyQixnQkFBTSxVQUFVO0FBQ2hCLGdCQUE2QixpQkFBaUI7QUFDOUM7QUFDSSxJQWVKO0FBQWEsUUFEWixZQUFZLENBQUMsT0FBTyxDQUFDO0FBQ3hCLHdEQUlHO0FBRUgsSUFDRTtBQUFhLFFBRFosWUFBWSxDQUFDLE1BQU0sQ0FBQztBQUN2Qiw2REFLRztBQUNGLElBeENZLGdCQUFnQix3QkFQNUIsU0FBUyxDQUFDLG5CQU9ILENBRUgsV0FBQSxRQUFRLEVBQUUsQ0FBQTtRQVJiLFFBQVEsRUFBRSxsQkFRSyxRQUdaLFdBQUEsSUFBSSxFQUFFLENBQUE7VUFYcUIsY0FDOUIsSUFBSSxFQUFFLDlCQVdQLFFBQUksV0FBQSxRQUFRLEVBQUUsQ0FBQTtpQkFWWCxqQkFXSixPQVBhLGdCQUFnQixDQXdDNUI7VUE1Q3NCLEVBQUUsTUFBTSxrQkFDM0IsYUFBYSxFQUFFLFdBQVcsZUFDM0IsV0FDRixDQUFDOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O29CQTBDRjtBQUFDLElBREQsdUJBQUM7QUFDQSxDQURBLEFBeENELENBQXNDLGtCQUFrQixHQXdDdkQ7QUFDRCxTQXpDYSxnQkFBZ0I7QUFBSSIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDE2LTIwMjAgVk13YXJlLCBJbmMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKiBUaGlzIHNvZnR3YXJlIGlzIHJlbGVhc2VkIHVuZGVyIE1JVCBsaWNlbnNlLlxuICogVGhlIGZ1bGwgbGljZW5zZSBpbmZvcm1hdGlvbiBjYW4gYmUgZm91bmQgaW4gTElDRU5TRSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBwcm9qZWN0LlxuICovXG5cbmltcG9ydCB7XG4gIERpcmVjdGl2ZSxcbiAgVmlld0NvbnRhaW5lclJlZixcbiAgSW5qZWN0b3IsXG4gIFNlbGYsXG4gIE9wdGlvbmFsLFxuICBSZW5kZXJlcjIsXG4gIEVsZW1lbnRSZWYsXG4gIEhvc3RMaXN0ZW5lcixcbiAgQWZ0ZXJDb250ZW50SW5pdCxcbn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBXcmFwcGVkRm9ybUNvbnRyb2wgfSBmcm9tICcuLi9jb21tb24vd3JhcHBlZC1jb250cm9sJztcbmltcG9ydCB7IENsckRhdGFsaXN0Q29udGFpbmVyIH0gZnJvbSAnLi9kYXRhbGlzdC1jb250YWluZXInO1xuaW1wb3J0IHsgTmdDb250cm9sIH0gZnJvbSAnQGFuZ3VsYXIvZm9ybXMnO1xuaW1wb3J0IHsgRm9jdXNTZXJ2aWNlIH0gZnJvbSAnLi4vY29tbW9uL3Byb3ZpZGVycy9mb2N1cy5zZXJ2aWNlJztcbmltcG9ydCB7IERhdGFsaXN0SWRTZXJ2aWNlIH0gZnJvbSAnLi9wcm92aWRlcnMvZGF0YWxpc3QtaWQuc2VydmljZSc7XG5cbkBEaXJlY3RpdmUoe1xuICBzZWxlY3RvcjogJ1tjbHJEYXRhbGlzdElucHV0XScsXG4gIGhvc3Q6IHtcbiAgICAnW2NsYXNzLmNsci1pbnB1dF0nOiAndHJ1ZScsXG4gICAgJ1thdHRyLmxpc3RdJzogJ2xpc3RWYWx1ZScsXG4gIH0sXG59KVxuZXhwb3J0IGNsYXNzIENsckRhdGFsaXN0SW5wdXQgZXh0ZW5kcyBXcmFwcGVkRm9ybUNvbnRyb2w8Q2xyRGF0YWxpc3RDb250YWluZXI+IGltcGxlbWVudHMgQWZ0ZXJDb250ZW50SW5pdCB7XG4gIGNvbnN0cnVjdG9yKFxuICAgIEBPcHRpb25hbCgpIHByaXZhdGUgZm9jdXNTZXJ2aWNlOiBGb2N1c1NlcnZpY2UsXG4gICAgdmNyOiBWaWV3Q29udGFpbmVyUmVmLFxuICAgIGluamVjdG9yOiBJbmplY3RvcixcbiAgICBAU2VsZigpXG4gICAgQE9wdGlvbmFsKClcbiAgICBjb250cm9sOiBOZ0NvbnRyb2wsXG4gICAgcmVuZGVyZXI6IFJlbmRlcmVyMixcbiAgICBlbDogRWxlbWVudFJlZixcbiAgICBwcml2YXRlIGRhdGFsaXN0SWRTZXJ2aWNlOiBEYXRhbGlzdElkU2VydmljZVxuICApIHtcbiAgICBzdXBlcih2Y3IsIENsckRhdGFsaXN0Q29udGFpbmVyLCBpbmplY3RvciwgY29udHJvbCwgcmVuZGVyZXIsIGVsKTtcblxuICAgIGlmICghdGhpcy5mb2N1c1NlcnZpY2UpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignY2xyRGF0YWxpc3QgcmVxdWlyZXMgYmVpbmcgd3JhcHBlZCBpbiA8Y2xyLWRhdGFsaXN0LWNvbnRhaW5lcj4nKTtcbiAgICB9XG4gIH1cblxuICBsaXN0VmFsdWU6IHN0cmluZztcblxuICBuZ0FmdGVyQ29udGVudEluaXQoKSB7XG4gICAgLy8gU3Vic2NyaXB0aW9ucyBpcyBpbmhlcml0ZWQgZnJvbSBXcmFwcGVkRm9ybUNvbnRyb2wsIHVuc3Vic2NyaWJlIGlzIGhhbmRsZWQgdGhlcmVcbiAgICB0aGlzLnN1YnNjcmlwdGlvbnMucHVzaCh0aGlzLmRhdGFsaXN0SWRTZXJ2aWNlLmlkQ2hhbmdlLnN1YnNjcmliZShpZCA9PiAodGhpcy5saXN0VmFsdWUgPSBpZCkpKTtcbiAgfVxuXG4gIEBIb3N0TGlzdGVuZXIoJ2ZvY3VzJylcbiAgdHJpZ2dlckZvY3VzKCkge1xuICAgIGlmICh0aGlzLmZvY3VzU2VydmljZSkge1xuICAgICAgdGhpcy5mb2N1c1NlcnZpY2UuZm9jdXNlZCA9IHRydWU7XG4gICAgfVxuICB9XG5cbiAgQEhvc3RMaXN0ZW5lcignYmx1cicpXG4gIHRyaWdnZXJWYWxpZGF0aW9uKCkge1xuICAgIHN1cGVyLnRyaWdnZXJWYWxpZGF0aW9uKCk7XG4gICAgaWYgKHRoaXMuZm9jdXNTZXJ2aWNlKSB7XG4gICAgICB0aGlzLmZvY3VzU2VydmljZS5mb2N1c2VkID0gZmFsc2U7XG4gICAgfVxuICB9XG59XG4iXX0=