import { __decorate, __extends, __param } from "tslib";
/*
 * Copyright (c) 2016-2019 VMware, Inc. All Rights Reserved.
 * This software is released under MIT license.
 * The full license information can be found in LICENSE in the root directory of this project.
 */
import { AfterContentInit, Component, ContentChildren, ElementRef, Inject, Injector, Input, OnDestroy, Optional, QueryList, SkipSelf, } from '@angular/core';
import { AbstractPopover } from '../common/abstract-popover';
import { Point } from '../common/popover';
import { POPOVER_HOST_ANCHOR } from '../common/popover-host-anchor.token';
import { DropdownFocusHandler } from './providers/dropdown-focus-handler.service';
import { FocusableItem } from '../../utils/focus/focusable-item/focusable-item';
import * as ɵngcc0 from '@angular/core';

var _c0 = ["*"];
var ClrDropdownMenu = /** @class */ (function (_super) {
    __extends(ClrDropdownMenu, _super);
    function ClrDropdownMenu(injector, parentHost, nested, focusHandler) {
        var _this = this;
        if (!parentHost) {
            throw new Error('clr-dropdown-menu should only be used inside of a clr-dropdown');
        }
        _this = _super.call(this, injector, parentHost) || this;
        if (!nested) {
            // Default positioning for normal dropdown is bottom-left
            _this.anchorPoint = Point.BOTTOM_LEFT;
            _this.popoverPoint = Point.LEFT_TOP;
        }
        else {
            // Default positioning for nested dropdown is right-top
            _this.anchorPoint = Point.RIGHT_TOP;
            _this.popoverPoint = Point.LEFT_TOP;
        }
        _this.popoverOptions.allowMultipleOpen = true;
        _this.popoverOptions.ignoreGlobalESCListener = true;
        _this.closeOnOutsideClick = true;
        _this.focusHandler = focusHandler;
        return _this;
    }
    Object.defineProperty(ClrDropdownMenu.prototype, "position", {
        set: function (position) {
            // set the popover values based on menu position
            switch (position) {
                case 'top-right':
                    this.anchorPoint = Point.TOP_RIGHT;
                    this.popoverPoint = Point.RIGHT_BOTTOM;
                    break;
                case 'top-left':
                    this.anchorPoint = Point.TOP_LEFT;
                    this.popoverPoint = Point.LEFT_BOTTOM;
                    break;
                case 'bottom-right':
                    this.anchorPoint = Point.BOTTOM_RIGHT;
                    this.popoverPoint = Point.RIGHT_TOP;
                    break;
                case 'bottom-left':
                    this.anchorPoint = Point.BOTTOM_LEFT;
                    this.popoverPoint = Point.LEFT_TOP;
                    break;
                case 'right-top':
                    this.anchorPoint = Point.RIGHT_TOP;
                    this.popoverPoint = Point.LEFT_TOP;
                    break;
                case 'right-bottom':
                    this.anchorPoint = Point.RIGHT_BOTTOM;
                    this.popoverPoint = Point.LEFT_BOTTOM;
                    break;
                case 'left-top':
                    this.anchorPoint = Point.LEFT_TOP;
                    this.popoverPoint = Point.RIGHT_TOP;
                    break;
                case 'left-bottom':
                    this.anchorPoint = Point.LEFT_BOTTOM;
                    this.popoverPoint = Point.RIGHT_BOTTOM;
                    break;
                default:
                    this.anchorPoint = Point.BOTTOM_LEFT;
                    this.popoverPoint = Point.LEFT_TOP;
                    break;
            }
        },
        enumerable: true,
        configurable: true
    });
    ClrDropdownMenu.prototype.ngAfterContentInit = function () {
        var _this = this;
        this.focusHandler.container = this.el.nativeElement;
        this.items.changes.subscribe(function () { return _this.focusHandler.addChildren(_this.items.toArray()); });
        // I saw this on GitHub as a solution to avoid code duplication because of missed QueryList changes
        this.items.notifyOnChanges();
    };
    ClrDropdownMenu.prototype.ngOnDestroy = function () {
        _super.prototype.ngOnDestroy.call(this);
        this.focusHandler.resetChildren();
    };
    ClrDropdownMenu.ctorParameters = function () { return [
        { type: Injector },
        { type: ElementRef, decorators: [{ type: Optional }, { type: Inject, args: [POPOVER_HOST_ANCHOR,] }] },
        { type: ClrDropdownMenu, decorators: [{ type: Optional }, { type: SkipSelf }] },
        { type: DropdownFocusHandler }
    ]; };
    __decorate([
        Input('clrPosition')
    ], ClrDropdownMenu.prototype, "position", null);
    __decorate([
        ContentChildren(FocusableItem)
    ], ClrDropdownMenu.prototype, "items", void 0);
    ClrDropdownMenu = __decorate([ __param(1, Optional()),
        __param(1, Inject(POPOVER_HOST_ANCHOR)),
        __param(2, Optional()),
        __param(2, SkipSelf())
    ], ClrDropdownMenu);
ClrDropdownMenu.ɵfac = function ClrDropdownMenu_Factory(t) { return new (t || ClrDropdownMenu)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Injector), ɵngcc0.ɵɵdirectiveInject(POPOVER_HOST_ANCHOR, 8), ɵngcc0.ɵɵdirectiveInject(ClrDropdownMenu, 12), ɵngcc0.ɵɵdirectiveInject(DropdownFocusHandler)); };
ClrDropdownMenu.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: ClrDropdownMenu, selectors: [["clr-dropdown-menu"]], contentQueries: function ClrDropdownMenu_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {
        ɵngcc0.ɵɵcontentQuery(dirIndex, FocusableItem, false);
    } if (rf & 2) {
        var _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.items = _t);
    } }, hostVars: 3, hostBindings: function ClrDropdownMenu_HostBindings(rf, ctx) { if (rf & 2) {
        ɵngcc0.ɵɵattribute("role", "menu");
        ɵngcc0.ɵɵclassProp("dropdown-menu", true);
    } }, inputs: { position: ["clrPosition", "position"] }, features: [ɵngcc0.ɵɵInheritDefinitionFeature], ngContentSelectors: _c0, decls: 1, vars: 0, template: function ClrDropdownMenu_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵprojection(0);
    } }, encapsulation: 2 });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ClrDropdownMenu, [{
        type: Component,
        args: [{
                selector: 'clr-dropdown-menu',
                template: "\n        <ng-content></ng-content>\n    ",
                host: {
                    '[class.dropdown-menu]': 'true',
                    '[attr.role]': '"menu"'
                }
            }]
    }], function () { return [{ type: ɵngcc0.Injector }, { type: ɵngcc0.ElementRef, decorators: [{
                type: Optional
            }, {
                type: Inject,
                args: [POPOVER_HOST_ANCHOR]
            }] }, { type: ClrDropdownMenu, decorators: [{
                type: Optional
            }, {
                type: SkipSelf
            }] }, { type: DropdownFocusHandler }]; }, { position: [{
            type: Input,
            args: ['clrPosition']
        }], items: [{
            type: ContentChildren,
            args: [FocusableItem]
        }] }); })();
    return ClrDropdownMenu;
}(AbstractPopover));
export { ClrDropdownMenu };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,