import { __decorate } from "tslib";
/*
 * Copyright (c) 2016-2019 VMware, Inc. All Rights Reserved.
 * This software is released under MIT license.
 * The full license information can be found in LICENSE in the root directory of this project.
 */
import { Directive, ElementRef, HostListener } from '@angular/core';
import { ClrPopoverToggleService } from '../../utils/popover/providers/popover-toggle.service';
import { ClrDropdown } from './dropdown';
import { DropdownFocusHandler } from './providers/dropdown-focus-handler.service';
import * as ɵngcc0 from '@angular/core';
var ClrDropdownTrigger = /** @class */ (function () {
    function ClrDropdownTrigger(dropdown, toggleService, el, focusHandler) {
        this.toggleService = toggleService;
        this.isRootLevelToggle = true;
        // if the containing dropdown has a parent, then this is not the root level one
        if (dropdown.parent) {
            this.isRootLevelToggle = false;
        }
        focusHandler.trigger = el.nativeElement;
    }
    Object.defineProperty(ClrDropdownTrigger.prototype, "active", {
        get: function () {
            return this.toggleService.open;
        },
        enumerable: true,
        configurable: true
    });
    ClrDropdownTrigger.prototype.onDropdownTriggerClick = function (event) {
        this.toggleService.toggleWithEvent(event);
    };
    ClrDropdownTrigger.ctorParameters = function () { return [
        { type: ClrDropdown },
        { type: ClrPopoverToggleService },
        { type: ElementRef },
        { type: DropdownFocusHandler }
    ]; };
    __decorate([
        HostListener('click', ['$event'])
    ], ClrDropdownTrigger.prototype, "onDropdownTriggerClick", null);
ClrDropdownTrigger.ɵfac = function ClrDropdownTrigger_Factory(t) { return new (t || ClrDropdownTrigger)(ɵngcc0.ɵɵdirectiveInject(ClrDropdown), ɵngcc0.ɵɵdirectiveInject(ClrPopoverToggleService), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(DropdownFocusHandler)); };
ClrDropdownTrigger.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: ClrDropdownTrigger, selectors: [["", "clrDropdownTrigger", ""], ["", "clrDropdownToggle", ""]], hostVars: 10, hostBindings: function ClrDropdownTrigger_HostBindings(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵlistener("click", function ClrDropdownTrigger_click_HostBindingHandler($event) { return ctx.onDropdownTriggerClick($event); });
    } if (rf & 2) {
        ɵngcc0.ɵɵattribute("aria-haspopup", "menu")("aria-expanded", ctx.active);
        ɵngcc0.ɵɵclassProp("dropdown-toggle", ctx.isRootLevelToggle)("dropdown-item", !ctx.isRootLevelToggle)("expandable", !ctx.isRootLevelToggle)("active", ctx.active);
    } } });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ClrDropdownTrigger, [{
        type: Directive,
        args: [{
                // We support both selectors for legacy reasons
                selector: '[clrDropdownTrigger],[clrDropdownToggle]',
                host: {
                    '[class.dropdown-toggle]': 'isRootLevelToggle',
                    '[class.dropdown-item]': '!isRootLevelToggle',
                    '[class.expandable]': '!isRootLevelToggle',
                    '[class.active]': 'active',
                    '[attr.aria-haspopup]': '"menu"',
                    '[attr.aria-expanded]': 'active'
                }
            }]
    }], function () { return [{ type: ClrDropdown }, { type: ClrPopoverToggleService }, { type: ɵngcc0.ElementRef }, { type: DropdownFocusHandler }]; }, { onDropdownTriggerClick: [{
            type: HostListener,
            args: ['click', ['$event']]
        }] }); })();
    return ClrDropdownTrigger;
}());
export { ClrDropdownTrigger };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZHJvcGRvd24tdHJpZ2dlci5qcyIsInNvdXJjZXMiOlsibmc6L0BjbHIvYW5ndWxhci9wb3BvdmVyL2Ryb3Bkb3duL2Ryb3Bkb3duLXRyaWdnZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNILE9BQU8sRUFBRSxTQUFTLEVBQUUsVUFBVSxFQUFFLFlBQVksRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUVwRSxPQUFPLEVBQUUsdUJBQXVCLEVBQUUsTUFBTSxzREFBc0QsQ0FBQztBQUUvRixPQUFPLEVBQUUsV0FBVyxFQUFFLE1BQU0sWUFBWSxDQUFDO0FBQ3pDLE9BQU8sRUFBRSxvQkFBb0IsRUFBRSxNQUFNLDRDQUE0QyxDQUFDOztBQWNsRjtBQUNvQixJQUVsQiw0QkFDRSxRQUFxQixFQUNiLGFBQXNDLEVBQzlDLEVBQTJCLEVBQzNCLFlBQWtDO0FBQ25DLFFBSFMsa0JBQWEsR0FBYixhQUFhLENBQXlCO0FBQUMsUUFKMUMsc0JBQWlCLEdBQVksSUFBSSxDQUFDO0FBQzNDLFFBT0ksK0VBQStFO0FBQ25GLFFBQUksSUFBSSxRQUFRLENBQUMsTUFBTSxFQUFFO0FBQ3pCLFlBQU0sSUFBSSxDQUFDLGlCQUFpQixHQUFHLEtBQUssQ0FBQztBQUNyQyxTQUFLO0FBQ0wsUUFBSSxZQUFZLENBQUMsT0FBTyxHQUFHLEVBQUUsQ0FBQyxhQUFhLENBQUM7QUFDNUMsSUFBRSxDQUFDO0FBQ0gsSUFDRSxzQkFBSSxzQ0FBTTtBQUFJLGFBQWQ7QUFBYyxZQUNaLE9BQU8sSUFBSSxDQUFDLGFBQWEsQ0FBQyxJQUFJLENBQUM7QUFDbkMsUUFBRSxDQUFDO0FBRUg7QUFBMEI7QUFDVixPQUhiO0FBQ0gsSUFFRSxtREFBc0IsR0FBdEIsVUFBdUIsS0FBVTtBQUFJLFFBQ25DLElBQUksQ0FBQyxhQUFhLENBQUMsZUFBZSxDQUFDLEtBQUssQ0FBQyxDQUFDO0FBQzlDLElBQUUsQ0FBQztBQUNGO0FBQzZELGdCQXJCaEQsV0FBVztBQUN2QixnQkFBeUIsdUJBQXVCO0FBQ2hELGdCQUFNLFVBQVU7QUFBSSxnQkFDSixvQkFBb0I7QUFDcEM7QUFDSSxJQVlKO0FBQWEsUUFEWixZQUFZLENBQUMsT0FBTyxFQUFFLENBQUMsUUFBUSxDQUFDLENBQUM7QUFDcEMsb0VBRUc7SUF2QlUsa0JBQWtCLHdCQVo5QixTQUFTLENBQUMsY0FDVCwrQ0FBK0MsYUFDL0MsUUFBUSxFQUFFLDBDQUEwQyxjQUNwRCxJQUFJLEVBQUUsa0JBQ0oseUJBQXlCLEVBQUUsbUJBQW1CLGtCQUM5QztnQkFBdUIsRUFBRSxvQkFBb0Isa0JBQzdDLG9CQUFvQixFQUFFLG9CQUFvQixrQkFDMUMsZ0JBQWdCLEVBQUUsUUFBUSxrQkFDMUIsc0JBQXNCLEVBQUUsUUFBUSxrQkFDaEMsc0JBQXNCLEVBQUUsUUFBUTtRQUNqQyxXQUNGLENBQUMsUUFDVyxrQkFBa0IsQ0F3QjlCOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O29CQUNEO0FBQUMsSUFERCx5QkFBQztBQUNBLENBREEsQUF4QkQsSUF3QkM7QUFDRCxTQXpCYSxrQkFBa0I7QUFDOUIiLCJzb3VyY2VzQ29udGVudCI6WyIvKlxuICogQ29weXJpZ2h0IChjKSAyMDE2LTIwMTkgVk13YXJlLCBJbmMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKiBUaGlzIHNvZnR3YXJlIGlzIHJlbGVhc2VkIHVuZGVyIE1JVCBsaWNlbnNlLlxuICogVGhlIGZ1bGwgbGljZW5zZSBpbmZvcm1hdGlvbiBjYW4gYmUgZm91bmQgaW4gTElDRU5TRSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBwcm9qZWN0LlxuICovXG5pbXBvcnQgeyBEaXJlY3RpdmUsIEVsZW1lbnRSZWYsIEhvc3RMaXN0ZW5lciB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG5pbXBvcnQgeyBDbHJQb3BvdmVyVG9nZ2xlU2VydmljZSB9IGZyb20gJy4uLy4uL3V0aWxzL3BvcG92ZXIvcHJvdmlkZXJzL3BvcG92ZXItdG9nZ2xlLnNlcnZpY2UnO1xuXG5pbXBvcnQgeyBDbHJEcm9wZG93biB9IGZyb20gJy4vZHJvcGRvd24nO1xuaW1wb3J0IHsgRHJvcGRvd25Gb2N1c0hhbmRsZXIgfSBmcm9tICcuL3Byb3ZpZGVycy9kcm9wZG93bi1mb2N1cy1oYW5kbGVyLnNlcnZpY2UnO1xuXG5ARGlyZWN0aXZlKHtcbiAgLy8gV2Ugc3VwcG9ydCBib3RoIHNlbGVjdG9ycyBmb3IgbGVnYWN5IHJlYXNvbnNcbiAgc2VsZWN0b3I6ICdbY2xyRHJvcGRvd25UcmlnZ2VyXSxbY2xyRHJvcGRvd25Ub2dnbGVdJyxcbiAgaG9zdDoge1xuICAgICdbY2xhc3MuZHJvcGRvd24tdG9nZ2xlXSc6ICdpc1Jvb3RMZXZlbFRvZ2dsZScsXG4gICAgJ1tjbGFzcy5kcm9wZG93bi1pdGVtXSc6ICchaXNSb290TGV2ZWxUb2dnbGUnLFxuICAgICdbY2xhc3MuZXhwYW5kYWJsZV0nOiAnIWlzUm9vdExldmVsVG9nZ2xlJyxcbiAgICAnW2NsYXNzLmFjdGl2ZV0nOiAnYWN0aXZlJyxcbiAgICAnW2F0dHIuYXJpYS1oYXNwb3B1cF0nOiAnXCJtZW51XCInLFxuICAgICdbYXR0ci5hcmlhLWV4cGFuZGVkXSc6ICdhY3RpdmUnLFxuICB9LFxufSlcbmV4cG9ydCBjbGFzcyBDbHJEcm9wZG93blRyaWdnZXIge1xuICBwdWJsaWMgaXNSb290TGV2ZWxUb2dnbGU6IGJvb2xlYW4gPSB0cnVlO1xuXG4gIGNvbnN0cnVjdG9yKFxuICAgIGRyb3Bkb3duOiBDbHJEcm9wZG93bixcbiAgICBwcml2YXRlIHRvZ2dsZVNlcnZpY2U6IENsclBvcG92ZXJUb2dnbGVTZXJ2aWNlLFxuICAgIGVsOiBFbGVtZW50UmVmPEhUTUxFbGVtZW50PixcbiAgICBmb2N1c0hhbmRsZXI6IERyb3Bkb3duRm9jdXNIYW5kbGVyXG4gICkge1xuICAgIC8vIGlmIHRoZSBjb250YWluaW5nIGRyb3Bkb3duIGhhcyBhIHBhcmVudCwgdGhlbiB0aGlzIGlzIG5vdCB0aGUgcm9vdCBsZXZlbCBvbmVcbiAgICBpZiAoZHJvcGRvd24ucGFyZW50KSB7XG4gICAgICB0aGlzLmlzUm9vdExldmVsVG9nZ2xlID0gZmFsc2U7XG4gICAgfVxuICAgIGZvY3VzSGFuZGxlci50cmlnZ2VyID0gZWwubmF0aXZlRWxlbWVudDtcbiAgfVxuXG4gIGdldCBhY3RpdmUoKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIHRoaXMudG9nZ2xlU2VydmljZS5vcGVuO1xuICB9XG5cbiAgQEhvc3RMaXN0ZW5lcignY2xpY2snLCBbJyRldmVudCddKVxuICBvbkRyb3Bkb3duVHJpZ2dlckNsaWNrKGV2ZW50OiBhbnkpOiB2b2lkIHtcbiAgICB0aGlzLnRvZ2dsZVNlcnZpY2UudG9nZ2xlV2l0aEV2ZW50KGV2ZW50KTtcbiAgfVxufVxuIl19