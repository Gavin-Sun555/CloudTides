import { __decorate, __param } from "tslib";
/*
 * Copyright (c) 2016-2020 VMware, Inc. All Rights Reserved.
 * This software is released under MIT license.
 * The full license information can be found in LICENSE in the root directory of this project.
 */
import { ChangeDetectorRef, Component, ElementRef, Input, OnDestroy, Optional, SkipSelf } from '@angular/core';
import { POPOVER_HOST_ANCHOR } from '../common/popover-host-anchor.token';
import { DROPDOWN_FOCUS_HANDLER_PROVIDER } from './providers/dropdown-focus-handler.service';
import { FOCUS_SERVICE_PROVIDER } from '../../utils/focus/focus.service';
import { ROOT_DROPDOWN_PROVIDER, RootDropdownService } from './providers/dropdown.service';
import { ClrPopoverToggleService } from '../../utils/popover/providers/popover-toggle.service';
import * as ɵngcc0 from '@angular/core';

var _c0 = ["*"];
var ClrDropdown = /** @class */ (function () {
    function ClrDropdown(parent, toggleService, cdr, dropdownService) {
        var _this = this;
        this.parent = parent;
        this.toggleService = toggleService;
        this.cdr = cdr;
        this.subscriptions = [];
        this.isMenuClosable = true;
        this.subscriptions.push(dropdownService.changes.subscribe(function (value) { return (_this.toggleService.open = value); }));
        this.subscriptions.push(toggleService.openChange.subscribe(function (value) { return _this.cdr.markForCheck(); }));
    }
    ClrDropdown.prototype.ngOnDestroy = function () {
        this.subscriptions.forEach(function (sub) { return sub.unsubscribe(); });
    };
    ClrDropdown.ctorParameters = function () { return [
        { type: ClrDropdown, decorators: [{ type: SkipSelf }, { type: Optional }] },
        { type: ClrPopoverToggleService },
        { type: ChangeDetectorRef },
        { type: RootDropdownService }
    ]; };
    __decorate([
        Input('clrCloseMenuOnItemClick')
    ], ClrDropdown.prototype, "isMenuClosable", void 0);
    ClrDropdown = __decorate([ __param(0, SkipSelf()),
        __param(0, Optional())
    ], ClrDropdown);
ClrDropdown.ɵfac = function ClrDropdown_Factory(t) { return new (t || ClrDropdown)(ɵngcc0.ɵɵdirectiveInject(ClrDropdown, 12), ɵngcc0.ɵɵdirectiveInject(ClrPopoverToggleService), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(RootDropdownService)); };
ClrDropdown.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: ClrDropdown, selectors: [["clr-dropdown"]], hostVars: 4, hostBindings: function ClrDropdown_HostBindings(rf, ctx) { if (rf & 2) {
        ɵngcc0.ɵɵclassProp("dropdown", true)("open", ctx.toggleService.open);
    } }, inputs: { isMenuClosable: ["clrCloseMenuOnItemClick", "isMenuClosable"] }, features: [ɵngcc0.ɵɵProvidersFeature([
            ROOT_DROPDOWN_PROVIDER,
            { provide: POPOVER_HOST_ANCHOR, useExisting: ElementRef },
            FOCUS_SERVICE_PROVIDER,
            ClrPopoverToggleService,
            DROPDOWN_FOCUS_HANDLER_PROVIDER,
        ])], ngContentSelectors: _c0, decls: 1, vars: 0, template: function ClrDropdown_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵprojection(0);
    } }, encapsulation: 2 });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ClrDropdown, [{
        type: Component,
        args: [{
                selector: 'clr-dropdown',
                template: '<ng-content></ng-content>',
                host: {
                    '[class.dropdown]': 'true',
                    '[class.open]': 'toggleService.open'
                },
                providers: [
                    ROOT_DROPDOWN_PROVIDER,
                    { provide: POPOVER_HOST_ANCHOR, useExisting: ElementRef },
                    FOCUS_SERVICE_PROVIDER,
                    ClrPopoverToggleService,
                    DROPDOWN_FOCUS_HANDLER_PROVIDER,
                ]
            }]
    }], function () { return [{ type: ClrDropdown, decorators: [{
                type: SkipSelf
            }, {
                type: Optional
            }] }, { type: ClrPopoverToggleService }, { type: ɵngcc0.ChangeDetectorRef }, { type: RootDropdownService }]; }, { isMenuClosable: [{
            type: Input,
            args: ['clrCloseMenuOnItemClick']
        }] }); })();
    return ClrDropdown;
}());
export { ClrDropdown };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZHJvcGRvd24uanMiLCJzb3VyY2VzIjpbIm5nOi9AY2xyL2FuZ3VsYXIvcG9wb3Zlci9kcm9wZG93bi9kcm9wZG93bi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0gsT0FBTyxFQUFFLGlCQUFpQixFQUFFLFNBQVMsRUFBRSxVQUFVLEVBQUUsS0FBSyxFQUFFLFNBQVMsRUFBRSxRQUFRLEVBQUUsUUFBUSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBRy9HLE9BQU8sRUFBRSxtQkFBbUIsRUFBRSxNQUFNLHFDQUFxQyxDQUFDO0FBQzFFLE9BQU8sRUFBRSwrQkFBK0IsRUFBRSxNQUFNLDRDQUE0QyxDQUFDO0FBQzdGLE9BQU8sRUFBRSxzQkFBc0IsRUFBRSxNQUFNLGlDQUFpQyxDQUFDO0FBRXpFLE9BQU8sRUFBRSxzQkFBc0IsRUFBRSxtQkFBbUIsRUFBRSxNQUFNLDhCQUE4QixDQUFDO0FBQzNGLE9BQU8sRUFBRSx1QkFBdUIsRUFBRSxNQUFNLHNEQUFzRCxDQUFDOzs7O0FBaUIvRjtBQUErQyxJQUc3QyxxQkFHUyxNQUFtQixFQUNuQixhQUFzQyxFQUNyQyxHQUFzQixFQUM5QixlQUFvQztBQUNyQyxRQVBELGlCQVVDO0FBQ0gsUUFSVyxXQUFNLEdBQU4sTUFBTSxDQUFhO0FBQUMsUUFDcEIsa0JBQWEsR0FBYixhQUFhLENBQXlCO0FBQUMsUUFDdEMsUUFBRyxHQUFILEdBQUcsQ0FBbUI7QUFBQyxRQVB6QixrQkFBYSxHQUFtQixFQUFFLENBQUM7QUFDN0MsUUFhb0MsbUJBQWMsR0FBWSxJQUFJLENBQUM7QUFDbkUsUUFMSSxJQUFJLENBQUMsYUFBYSxDQUFDLElBQUksQ0FBQyxlQUFlLENBQUMsT0FBTyxDQUFDLFNBQVMsQ0FBQyxVQUFBLEtBQUssSUFBSSxPQUFBLENBQUMsS0FBSSxDQUFDLGFBQWEsQ0FBQyxJQUFJLEdBQUcsS0FBSyxDQUFDLEVBQWpDLENBQWlDLENBQUMsQ0FBQyxDQUFDO0FBQzNHLFFBQUksSUFBSSxDQUFDLGFBQWEsQ0FBQyxJQUFJLENBQUMsYUFBYSxDQUFDLFVBQVUsQ0FBQyxTQUFTLENBQUMsVUFBQSxLQUFLLElBQUksT0FBQSxLQUFJLENBQUMsR0FBRyxDQUFDLFlBQVksRUFBRSxFQUF2QixDQUF1QixDQUFDLENBQUMsQ0FBQztBQUNsRyxJQUFFLENBQUM7QUFDSCxJQUdFLGlDQUFXLEdBQVg7QUFBYyxRQUNaLElBQUksQ0FBQyxhQUFhLENBQUMsT0FBTyxDQUFDLFVBQUEsR0FBRyxJQUFJLE9BQUEsR0FBRyxDQUFDLFdBQVcsRUFBRSxFQUFqQixDQUFpQixDQUFDLENBQUM7QUFDekQsSUFBRSxDQUFDO0FBQ0Y7QUFDc0QsZ0JBZnBDLFdBQVcsdUJBRnpCLFFBQVEsWUFDUixRQUFRO0FBQ1QsZ0JBQ3NCLHVCQUF1QjtBQUMvQyxnQkFBZSxpQkFBaUI7QUFDaEMsZ0JBQW1CLG1CQUFtQjtBQUN0QztBQUNJLElBSThCO0FBQWEsUUFBOUMsS0FBSyxDQUFDLHlCQUF5QixDQUFDO0FBQUMsdURBQStCO0FBRW5FLElBakJhLFdBQVcsd0JBZnZCLFNBQVMsQ0FBQyxuQkFlSCxDQUlILFdBQUEsUUFBUSxFQUFFLENBQUE7UUFsQmIsUUFBUSxFQUFFLGxCQW1CWCxRQUFJLFdBQUEsUUFBUSxFQUFFLENBQUE7Q0FuQlcsY0FDeEIsZkFtQkYsT0FOYSxXQUFXLENBb0J2QjtFQWpDUyxFQUFFLDJCQUEyQixjQUNyQyxJQUFJLEVBQUUsa0JBQ0osa0JBQWtCLEVBQUUsTUFBTSxrQkFDMUIsY0FBYyxFQUFFLG9CQUFvQixlQUNyQyxjQUNELFNBQVMsRUFBRSxrQkFDVCxzQkFBc0Isa0JBQ3RCLEVBQUUsT0FBTyxFQUFFLG1CQUFtQixFQUFFO1VBQVcsRUFBRSxVQUFVLEVBQUUsa0JBQ3pELHNCQUFzQixrQkFDdEIsdUJBQXVCLGtCQUN2QiwrQkFBK0IsZUFDaEMsVUFDRixDQUFDOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7b0JBc0JGO0FBQUMsSUFERCxrQkFBQztBQUNBLENBREEsQUFwQkQsSUFvQkM7QUFDRCxTQXJCYSxXQUFXO0FBQUkiLCJzb3VyY2VzQ29udGVudCI6WyIvKlxuICogQ29weXJpZ2h0IChjKSAyMDE2LTIwMjAgVk13YXJlLCBJbmMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKiBUaGlzIHNvZnR3YXJlIGlzIHJlbGVhc2VkIHVuZGVyIE1JVCBsaWNlbnNlLlxuICogVGhlIGZ1bGwgbGljZW5zZSBpbmZvcm1hdGlvbiBjYW4gYmUgZm91bmQgaW4gTElDRU5TRSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBwcm9qZWN0LlxuICovXG5pbXBvcnQgeyBDaGFuZ2VEZXRlY3RvclJlZiwgQ29tcG9uZW50LCBFbGVtZW50UmVmLCBJbnB1dCwgT25EZXN0cm95LCBPcHRpb25hbCwgU2tpcFNlbGYgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IFN1YnNjcmlwdGlvbiB9IGZyb20gJ3J4anMnO1xuXG5pbXBvcnQgeyBQT1BPVkVSX0hPU1RfQU5DSE9SIH0gZnJvbSAnLi4vY29tbW9uL3BvcG92ZXItaG9zdC1hbmNob3IudG9rZW4nO1xuaW1wb3J0IHsgRFJPUERPV05fRk9DVVNfSEFORExFUl9QUk9WSURFUiB9IGZyb20gJy4vcHJvdmlkZXJzL2Ryb3Bkb3duLWZvY3VzLWhhbmRsZXIuc2VydmljZSc7XG5pbXBvcnQgeyBGT0NVU19TRVJWSUNFX1BST1ZJREVSIH0gZnJvbSAnLi4vLi4vdXRpbHMvZm9jdXMvZm9jdXMuc2VydmljZSc7XG5cbmltcG9ydCB7IFJPT1RfRFJPUERPV05fUFJPVklERVIsIFJvb3REcm9wZG93blNlcnZpY2UgfSBmcm9tICcuL3Byb3ZpZGVycy9kcm9wZG93bi5zZXJ2aWNlJztcbmltcG9ydCB7IENsclBvcG92ZXJUb2dnbGVTZXJ2aWNlIH0gZnJvbSAnLi4vLi4vdXRpbHMvcG9wb3Zlci9wcm92aWRlcnMvcG9wb3Zlci10b2dnbGUuc2VydmljZSc7XG5cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ2Nsci1kcm9wZG93bicsXG4gIHRlbXBsYXRlOiAnPG5nLWNvbnRlbnQ+PC9uZy1jb250ZW50PicsXG4gIGhvc3Q6IHtcbiAgICAnW2NsYXNzLmRyb3Bkb3duXSc6ICd0cnVlJyxcbiAgICAnW2NsYXNzLm9wZW5dJzogJ3RvZ2dsZVNlcnZpY2Uub3BlbicsXG4gIH0sXG4gIHByb3ZpZGVyczogW1xuICAgIFJPT1RfRFJPUERPV05fUFJPVklERVIsXG4gICAgeyBwcm92aWRlOiBQT1BPVkVSX0hPU1RfQU5DSE9SLCB1c2VFeGlzdGluZzogRWxlbWVudFJlZiB9LFxuICAgIEZPQ1VTX1NFUlZJQ0VfUFJPVklERVIsXG4gICAgQ2xyUG9wb3ZlclRvZ2dsZVNlcnZpY2UsXG4gICAgRFJPUERPV05fRk9DVVNfSEFORExFUl9QUk9WSURFUixcbiAgXSxcbn0pXG5leHBvcnQgY2xhc3MgQ2xyRHJvcGRvd24gaW1wbGVtZW50cyBPbkRlc3Ryb3kge1xuICBwcml2YXRlIHN1YnNjcmlwdGlvbnM6IFN1YnNjcmlwdGlvbltdID0gW107XG5cbiAgY29uc3RydWN0b3IoXG4gICAgQFNraXBTZWxmKClcbiAgICBAT3B0aW9uYWwoKVxuICAgIHB1YmxpYyBwYXJlbnQ6IENsckRyb3Bkb3duLFxuICAgIHB1YmxpYyB0b2dnbGVTZXJ2aWNlOiBDbHJQb3BvdmVyVG9nZ2xlU2VydmljZSxcbiAgICBwcml2YXRlIGNkcjogQ2hhbmdlRGV0ZWN0b3JSZWYsXG4gICAgZHJvcGRvd25TZXJ2aWNlOiBSb290RHJvcGRvd25TZXJ2aWNlXG4gICkge1xuICAgIHRoaXMuc3Vic2NyaXB0aW9ucy5wdXNoKGRyb3Bkb3duU2VydmljZS5jaGFuZ2VzLnN1YnNjcmliZSh2YWx1ZSA9PiAodGhpcy50b2dnbGVTZXJ2aWNlLm9wZW4gPSB2YWx1ZSkpKTtcbiAgICB0aGlzLnN1YnNjcmlwdGlvbnMucHVzaCh0b2dnbGVTZXJ2aWNlLm9wZW5DaGFuZ2Uuc3Vic2NyaWJlKHZhbHVlID0+IHRoaXMuY2RyLm1hcmtGb3JDaGVjaygpKSk7XG4gIH1cblxuICBASW5wdXQoJ2NsckNsb3NlTWVudU9uSXRlbUNsaWNrJykgaXNNZW51Q2xvc2FibGU6IGJvb2xlYW4gPSB0cnVlO1xuXG4gIG5nT25EZXN0cm95KCkge1xuICAgIHRoaXMuc3Vic2NyaXB0aW9ucy5mb3JFYWNoKHN1YiA9PiBzdWIudW5zdWJzY3JpYmUoKSk7XG4gIH1cbn1cbiJdfQ==