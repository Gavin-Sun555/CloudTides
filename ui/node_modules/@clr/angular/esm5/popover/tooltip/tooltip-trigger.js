/*
 * Copyright (c) 2016-2019 VMware, Inc. All Rights Reserved.
 * This software is released under MIT license.
 * The full license information can be found in LICENSE in the root directory of this project.
 */
import { __decorate } from "tslib";
import { Directive, HostListener } from '@angular/core';
import { ClrPopoverToggleService } from '../../utils/popover/providers/popover-toggle.service';
import { TooltipIdService } from './providers/tooltip-id.service';
import * as ɵngcc0 from '@angular/core';
var ClrTooltipTrigger = /** @class */ (function () {
    function ClrTooltipTrigger(toggleService, tooltipIdService) {
        var _this = this;
        this.toggleService = toggleService;
        this.tooltipIdService = tooltipIdService;
        this.subs = [];
        // The aria-described by comes from the id of content. It
        this.subs.push(this.tooltipIdService.id.subscribe(function (tooltipId) { return (_this.ariaDescribedBy = tooltipId); }));
    }
    ClrTooltipTrigger.prototype.showTooltip = function () {
        this.toggleService.open = true;
    };
    ClrTooltipTrigger.prototype.hideTooltip = function () {
        this.toggleService.open = false;
    };
    ClrTooltipTrigger.prototype.ngOnDestroy = function () {
        this.subs.forEach(function (sub) { return sub.unsubscribe(); });
    };
    ClrTooltipTrigger.ctorParameters = function () { return [
        { type: ClrPopoverToggleService },
        { type: TooltipIdService }
    ]; };
    __decorate([
        HostListener('mouseenter'),
        HostListener('focus')
    ], ClrTooltipTrigger.prototype, "showTooltip", null);
    __decorate([
        HostListener('mouseleave'),
        HostListener('blur')
    ], ClrTooltipTrigger.prototype, "hideTooltip", null);
ClrTooltipTrigger.ɵfac = function ClrTooltipTrigger_Factory(t) { return new (t || ClrTooltipTrigger)(ɵngcc0.ɵɵdirectiveInject(ClrPopoverToggleService), ɵngcc0.ɵɵdirectiveInject(TooltipIdService)); };
ClrTooltipTrigger.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: ClrTooltipTrigger, selectors: [["", "clrTooltipTrigger", ""]], hostAttrs: ["tabindex", "0"], hostVars: 4, hostBindings: function ClrTooltipTrigger_HostBindings(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵlistener("mouseenter", function ClrTooltipTrigger_mouseenter_HostBindingHandler() { return ctx.showTooltip(); })("focus", function ClrTooltipTrigger_focus_HostBindingHandler() { return ctx.showTooltip(); })("mouseleave", function ClrTooltipTrigger_mouseleave_HostBindingHandler() { return ctx.hideTooltip(); })("blur", function ClrTooltipTrigger_blur_HostBindingHandler() { return ctx.hideTooltip(); });
    } if (rf & 2) {
        ɵngcc0.ɵɵattribute("aria-describedby", ctx.ariaDescribedBy)("role", "button");
        ɵngcc0.ɵɵclassProp("tooltip-trigger", true);
    } } });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ClrTooltipTrigger, [{
        type: Directive,
        args: [{
                selector: '[clrTooltipTrigger]',
                host: {
                    tabindex: '0',
                    '[class.tooltip-trigger]': 'true',
                    '[attr.aria-describedby]': 'ariaDescribedBy',
                    '[attr.role]': '"button"'
                }
            }]
    }], function () { return [{ type: ClrPopoverToggleService }, { type: TooltipIdService }]; }, { showTooltip: [{
            type: HostListener,
            args: ['mouseenter']
        }, {
            type: HostListener,
            args: ['focus']
        }], hideTooltip: [{
            type: HostListener,
            args: ['mouseleave']
        }, {
            type: HostListener,
            args: ['blur']
        }] }); })();
    return ClrTooltipTrigger;
}());
export { ClrTooltipTrigger };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidG9vbHRpcC10cmlnZ2VyLmpzIiwic291cmNlcyI6WyJuZzovQGNsci9hbmd1bGFyL3BvcG92ZXIvdG9vbHRpcC90b29sdGlwLXRyaWdnZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQSxPQUFPLEVBQUUsU0FBUyxFQUFFLFlBQVksRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUN4RCxPQUFPLEVBQUUsdUJBQXVCLEVBQUUsTUFBTSxzREFBc0QsQ0FBQztBQUMvRixPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSxnQ0FBZ0MsQ0FBQzs7QUFZbEU7QUFDb0IsSUFFbEIsMkJBQW9CLGFBQXNDLEVBQVUsZ0JBQWtDO0FBQ3hHLFFBREUsaUJBR0M7QUFDSCxRQUpzQixrQkFBYSxHQUFiLGFBQWEsQ0FBeUI7QUFBQyxRQUFTLHFCQUFnQixHQUFoQixnQkFBZ0IsQ0FBa0I7QUFBQyxRQUQvRixTQUFJLEdBQW1CLEVBQUUsQ0FBQztBQUNwQyxRQUNJLHlEQUF5RDtBQUM3RCxRQUFJLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxFQUFFLENBQUMsU0FBUyxDQUFDLFVBQUEsU0FBUyxJQUFJLE9BQUEsQ0FBQyxLQUFJLENBQUMsZUFBZSxHQUFHLFNBQVMsQ0FBQyxFQUFsQyxDQUFrQyxDQUFDLENBQUMsQ0FBQztBQUN4RyxJQUFFLENBQUM7QUFDSCxJQUdFLHVDQUFXLEdBQVg7QUFBYyxRQUNaLElBQUksQ0FBQyxhQUFhLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQztBQUNuQyxJQUFFLENBQUM7QUFFSCxJQUVFLHVDQUFXLEdBQVg7QUFBYyxRQUNaLElBQUksQ0FBQyxhQUFhLENBQUMsSUFBSSxHQUFHLEtBQUssQ0FBQztBQUNwQyxJQUFFLENBQUM7QUFFSCxJQUFFLHVDQUFXLEdBQVg7QUFBYyxRQUNaLElBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLFVBQUEsR0FBRyxJQUFJLE9BQUEsR0FBRyxDQUFDLFdBQVcsRUFBRSxFQUFqQixDQUFpQixDQUFDLENBQUM7QUFDaEQsSUFBRSxDQUFDO0FBQ0Y7QUFDNEQsZ0JBckJ4Qix1QkFBdUI7QUFBSSxnQkFBd0IsZ0JBQWdCO0FBQUc7QUFDbEcsSUFNUDtBQUFhLFFBRlosWUFBWSxDQUFDLFlBQVksQ0FBQztBQUM1QixRQUFFLFlBQVksQ0FBQyxPQUFPLENBQUM7QUFDeEIsd0RBRUc7QUFFSCxJQUVFO0FBQWEsUUFGWixZQUFZLENBQUMsWUFBWSxDQUFDO0FBQzVCLFFBQUUsWUFBWSxDQUFDLE1BQU0sQ0FBQztBQUN2Qix3REFFRztJQWxCVSxpQkFBaUIsd0JBVDdCLFNBQVMsQ0FBQyxjQUNULFFBQVEsRUFBRSxxQkFBcUIsY0FDL0IsSUFBSSxFQUFFLGtCQUNKLFFBQVEsRUFBRSxHQUFHLGtCQUNiLHlCQUF5QixFQUFFO0VBQU0sa0JBQ2pDLHlCQUF5QixFQUFFLGlCQUFpQixrQkFDNUMsYUFBYSxFQUFFLFVBQVUsZUFDMUIsV0FDRixDQUFDLFFBQ1csaUJBQWlCLENBdUI3Qjs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7b0JBQ0Q7QUFBQyxJQURELHdCQUFDO0FBQ0EsQ0FEQSxBQXZCRCxJQXVCQztBQUNELFNBeEJhLGlCQUFpQjtBQUM3QiIsInNvdXJjZXNDb250ZW50IjpbIi8qXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTYtMjAxOSBWTXdhcmUsIEluYy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqIFRoaXMgc29mdHdhcmUgaXMgcmVsZWFzZWQgdW5kZXIgTUlUIGxpY2Vuc2UuXG4gKiBUaGUgZnVsbCBsaWNlbnNlIGluZm9ybWF0aW9uIGNhbiBiZSBmb3VuZCBpbiBMSUNFTlNFIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHByb2plY3QuXG4gKi9cblxuaW1wb3J0IHsgRGlyZWN0aXZlLCBIb3N0TGlzdGVuZXIgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IENsclBvcG92ZXJUb2dnbGVTZXJ2aWNlIH0gZnJvbSAnLi4vLi4vdXRpbHMvcG9wb3Zlci9wcm92aWRlcnMvcG9wb3Zlci10b2dnbGUuc2VydmljZSc7XG5pbXBvcnQgeyBUb29sdGlwSWRTZXJ2aWNlIH0gZnJvbSAnLi9wcm92aWRlcnMvdG9vbHRpcC1pZC5zZXJ2aWNlJztcbmltcG9ydCB7IFN1YnNjcmlwdGlvbiB9IGZyb20gJ3J4anMnO1xuXG5ARGlyZWN0aXZlKHtcbiAgc2VsZWN0b3I6ICdbY2xyVG9vbHRpcFRyaWdnZXJdJyxcbiAgaG9zdDoge1xuICAgIHRhYmluZGV4OiAnMCcsXG4gICAgJ1tjbGFzcy50b29sdGlwLXRyaWdnZXJdJzogJ3RydWUnLFxuICAgICdbYXR0ci5hcmlhLWRlc2NyaWJlZGJ5XSc6ICdhcmlhRGVzY3JpYmVkQnknLFxuICAgICdbYXR0ci5yb2xlXSc6ICdcImJ1dHRvblwiJyxcbiAgfSxcbn0pXG5leHBvcnQgY2xhc3MgQ2xyVG9vbHRpcFRyaWdnZXIge1xuICBwdWJsaWMgYXJpYURlc2NyaWJlZEJ5O1xuICBwcml2YXRlIHN1YnM6IFN1YnNjcmlwdGlvbltdID0gW107XG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgdG9nZ2xlU2VydmljZTogQ2xyUG9wb3ZlclRvZ2dsZVNlcnZpY2UsIHByaXZhdGUgdG9vbHRpcElkU2VydmljZTogVG9vbHRpcElkU2VydmljZSkge1xuICAgIC8vIFRoZSBhcmlhLWRlc2NyaWJlZCBieSBjb21lcyBmcm9tIHRoZSBpZCBvZiBjb250ZW50LiBJdFxuICAgIHRoaXMuc3Vicy5wdXNoKHRoaXMudG9vbHRpcElkU2VydmljZS5pZC5zdWJzY3JpYmUodG9vbHRpcElkID0+ICh0aGlzLmFyaWFEZXNjcmliZWRCeSA9IHRvb2x0aXBJZCkpKTtcbiAgfVxuXG4gIEBIb3N0TGlzdGVuZXIoJ21vdXNlZW50ZXInKVxuICBASG9zdExpc3RlbmVyKCdmb2N1cycpXG4gIHNob3dUb29sdGlwKCk6IHZvaWQge1xuICAgIHRoaXMudG9nZ2xlU2VydmljZS5vcGVuID0gdHJ1ZTtcbiAgfVxuXG4gIEBIb3N0TGlzdGVuZXIoJ21vdXNlbGVhdmUnKVxuICBASG9zdExpc3RlbmVyKCdibHVyJylcbiAgaGlkZVRvb2x0aXAoKTogdm9pZCB7XG4gICAgdGhpcy50b2dnbGVTZXJ2aWNlLm9wZW4gPSBmYWxzZTtcbiAgfVxuXG4gIG5nT25EZXN0cm95KCkge1xuICAgIHRoaXMuc3Vicy5mb3JFYWNoKHN1YiA9PiBzdWIudW5zdWJzY3JpYmUoKSk7XG4gIH1cbn1cbiJdfQ==