/*
 * Copyright (c) 2016-2020 VMware, Inc. All Rights Reserved.
 * This software is released under MIT license.
 * The full license information can be found in LICENSE in the root directory of this project.
 */
import { __decorate, __param } from "tslib";
import { Component, EventEmitter, Input, Optional, Output, SkipSelf, ViewChild } from '@angular/core';
import { ClrLoadingState } from '../../utils/loading/loading';
import { LoadingListener } from '../../utils/loading/loading-listener';
import { ButtonInGroupService } from '../providers/button-in-group.service';
import { ClrPopoverToggleService } from '../../utils/popover/providers/popover-toggle.service';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@angular/common';

var _c0 = ["buttonProjectedRef"];
function ClrButton_ng_template_0_span_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelement(0, "span", 3);
} }
function ClrButton_ng_template_0_Template(rf, ctx) { if (rf & 1) {
    var _r4 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "button", 1);
    ɵngcc0.ɵɵlistener("click", function ClrButton_ng_template_0_Template_button_click_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r4); var ctx_r3 = ɵngcc0.ɵɵnextContext(); return ctx_r3.emitClick($event); });
    ɵngcc0.ɵɵtemplate(1, ClrButton_ng_template_0_span_1_Template, 1, 0, "span", 2);
    ɵngcc0.ɵɵprojection(2);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    var ctx_r1 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵclassMap(ctx_r1.classNames);
    ɵngcc0.ɵɵattribute("type", ctx_r1.type)("name", ctx_r1.name)("disabled", ctx_r1.disabled)("id", ctx_r1.id);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r1.loading);
} }
var _c1 = ["*"];
var ClrButton = /** @class */ (function () {
    function ClrButton(buttonInGroupService, toggleService) {
        this.buttonInGroupService = buttonInGroupService;
        this.toggleService = toggleService;
        this._enableService = false;
        this._inMenu = false;
        this._classNames = 'btn';
        this._name = null;
        this._type = null;
        this._id = null;
        this._disabled = null;
        this._click = new EventEmitter(false);
    }
    ClrButton_1 = ClrButton;
    Object.defineProperty(ClrButton.prototype, "inMenu", {
        get: function () {
            return this._inMenu;
        },
        set: function (value) {
            value = !!value;
            if (this._inMenu !== value) {
                this._inMenu = value;
                // We check if the service flag is enabled
                // and if the service exists because the service is optional
                if (this._enableService && this.buttonInGroupService) {
                    this.buttonInGroupService.updateButtonGroup(this);
                }
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ClrButton.prototype, "classNames", {
        get: function () {
            return this._classNames;
        },
        set: function (value) {
            if (typeof value === 'string') {
                var classNames = value.split(' ');
                if (classNames.indexOf('btn') === -1) {
                    classNames.push('btn');
                }
                this._classNames = classNames.join(' ');
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ClrButton.prototype, "name", {
        get: function () {
            return this._name;
        },
        set: function (value) {
            if (typeof value === 'string') {
                this._name = value;
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ClrButton.prototype, "type", {
        get: function () {
            return this._type;
        },
        set: function (value) {
            if (typeof value === 'string') {
                this._type = value;
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ClrButton.prototype, "id", {
        get: function () {
            return this._id;
        },
        set: function (value) {
            if (typeof value === 'string') {
                this._id = value;
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ClrButton.prototype, "disabled", {
        get: function () {
            return this._disabled;
        },
        set: function (value) {
            if (value !== null && value !== false) {
                this._disabled = '';
            }
            else {
                this._disabled = null;
            }
        },
        enumerable: true,
        configurable: true
    });
    ClrButton.prototype.loadingStateChange = function (state) {
        this.loading = state === ClrLoadingState.LOADING;
    };
    ClrButton.prototype.emitClick = function ($event) {
        if (this.inMenu) {
            this.toggleService.toggleWithEvent($event);
        }
        this._click.emit(true);
    };
    ClrButton.prototype.ngAfterViewInit = function () {
        this._enableService = true;
    };
    var ClrButton_1;
    ClrButton.ctorParameters = function () { return [
        { type: ButtonInGroupService, decorators: [{ type: SkipSelf }, { type: Optional }] },
        { type: ClrPopoverToggleService }
    ]; };
    __decorate([
        ViewChild('buttonProjectedRef', { static: true })
    ], ClrButton.prototype, "templateRef", void 0);
    __decorate([
        Input('clrInMenu')
    ], ClrButton.prototype, "inMenu", null);
    __decorate([
        Input('class')
    ], ClrButton.prototype, "classNames", null);
    __decorate([
        Input('name')
    ], ClrButton.prototype, "name", null);
    __decorate([
        Input('type')
    ], ClrButton.prototype, "type", null);
    __decorate([
        Input('id')
    ], ClrButton.prototype, "id", null);
    __decorate([
        Input('disabled')
    ], ClrButton.prototype, "disabled", null);
    __decorate([
        Output('click')
    ], ClrButton.prototype, "_click", void 0);
    ClrButton = ClrButton_1 = __decorate([ __param(0, SkipSelf()),
        __param(0, Optional())
    ], ClrButton);
ClrButton.ɵfac = function ClrButton_Factory(t) { return new (t || ClrButton)(ɵngcc0.ɵɵdirectiveInject(ButtonInGroupService, 12), ɵngcc0.ɵɵdirectiveInject(ClrPopoverToggleService)); };
ClrButton.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: ClrButton, selectors: [["clr-button"]], viewQuery: function ClrButton_Query(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵstaticViewQuery(_c0, true);
    } if (rf & 2) {
        var _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.templateRef = _t.first);
    } }, inputs: { inMenu: ["clrInMenu", "inMenu"], classNames: ["class", "classNames"], name: "name", type: "type", id: "id", disabled: "disabled" }, outputs: { _click: "click" }, features: [ɵngcc0.ɵɵProvidersFeature([{ provide: LoadingListener, useExisting: ClrButton_1 }])], ngContentSelectors: _c1, decls: 2, vars: 0, consts: [["buttonProjectedRef", ""], [3, "click"], ["class", "spinner spinner-inline", 4, "ngIf"], [1, "spinner", "spinner-inline"]], template: function ClrButton_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵtemplate(0, ClrButton_ng_template_0_Template, 3, 7, "ng-template", null, 0, ɵngcc0.ɵɵtemplateRefExtractor);
    } }, directives: [ɵngcc1.NgIf], encapsulation: 2 });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ClrButton, [{
        type: Component,
        args: [{
                selector: 'clr-button',
                template: "\n        <ng-template #buttonProjectedRef>\n            <button\n                [class]=\"classNames\"\n                (click)=\"emitClick($event)\"\n                [attr.type]=\"type\"\n                [attr.name]=\"name\"\n                [attr.disabled]=\"disabled\"\n                [attr.id]=\"id\">\n                <span class=\"spinner spinner-inline\" *ngIf=\"loading\"></span>\n                <ng-content></ng-content>\n            </button>\n        </ng-template>\n    ",
                providers: [{ provide: LoadingListener, useExisting: ClrButton_1 }]
            }]
    }], function () { return [{ type: ButtonInGroupService, decorators: [{
                type: SkipSelf
            }, {
                type: Optional
            }] }, { type: ClrPopoverToggleService }]; }, { _click: [{
            type: Output,
            args: ['click']
        }], inMenu: [{
            type: Input,
            args: ['clrInMenu']
        }], classNames: [{
            type: Input,
            args: ['class']
        }], name: [{
            type: Input,
            args: ['name']
        }], type: [{
            type: Input,
            args: ['type']
        }], id: [{
            type: Input,
            args: ['id']
        }], disabled: [{
            type: Input,
            args: ['disabled']
        }], templateRef: [{
            type: ViewChild,
            args: ['buttonProjectedRef', { static: true }]
        }] }); })();
    return ClrButton;
}());
export { ClrButton };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,