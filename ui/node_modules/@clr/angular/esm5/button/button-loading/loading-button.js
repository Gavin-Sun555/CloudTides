/*
 * Copyright (c) 2016-2018 VMware, Inc. All Rights Reserved.
 * This software is released under MIT license.
 * The full license information can be found in LICENSE in the root directory of this project.
 */
import { __decorate } from "tslib";
import { animate, keyframes, style, transition, trigger } from '@angular/animations';
import { Component, ElementRef, EventEmitter, Input, Output, Renderer2 } from '@angular/core';
import { ClrLoadingState } from '../../utils/loading/loading';
import { LoadingListener } from '../../utils/loading/loading-listener';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@angular/common';

var _c0 = ["clrLoading", ""];
function ClrLoadingButton_span_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "span");
    ɵngcc0.ɵɵelement(1, "span", 2);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("@spinner", undefined);
} }
function ClrLoadingButton_span_2_Template(rf, ctx) { if (rf & 1) {
    var _r4 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "span");
    ɵngcc0.ɵɵelementStart(1, "span", 3);
    ɵngcc0.ɵɵlistener("@validated.done", function ClrLoadingButton_span_2_Template_span_animation_validated_done_1_listener() { ɵngcc0.ɵɵrestoreView(_r4); var ctx_r3 = ɵngcc0.ɵɵnextContext(); return ctx_r3.loadingStateChange(ctx_r3.buttonState.DEFAULT); });
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("@validated", undefined);
} }
function ClrLoadingButton_span_3_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "span");
    ɵngcc0.ɵɵprojection(1);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    ɵngcc0.ɵɵproperty("@defaultButton", undefined);
} }
var _c1 = ["*"];
var ClrLoadingButton = /** @class */ (function () {
    function ClrLoadingButton(el, renderer) {
        this.el = el;
        this.renderer = renderer;
        this.buttonState = ClrLoadingState;
        this.state = ClrLoadingState.DEFAULT;
        this.clrLoadingChange = new EventEmitter(false);
    }
    ClrLoadingButton_1 = ClrLoadingButton;
    ClrLoadingButton.prototype.loadingStateChange = function (state) {
        if (state === this.state) {
            return;
        }
        this.state = state;
        switch (state) {
            case ClrLoadingState.DEFAULT:
                this.renderer.removeStyle(this.el.nativeElement, 'width');
                this.renderer.removeStyle(this.el.nativeElement, 'transform'); // for chromium render bug see issue https://github.com/vmware/clarity/issues/2700
                if (!this.disabled) {
                    this.renderer.removeAttribute(this.el.nativeElement, 'disabled');
                }
                break;
            case ClrLoadingState.LOADING:
                this.setExplicitButtonWidth();
                this.renderer.setStyle(this.el.nativeElement, 'transform', 'translatez(0)'); // for chromium render bug see issue https://github.com/vmware/clarity/issues/2700
                this.renderer.setAttribute(this.el.nativeElement, 'disabled', '');
                break;
            case ClrLoadingState.SUCCESS:
                this.setExplicitButtonWidth();
                break;
            case ClrLoadingState.ERROR:
                this.loadingStateChange(ClrLoadingState.DEFAULT);
                break;
            default:
                break;
        }
        this.clrLoadingChange.emit(state);
    };
    ClrLoadingButton.prototype.setExplicitButtonWidth = function () {
        if (this.el.nativeElement && this.el.nativeElement.getBoundingClientRect) {
            var boundingClientRect = this.el.nativeElement.getBoundingClientRect();
            this.renderer.setStyle(this.el.nativeElement, 'width', boundingClientRect.width + "px");
        }
    };
    var ClrLoadingButton_1;
    ClrLoadingButton.ctorParameters = function () { return [
        { type: ElementRef },
        { type: Renderer2 }
    ]; };
    __decorate([
        Input('disabled')
    ], ClrLoadingButton.prototype, "disabled", void 0);
    __decorate([
        Output('clrLoadingChange')
    ], ClrLoadingButton.prototype, "clrLoadingChange", void 0);
ClrLoadingButton.ɵfac = function ClrLoadingButton_Factory(t) { return new (t || ClrLoadingButton)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Renderer2)); };
ClrLoadingButton.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: ClrLoadingButton, selectors: [["button", "clrLoading", ""]], hostVars: 1, hostBindings: function ClrLoadingButton_HostBindings(rf, ctx) { if (rf & 2) {
        ɵngcc0.ɵɵattribute("disabled", ctx.disabled ? "" : null);
    } }, inputs: { disabled: "disabled" }, outputs: { clrLoadingChange: "clrLoadingChange" }, features: [ɵngcc0.ɵɵProvidersFeature([{ provide: LoadingListener, useExisting: ClrLoadingButton_1 }])], attrs: _c0, ngContentSelectors: _c1, decls: 4, vars: 4, consts: [[3, "ngSwitch"], [4, "ngSwitchCase"], [1, "spinner", "spinner-inline"], [1, "spinner", "spinner-inline", "spinner-check"]], template: function ClrLoadingButton_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵelementContainerStart(0, 0);
        ɵngcc0.ɵɵtemplate(1, ClrLoadingButton_span_1_Template, 2, 1, "span", 1);
        ɵngcc0.ɵɵtemplate(2, ClrLoadingButton_span_2_Template, 2, 1, "span", 1);
        ɵngcc0.ɵɵtemplate(3, ClrLoadingButton_span_3_Template, 2, 1, "span", 1);
        ɵngcc0.ɵɵelementContainerEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵproperty("ngSwitch", ctx.state);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngSwitchCase", ctx.buttonState.LOADING);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngSwitchCase", ctx.buttonState.SUCCESS);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngSwitchCase", ctx.buttonState.DEFAULT);
    } }, directives: [ɵngcc1.NgSwitch, ɵngcc1.NgSwitchCase], encapsulation: 2, data: { animation: [
            trigger('defaultButton', [
                transition(':enter', [style({ opacity: 0 }), animate('200ms 100ms ease-in', style({ opacity: 1 }))]),
                // TODO: see if we can get leave animation to work before spinner's enter animation
                transition(':leave', [style({ opacity: 0 })]),
            ]),
            trigger('spinner', [
                transition(':enter', [style({ opacity: 0 }), animate('200ms 100ms ease-in', style({ opacity: 1 }))]),
                transition(':leave', [style({ opacity: 1 }), animate('100ms ease-out', style({ opacity: 0 }))]),
            ]),
            trigger('validated', [
                transition(':enter', [
                    animate('600ms', keyframes([
                        style({ transform: 'scale(0,0)', offset: 0 }),
                        style({ opacity: 1, offset: 0.2 }),
                        style({ transform: 'scale(1.2,1.2)', offset: 0.4 }),
                        style({ transform: 'scale(.9,.9)', offset: 0.6 }),
                        style({ transform: 'scale(1,1)', offset: 1 }),
                    ])),
                ]),
                transition(':leave', [style({ opacity: 1 }), animate('100ms ease-out', style({ opacity: 0 }))]),
            ]),
        ] } });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ClrLoadingButton, [{
        type: Component,
        args: [{
                selector: 'button[clrLoading]',
                template: "\n        <ng-container [ngSwitch]=\"state\">\n            <span *ngSwitchCase=\"buttonState.LOADING\">\n                <span @spinner class=\"spinner spinner-inline\"></span>\n            </span>\n            <span *ngSwitchCase=\"buttonState.SUCCESS\">\n                <span @validated (@validated.done)=\"this.loadingStateChange(this.buttonState.DEFAULT)\" class=\"spinner spinner-inline spinner-check\"></span>\n            </span>\n            <span *ngSwitchCase=\"buttonState.DEFAULT\" @defaultButton>\n                <ng-content></ng-content>\n            </span>\n        </ng-container>\n    ",
                providers: [{ provide: LoadingListener, useExisting: ClrLoadingButton_1 }],
                animations: [
                    trigger('defaultButton', [
                        transition(':enter', [style({ opacity: 0 }), animate('200ms 100ms ease-in', style({ opacity: 1 }))]),
                        // TODO: see if we can get leave animation to work before spinner's enter animation
                        transition(':leave', [style({ opacity: 0 })]),
                    ]),
                    trigger('spinner', [
                        transition(':enter', [style({ opacity: 0 }), animate('200ms 100ms ease-in', style({ opacity: 1 }))]),
                        transition(':leave', [style({ opacity: 1 }), animate('100ms ease-out', style({ opacity: 0 }))]),
                    ]),
                    trigger('validated', [
                        transition(':enter', [
                            animate('600ms', keyframes([
                                style({ transform: 'scale(0,0)', offset: 0 }),
                                style({ opacity: 1, offset: 0.2 }),
                                style({ transform: 'scale(1.2,1.2)', offset: 0.4 }),
                                style({ transform: 'scale(.9,.9)', offset: 0.6 }),
                                style({ transform: 'scale(1,1)', offset: 1 }),
                            ])),
                        ]),
                        transition(':leave', [style({ opacity: 1 }), animate('100ms ease-out', style({ opacity: 0 }))]),
                    ]),
                ],
                host: { '[attr.disabled]': "disabled? '' : null" }
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ɵngcc0.Renderer2 }]; }, { clrLoadingChange: [{
            type: Output,
            args: ['clrLoadingChange']
        }], disabled: [{
            type: Input,
            args: ['disabled']
        }] }); })();
    return ClrLoadingButton;
}());
export { ClrLoadingButton };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,