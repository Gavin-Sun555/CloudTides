/*
 * Copyright (c) 2016-2019 VMware, Inc. All Rights Reserved.
 * This software is released under MIT license.
 * The full license information can be found in LICENSE in the root directory of this project.
 */
import { __decorate } from "tslib";
import { Component, ContentChildren, ChangeDetectionStrategy, Input, } from '@angular/core';
import { startWith } from 'rxjs/operators';
import { AccordionService } from './providers/accordion.service';
import { ClrAccordionPanel } from './accordion-panel';
import { AccordionStrategy } from './enums/accordion-strategy.enum';
import * as ɵngcc0 from '@angular/core';

var _c0 = ["*"];
var ClrAccordion = /** @class */ (function () {
    function ClrAccordion(accordionService) {
        this.accordionService = accordionService;
        this.multiPanel = false;
        this.subscriptions = [];
    }
    ClrAccordion.prototype.ngOnInit = function () {
        this.setAccordionStrategy();
    };
    ClrAccordion.prototype.ngOnChanges = function (changes) {
        if (changes.multiPanel.currentValue !== changes.multiPanel.previousValue) {
            this.setAccordionStrategy();
        }
    };
    ClrAccordion.prototype.ngAfterViewInit = function () {
        this.subscriptions.push(this.listenForDOMChanges());
    };
    ClrAccordion.prototype.ngOnDestroy = function () {
        this.subscriptions.forEach(function (s) { return s.unsubscribe(); });
    };
    ClrAccordion.prototype.setAccordionStrategy = function () {
        var strategy = this.multiPanel ? AccordionStrategy.Multi : AccordionStrategy.Default;
        this.accordionService.setStrategy(strategy);
    };
    ClrAccordion.prototype.listenForDOMChanges = function () {
        var _this = this;
        return this.panels.changes
            .pipe(startWith(this.panels))
            .subscribe(function (panels) { return _this.accordionService.updatePanelOrder(panels.toArray().map(function (p) { return p.id; })); });
    };
    ClrAccordion.ctorParameters = function () { return [
        { type: AccordionService }
    ]; };
    __decorate([
        Input('clrAccordionMultiPanel')
    ], ClrAccordion.prototype, "multiPanel", void 0);
    __decorate([
        ContentChildren(ClrAccordionPanel, { descendants: true })
    ], ClrAccordion.prototype, "panels", void 0);
ClrAccordion.ɵfac = function ClrAccordion_Factory(t) { return new (t || ClrAccordion)(ɵngcc0.ɵɵdirectiveInject(AccordionService)); };
ClrAccordion.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: ClrAccordion, selectors: [["clr-accordion"]], contentQueries: function ClrAccordion_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {
        ɵngcc0.ɵɵcontentQuery(dirIndex, ClrAccordionPanel, true);
    } if (rf & 2) {
        var _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.panels = _t);
    } }, hostVars: 2, hostBindings: function ClrAccordion_HostBindings(rf, ctx) { if (rf & 2) {
        ɵngcc0.ɵɵclassProp("clr-accordion", true);
    } }, inputs: { multiPanel: ["clrAccordionMultiPanel", "multiPanel"] }, features: [ɵngcc0.ɵɵProvidersFeature([AccordionService]), ɵngcc0.ɵɵNgOnChangesFeature], ngContentSelectors: _c0, decls: 1, vars: 0, template: function ClrAccordion_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵprojection(0);
    } }, encapsulation: 2, changeDetection: 0 });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ClrAccordion, [{
        type: Component,
        args: [{
                selector: 'clr-accordion',
                template: "<ng-content></ng-content>",
                host: { '[class.clr-accordion]': 'true' },
                providers: [AccordionService],
                changeDetection: ChangeDetectionStrategy.OnPush
            }]
    }], function () { return [{ type: AccordionService }]; }, { multiPanel: [{
            type: Input,
            args: ['clrAccordionMultiPanel']
        }], panels: [{
            type: ContentChildren,
            args: [ClrAccordionPanel, { descendants: true }]
        }] }); })();
    return ClrAccordion;
}());
export { ClrAccordion };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWNjb3JkaW9uLmpzIiwic291cmNlcyI6WyJuZzovQGNsci9hbmd1bGFyL2FjY29yZGlvbi9hY2NvcmRpb24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQSxPQUFPLEVBQ0wsU0FBUyxFQUNULGVBQWUsRUFFZix1QkFBdUIsRUFDdkIsS0FBSyxHQU1OLE1BQU0sZUFBZSxDQUFDO0FBQ3ZCLE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUczQyxPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSwrQkFBK0IsQ0FBQztBQUNqRSxPQUFPLEVBQUUsaUJBQWlCLEVBQUUsTUFBTSxtQkFBbUIsQ0FBQztBQUN0RCxPQUFPLEVBQUUsaUJBQWlCLEVBQUUsTUFBTSxpQ0FBaUMsQ0FBQzs7OztBQVNwRTtBQUFnRCxJQU05QyxzQkFBb0IsZ0JBQWtDO0FBQUksUUFBdEMscUJBQWdCLEdBQWhCLGdCQUFnQixDQUFrQjtBQUFDLFFBTHRCLGVBQVUsR0FBRyxLQUFLLENBQUM7QUFDdEQsUUFFRSxrQkFBYSxHQUFtQixFQUFFLENBQUM7QUFDckMsSUFDMkQsQ0FBQztBQUM1RCxJQUNFLCtCQUFRLEdBQVI7QUFDRCxRQUFHLElBQUksQ0FBQyxvQkFBb0IsRUFBRSxDQUFDO0FBQ2hDLElBQUUsQ0FBQztBQUVILElBQUUsa0NBQVcsR0FBWCxVQUFZLE9BQXNCO0FBQ3BDLFFBQUksSUFBSSxPQUFPLENBQUMsVUFBVSxDQUFDLFlBQVksS0FBSyxPQUFPLENBQUMsVUFBVSxDQUFDLGFBQWEsRUFBRTtBQUM5RSxZQUFNLElBQUksQ0FBQyxvQkFBb0IsRUFBRSxDQUFDO0FBQ2xDLFNBQUs7QUFDTCxJQUFFLENBQUM7QUFFSCxJQUFFLHNDQUFlLEdBQWY7QUFBYyxRQUNaLElBQUksQ0FBQyxhQUFhLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxtQkFBbUIsRUFBRSxDQUFDLENBQUM7QUFDeEQsSUFBRSxDQUFDO0FBRUgsSUFBRSxrQ0FBVyxHQUFYO0FBQWMsUUFDWixJQUFJLENBQUMsYUFBYSxDQUFDLE9BQU8sQ0FBQyxVQUFBLENBQUMsSUFBSSxPQUFBLENBQUMsQ0FBQyxXQUFXLEVBQUUsRUFBZixDQUFlLENBQUMsQ0FBQztBQUNyRCxJQUFFLENBQUM7QUFFSCxJQUFVLDJDQUFvQixHQUE1QjtBQUFjLFFBQ1osSUFBTSxRQUFRLEdBQUcsSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsaUJBQWlCLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxpQkFBaUIsQ0FBQyxPQUFPLENBQUM7QUFDM0YsUUFBSSxJQUFJLENBQUMsZ0JBQWdCLENBQUMsV0FBVyxDQUFDLFFBQVEsQ0FBQyxDQUFDO0FBQ2hELElBQUUsQ0FBQztBQUVILElBQVUsMENBQW1CLEdBQTNCO0FBQWMsUUFBZCxpQkFJQztBQUNILFFBSkksT0FBTyxJQUFJLENBQUMsTUFBTSxDQUFDLE9BQU87QUFDOUIsYUFBTyxJQUFJLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztBQUNuQyxhQUFPLFNBQVMsQ0FBQyxVQUFBLE1BQU0sSUFBSSxPQUFBLEtBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxnQkFBZ0IsQ0FBQyxNQUFNLENBQUMsT0FBTyxFQUFFLENBQUMsR0FBRyxDQUFDLFVBQUEsQ0FBQyxJQUFJLE9BQUEsQ0FBQyxDQUFDLEVBQUUsRUFBSixDQUFJLENBQUMsQ0FBQyxFQUF2RSxDQUF1RSxDQUFDLENBQUM7QUFDcEcsSUFBRSxDQUFDO0FBQ0Y7QUFDdUQsZ0JBL0JoQixnQkFBZ0I7QUFBRztBQUVwRCxJQVA0QjtBQUFhLFFBQTdDLEtBQUssQ0FBQyx3QkFBd0IsQ0FBQztBQUFDLG9EQUFtQjtBQUNyRCxJQUNDO0FBQWEsUUFEWixlQUFlLENBQUMsaUJBQWlCLEVBQUUsRUFBRSxXQUFXLEVBQUUsSUFBSSxFQUFFLENBQUM7QUFDNUQsZ0RBQXVDO0lBSDFCLFlBQVksd0JBUHhCLFNBQVMsQ0FBQyxjQUNULFFBQVEsRUFBRSxlQUFlLGNBQ3pCLFFBQVEsRUFBRTtNQUEyQixjQUNyQyxJQUFJLEVBQUUsRUFBRSx1QkFBdUIsRUFBRSxNQUFNLEVBQUUsY0FDekMsU0FBUyxFQUFFLENBQUMsZ0JBQWdCLENBQUMsY0FDN0IsZUFBZSxFQUFFLHVCQUF1QixDQUFDLE1BQU0sVUFDaEQsQ0FBQyxRQUNXO1NBQVksQ0FvQ3hCOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O29CQUNEO0FBQUMsSUFERCxtQkFBQztBQUNBLENBREEsQUFwQ0QsSUFvQ0M7QUFDRCxTQXJDYSxZQUFZO0FBQUkiLCJzb3VyY2VzQ29udGVudCI6WyIvKlxuICogQ29weXJpZ2h0IChjKSAyMDE2LTIwMTkgVk13YXJlLCBJbmMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKiBUaGlzIHNvZnR3YXJlIGlzIHJlbGVhc2VkIHVuZGVyIE1JVCBsaWNlbnNlLlxuICogVGhlIGZ1bGwgbGljZW5zZSBpbmZvcm1hdGlvbiBjYW4gYmUgZm91bmQgaW4gTElDRU5TRSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBwcm9qZWN0LlxuICovXG5cbmltcG9ydCB7XG4gIENvbXBvbmVudCxcbiAgQ29udGVudENoaWxkcmVuLFxuICBRdWVyeUxpc3QsXG4gIENoYW5nZURldGVjdGlvblN0cmF0ZWd5LFxuICBJbnB1dCxcbiAgU2ltcGxlQ2hhbmdlcyxcbiAgT25Jbml0LFxuICBPbkNoYW5nZXMsXG4gIEFmdGVyVmlld0luaXQsXG4gIE9uRGVzdHJveSxcbn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBzdGFydFdpdGggfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XG5pbXBvcnQgeyBTdWJzY3JpcHRpb24gfSBmcm9tICdyeGpzJztcblxuaW1wb3J0IHsgQWNjb3JkaW9uU2VydmljZSB9IGZyb20gJy4vcHJvdmlkZXJzL2FjY29yZGlvbi5zZXJ2aWNlJztcbmltcG9ydCB7IENsckFjY29yZGlvblBhbmVsIH0gZnJvbSAnLi9hY2NvcmRpb24tcGFuZWwnO1xuaW1wb3J0IHsgQWNjb3JkaW9uU3RyYXRlZ3kgfSBmcm9tICcuL2VudW1zL2FjY29yZGlvbi1zdHJhdGVneS5lbnVtJztcblxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAnY2xyLWFjY29yZGlvbicsXG4gIHRlbXBsYXRlOiBgPG5nLWNvbnRlbnQ+PC9uZy1jb250ZW50PmAsXG4gIGhvc3Q6IHsgJ1tjbGFzcy5jbHItYWNjb3JkaW9uXSc6ICd0cnVlJyB9LFxuICBwcm92aWRlcnM6IFtBY2NvcmRpb25TZXJ2aWNlXSxcbiAgY2hhbmdlRGV0ZWN0aW9uOiBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneS5PblB1c2gsXG59KVxuZXhwb3J0IGNsYXNzIENsckFjY29yZGlvbiBpbXBsZW1lbnRzIE9uSW5pdCwgT25DaGFuZ2VzLCBBZnRlclZpZXdJbml0LCBPbkRlc3Ryb3kge1xuICBASW5wdXQoJ2NsckFjY29yZGlvbk11bHRpUGFuZWwnKSBtdWx0aVBhbmVsID0gZmFsc2U7XG4gIEBDb250ZW50Q2hpbGRyZW4oQ2xyQWNjb3JkaW9uUGFuZWwsIHsgZGVzY2VuZGFudHM6IHRydWUgfSlcbiAgcGFuZWxzOiBRdWVyeUxpc3Q8Q2xyQWNjb3JkaW9uUGFuZWw+O1xuICBzdWJzY3JpcHRpb25zOiBTdWJzY3JpcHRpb25bXSA9IFtdO1xuXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgYWNjb3JkaW9uU2VydmljZTogQWNjb3JkaW9uU2VydmljZSkge31cblxuICBuZ09uSW5pdCgpIHtcbiAgICB0aGlzLnNldEFjY29yZGlvblN0cmF0ZWd5KCk7XG4gIH1cblxuICBuZ09uQ2hhbmdlcyhjaGFuZ2VzOiBTaW1wbGVDaGFuZ2VzKSB7XG4gICAgaWYgKGNoYW5nZXMubXVsdGlQYW5lbC5jdXJyZW50VmFsdWUgIT09IGNoYW5nZXMubXVsdGlQYW5lbC5wcmV2aW91c1ZhbHVlKSB7XG4gICAgICB0aGlzLnNldEFjY29yZGlvblN0cmF0ZWd5KCk7XG4gICAgfVxuICB9XG5cbiAgbmdBZnRlclZpZXdJbml0KCkge1xuICAgIHRoaXMuc3Vic2NyaXB0aW9ucy5wdXNoKHRoaXMubGlzdGVuRm9yRE9NQ2hhbmdlcygpKTtcbiAgfVxuXG4gIG5nT25EZXN0cm95KCkge1xuICAgIHRoaXMuc3Vic2NyaXB0aW9ucy5mb3JFYWNoKHMgPT4gcy51bnN1YnNjcmliZSgpKTtcbiAgfVxuXG4gIHByaXZhdGUgc2V0QWNjb3JkaW9uU3RyYXRlZ3koKSB7XG4gICAgY29uc3Qgc3RyYXRlZ3kgPSB0aGlzLm11bHRpUGFuZWwgPyBBY2NvcmRpb25TdHJhdGVneS5NdWx0aSA6IEFjY29yZGlvblN0cmF0ZWd5LkRlZmF1bHQ7XG4gICAgdGhpcy5hY2NvcmRpb25TZXJ2aWNlLnNldFN0cmF0ZWd5KHN0cmF0ZWd5KTtcbiAgfVxuXG4gIHByaXZhdGUgbGlzdGVuRm9yRE9NQ2hhbmdlcygpIHtcbiAgICByZXR1cm4gdGhpcy5wYW5lbHMuY2hhbmdlc1xuICAgICAgLnBpcGUoc3RhcnRXaXRoKHRoaXMucGFuZWxzKSlcbiAgICAgIC5zdWJzY3JpYmUocGFuZWxzID0+IHRoaXMuYWNjb3JkaW9uU2VydmljZS51cGRhdGVQYW5lbE9yZGVyKHBhbmVscy50b0FycmF5KCkubWFwKHAgPT4gcC5pZCkpKTtcbiAgfVxufVxuIl19