/*
 * Copyright (c) 2016-2019 VMware, Inc. All Rights Reserved.
 * This software is released under MIT license.
 * The full license information can be found in LICENSE in the root directory of this project.
 */
import { __decorate } from "tslib";
import { Injectable } from '@angular/core';
import { BehaviorSubject } from 'rxjs';
import { map } from 'rxjs/operators';
import { AccordionModel } from '../models/accordion.model';
import * as ɵngcc0 from '@angular/core';
var AccordionService = /** @class */ (function () {
    function AccordionService() {
        this.accordion = new AccordionModel();
        this._panelsChanges = new BehaviorSubject(this.accordion.panels);
    }
    AccordionService.prototype.getPanelChanges = function (panelId) {
        return this._panelsChanges.pipe(map(function (panels) { return panels.find(function (s) { return s.id === panelId; }); }));
    };
    AccordionService.prototype.setStrategy = function (strategy) {
        this.accordion.setStrategy(strategy);
    };
    AccordionService.prototype.addPanel = function (panelId, open) {
        if (open === void 0) { open = false; }
        this.accordion.addPanel(panelId, open);
        this.emitUpdatedPanels();
    };
    AccordionService.prototype.togglePanel = function (panelId, open) {
        this.accordion.togglePanel(panelId, open);
        this.emitUpdatedPanels();
    };
    AccordionService.prototype.disablePanel = function (panelId, disabled) {
        this.accordion.disablePanel(panelId, disabled);
        this.emitUpdatedPanels();
    };
    AccordionService.prototype.updatePanelOrder = function (ids) {
        this.accordion.updatePanelOrder(ids);
        this.emitUpdatedPanels();
    };
    AccordionService.prototype.emitUpdatedPanels = function () {
        this._panelsChanges.next(this.accordion.panels);
    };
AccordionService.ɵfac = function AccordionService_Factory(t) { return new (t || AccordionService)(); };
AccordionService.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: AccordionService, factory: function (t) { return AccordionService.ɵfac(t); } });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(AccordionService, [{
        type: Injectable
    }], function () { return []; }, null); })();
    return AccordionService;
}());
export { AccordionService };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWNjb3JkaW9uLnNlcnZpY2UuanMiLCJzb3VyY2VzIjpbIm5nOi9AY2xyL2FuZ3VsYXIvYWNjb3JkaW9uL3Byb3ZpZGVycy9hY2NvcmRpb24uc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDM0MsT0FBTyxFQUFFLGVBQWUsRUFBYyxNQUFNLE1BQU0sQ0FBQztBQUNuRCxPQUFPLEVBQUUsR0FBRyxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFFckMsT0FBTyxFQUFFLGNBQWMsRUFBdUIsTUFBTSwyQkFBMkIsQ0FBQzs7QUFJaEY7QUFDb0IsSUFEcEI7QUFBOEIsUUFDbEIsY0FBUyxHQUFHLElBQUksY0FBYyxFQUFFLENBQUM7QUFDN0MsUUFBcUIsbUJBQWMsR0FBRyxJQUFJLGVBQWUsQ0FBd0IsSUFBSSxDQUFDLFNBQVMsQ0FBQyxNQUFNLENBQUMsQ0FBQztBQUN4RyxJQWdDQSxDQUFDO0FBQ0QsSUFoQ0UsMENBQWUsR0FBZixVQUFnQixPQUFlO0FBQUksUUFDakMsT0FBTyxJQUFJLENBQUMsY0FBYyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsVUFBQSxNQUFNLElBQUksT0FBQSxNQUFNLENBQUMsSUFBSSxDQUFDLFVBQUEsQ0FBQyxJQUFJLE9BQUEsQ0FBQyxDQUFDLEVBQUUsS0FBSyxPQUFPLEVBQWhCLENBQWdCLENBQUMsRUFBbEMsQ0FBa0MsQ0FBQyxDQUFDLENBQUM7QUFDdkYsSUFBRSxDQUFDO0FBRUgsSUFBRSxzQ0FBVyxHQUFYLFVBQVksUUFBMkI7QUFDekMsUUFBSSxJQUFJLENBQUMsU0FBUyxDQUFDLFdBQVcsQ0FBQyxRQUFRLENBQUMsQ0FBQztBQUN6QyxJQUFFLENBQUM7QUFFSCxJQUFFLG1DQUFRLEdBQVIsVUFBUyxPQUFlLEVBQUUsSUFBWTtBQUN4QyxRQUQ0QixxQkFBQSxFQUFBLFlBQVk7QUFDeEMsUUFBSSxJQUFJLENBQUMsU0FBUyxDQUFDLFFBQVEsQ0FBQyxPQUFPLEVBQUUsSUFBSSxDQUFDLENBQUM7QUFDM0MsUUFBSSxJQUFJLENBQUMsaUJBQWlCLEVBQUUsQ0FBQztBQUM3QixJQUFFLENBQUM7QUFFSCxJQUFFLHNDQUFXLEdBQVgsVUFBWSxPQUFlLEVBQUUsSUFBYztBQUM3QyxRQUFJLElBQUksQ0FBQyxTQUFTLENBQUMsV0FBVyxDQUFDLE9BQU8sRUFBRSxJQUFJLENBQUMsQ0FBQztBQUM5QyxRQUFJLElBQUksQ0FBQyxpQkFBaUIsRUFBRSxDQUFDO0FBQzdCLElBQUUsQ0FBQztBQUVILElBQUUsdUNBQVksR0FBWixVQUFhLE9BQWUsRUFBRSxRQUFrQjtBQUNsRCxRQUFJLElBQUksQ0FBQyxTQUFTLENBQUMsWUFBWSxDQUFDLE9BQU8sRUFBRSxRQUFRLENBQUMsQ0FBQztBQUNuRCxRQUFJLElBQUksQ0FBQyxpQkFBaUIsRUFBRSxDQUFDO0FBQzdCLElBQUUsQ0FBQztBQUVILElBQUUsMkNBQWdCLEdBQWhCLFVBQWlCLEdBQWE7QUFDaEMsUUFBSSxJQUFJLENBQUMsU0FBUyxDQUFDLGdCQUFnQixDQUFDLEdBQUcsQ0FBQyxDQUFDO0FBQ3pDLFFBQUksSUFBSSxDQUFDLGlCQUFpQixFQUFFLENBQUM7QUFDN0IsSUFBRSxDQUFDO0FBRUgsSUFBWSw0Q0FBaUIsR0FBM0I7QUFBYyxRQUNaLElBQUksQ0FBQyxjQUFjLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsTUFBTSxDQUFDLENBQUM7QUFDcEQsSUFBRSxDQUFDO0lBbENVLGdCQUFnQix3QkFENUIsVUFBVSxFQUFFLFFBQ0EsZ0JBQWdCLENBbUM1Qjs7OztnREFDRDtBQUFDLElBREQsdUJBQUM7QUFDQSxDQURBLEFBbkNELElBbUNDO0FBQ0QsU0FwQ2EsZ0JBQWdCO0FBQzVCIiwic291cmNlc0NvbnRlbnQiOlsiLypcbiAqIENvcHlyaWdodCAoYykgMjAxNi0yMDE5IFZNd2FyZSwgSW5jLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICogVGhpcyBzb2Z0d2FyZSBpcyByZWxlYXNlZCB1bmRlciBNSVQgbGljZW5zZS5cbiAqIFRoZSBmdWxsIGxpY2Vuc2UgaW5mb3JtYXRpb24gY2FuIGJlIGZvdW5kIGluIExJQ0VOU0UgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgcHJvamVjdC5cbiAqL1xuXG5pbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBCZWhhdmlvclN1YmplY3QsIE9ic2VydmFibGUgfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IG1hcCB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcblxuaW1wb3J0IHsgQWNjb3JkaW9uTW9kZWwsIEFjY29yZGlvblBhbmVsTW9kZWwgfSBmcm9tICcuLi9tb2RlbHMvYWNjb3JkaW9uLm1vZGVsJztcbmltcG9ydCB7IEFjY29yZGlvblN0cmF0ZWd5IH0gZnJvbSAnLi4vZW51bXMvYWNjb3JkaW9uLXN0cmF0ZWd5LmVudW0nO1xuXG5ASW5qZWN0YWJsZSgpXG5leHBvcnQgY2xhc3MgQWNjb3JkaW9uU2VydmljZSB7XG4gIHByb3RlY3RlZCBhY2NvcmRpb24gPSBuZXcgQWNjb3JkaW9uTW9kZWwoKTtcbiAgcHJvdGVjdGVkIHJlYWRvbmx5IF9wYW5lbHNDaGFuZ2VzID0gbmV3IEJlaGF2aW9yU3ViamVjdDxBY2NvcmRpb25QYW5lbE1vZGVsW10+KHRoaXMuYWNjb3JkaW9uLnBhbmVscyk7XG5cbiAgZ2V0UGFuZWxDaGFuZ2VzKHBhbmVsSWQ6IHN0cmluZyk6IE9ic2VydmFibGU8QWNjb3JkaW9uUGFuZWxNb2RlbD4ge1xuICAgIHJldHVybiB0aGlzLl9wYW5lbHNDaGFuZ2VzLnBpcGUobWFwKHBhbmVscyA9PiBwYW5lbHMuZmluZChzID0+IHMuaWQgPT09IHBhbmVsSWQpKSk7XG4gIH1cblxuICBzZXRTdHJhdGVneShzdHJhdGVneTogQWNjb3JkaW9uU3RyYXRlZ3kpIHtcbiAgICB0aGlzLmFjY29yZGlvbi5zZXRTdHJhdGVneShzdHJhdGVneSk7XG4gIH1cblxuICBhZGRQYW5lbChwYW5lbElkOiBzdHJpbmcsIG9wZW4gPSBmYWxzZSkge1xuICAgIHRoaXMuYWNjb3JkaW9uLmFkZFBhbmVsKHBhbmVsSWQsIG9wZW4pO1xuICAgIHRoaXMuZW1pdFVwZGF0ZWRQYW5lbHMoKTtcbiAgfVxuXG4gIHRvZ2dsZVBhbmVsKHBhbmVsSWQ6IHN0cmluZywgb3Blbj86IGJvb2xlYW4pIHtcbiAgICB0aGlzLmFjY29yZGlvbi50b2dnbGVQYW5lbChwYW5lbElkLCBvcGVuKTtcbiAgICB0aGlzLmVtaXRVcGRhdGVkUGFuZWxzKCk7XG4gIH1cblxuICBkaXNhYmxlUGFuZWwocGFuZWxJZDogc3RyaW5nLCBkaXNhYmxlZD86IGJvb2xlYW4pIHtcbiAgICB0aGlzLmFjY29yZGlvbi5kaXNhYmxlUGFuZWwocGFuZWxJZCwgZGlzYWJsZWQpO1xuICAgIHRoaXMuZW1pdFVwZGF0ZWRQYW5lbHMoKTtcbiAgfVxuXG4gIHVwZGF0ZVBhbmVsT3JkZXIoaWRzOiBzdHJpbmdbXSkge1xuICAgIHRoaXMuYWNjb3JkaW9uLnVwZGF0ZVBhbmVsT3JkZXIoaWRzKTtcbiAgICB0aGlzLmVtaXRVcGRhdGVkUGFuZWxzKCk7XG4gIH1cblxuICBwcm90ZWN0ZWQgZW1pdFVwZGF0ZWRQYW5lbHMoKSB7XG4gICAgdGhpcy5fcGFuZWxzQ2hhbmdlcy5uZXh0KHRoaXMuYWNjb3JkaW9uLnBhbmVscyk7XG4gIH1cbn1cbiJdfQ==