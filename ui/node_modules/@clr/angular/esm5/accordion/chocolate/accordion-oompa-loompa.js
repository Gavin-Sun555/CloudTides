/*
 * Copyright (c) 2016-2019 VMware, Inc. All Rights Reserved.
 * This software is released under MIT license.
 * The full license information can be found in LICENSE in the root directory of this project.
 */
import { __decorate, __extends, __param } from "tslib";
import { ChangeDetectorRef, Directive, Optional } from '@angular/core';
import { OompaLoompa } from '../../utils/chocolate/oompa-loompa';
import { AccordionWillyWonka } from './accordion-willy-wonka';
import { IfExpandService } from '../../utils/conditional/if-expanded.service';
import * as ɵngcc0 from '@angular/core';
var AccordionOompaLoompa = /** @class */ (function (_super) {
    __extends(AccordionOompaLoompa, _super);
    function AccordionOompaLoompa(cdr, willyWonka, ifExpandService) {
        var _this = this;
        if (!willyWonka) {
            throw new Error('clr-accordion-panel should only be used inside of clr-accordion');
        }
        _this = _super.call(this, cdr, willyWonka) || this;
        _this.expand = ifExpandService;
        return _this;
    }
    Object.defineProperty(AccordionOompaLoompa.prototype, "flavor", {
        get: function () {
            return this.expand.expanded;
        },
        enumerable: true,
        configurable: true
    });
    AccordionOompaLoompa.ctorParameters = function () { return [
        { type: ChangeDetectorRef },
        { type: AccordionWillyWonka, decorators: [{ type: Optional }] },
        { type: IfExpandService }
    ]; };
    AccordionOompaLoompa = __decorate([ __param(1, Optional())
    ], AccordionOompaLoompa);
AccordionOompaLoompa.ɵfac = function AccordionOompaLoompa_Factory(t) { return new (t || AccordionOompaLoompa)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(AccordionWillyWonka, 8), ɵngcc0.ɵɵdirectiveInject(IfExpandService)); };
AccordionOompaLoompa.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: AccordionOompaLoompa, selectors: [["clr-accordion-panel"]], features: [ɵngcc0.ɵɵInheritDefinitionFeature] });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(AccordionOompaLoompa, [{
        type: Directive,
        args: [{ selector: 'clr-accordion-panel' }]
    }], function () { return [{ type: ɵngcc0.ChangeDetectorRef }, { type: AccordionWillyWonka, decorators: [{
                type: Optional
            }] }, { type: IfExpandService }]; }, null); })();
    return AccordionOompaLoompa;
}(OompaLoompa));
export { AccordionOompaLoompa };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWNjb3JkaW9uLW9vbXBhLWxvb21wYS5qcyIsInNvdXJjZXMiOlsibmc6L0BjbHIvYW5ndWxhci9hY2NvcmRpb24vY2hvY29sYXRlL2FjY29yZGlvbi1vb21wYS1sb29tcGEudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQSxPQUFPLEVBQUUsaUJBQWlCLEVBQUUsU0FBUyxFQUFFLFFBQVEsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUV2RSxPQUFPLEVBQUUsV0FBVyxFQUFFLE1BQU0sb0NBQW9DLENBQUM7QUFDakUsT0FBTyxFQUFFLG1CQUFtQixFQUFFLE1BQU0seUJBQXlCLENBQUM7QUFDOUQsT0FBTyxFQUFFLGVBQWUsRUFBRSxNQUFNLDZDQUE2QyxDQUFDOztBQUc5RTtBQUNNLElBRG9DLHdDQUFXO0FBQUMsSUFHcEQsOEJBQVksR0FBc0IsRUFBYyxVQUErQixFQUFFLGVBQWdDO0FBQ25ILFFBREUsaUJBTUM7QUFDSCxRQU5JLElBQUksQ0FBQyxVQUFVLEVBQUU7QUFDckIsWUFBTSxNQUFNLElBQUksS0FBSyxDQUFDLGlFQUFpRSxDQUFDLENBQUM7QUFDekYsU0FBSztBQUNMLFFBQUksUUFBQSxrQkFBTSxHQUFHLEVBQUUsVUFBVSxDQUFDLFNBQUM7QUFDM0IsUUFBSSxLQUFJLENBQUMsTUFBTSxHQUFHLGVBQWUsQ0FBQztBQUNsQztBQUdBLElBSEUsQ0FBQztBQUNILElBQ0Usc0JBQUksd0NBQU07QUFBSSxhQUFkO0FBQWMsWUFDWixPQUFPLElBQUksQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDO0FBQ2hDLFFBQUUsQ0FBQztBQUNGO0FBQ3dCO0FBQTJCLE9BRmpEO0FBQ0g7QUFDK0QsZ0JBWjVDLGlCQUFpQjtBQUFJLGdCQUFzQixtQkFBbUIsdUJBQTFDLFFBQVE7QUFBTyxnQkFBOEMsZUFBZTtBQUFHO0FBQzdHLElBSkksb0JBQW9CLHdCQURoQyxTQUFTLENBQUMsRUFBRSxyQkFDTCxDQUcrQixXQUFBLFFBQVEsRUFBRSxDQUFBO0tBSjVCLEVBQUUscUJBQXFCLDVCQUlNLE9BSHJDLG9CQUFvQixDQWNoQztBQWY2QyxDQUFDOzs7Ozs7OzZEQWdCL0M7QUFBQyxJQURELDJCQUFDO0FBQ0EsQ0FEQSxBQWRELENBQTBDLFdBQVcsR0FjcEQ7QUFDRCxTQWZhLG9CQUFvQjtBQUFJIiwic291cmNlc0NvbnRlbnQiOlsiLypcbiAqIENvcHlyaWdodCAoYykgMjAxNi0yMDE5IFZNd2FyZSwgSW5jLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICogVGhpcyBzb2Z0d2FyZSBpcyByZWxlYXNlZCB1bmRlciBNSVQgbGljZW5zZS5cbiAqIFRoZSBmdWxsIGxpY2Vuc2UgaW5mb3JtYXRpb24gY2FuIGJlIGZvdW5kIGluIExJQ0VOU0UgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgcHJvamVjdC5cbiAqL1xuXG5pbXBvcnQgeyBDaGFuZ2VEZXRlY3RvclJlZiwgRGlyZWN0aXZlLCBPcHRpb25hbCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG5pbXBvcnQgeyBPb21wYUxvb21wYSB9IGZyb20gJy4uLy4uL3V0aWxzL2Nob2NvbGF0ZS9vb21wYS1sb29tcGEnO1xuaW1wb3J0IHsgQWNjb3JkaW9uV2lsbHlXb25rYSB9IGZyb20gJy4vYWNjb3JkaW9uLXdpbGx5LXdvbmthJztcbmltcG9ydCB7IElmRXhwYW5kU2VydmljZSB9IGZyb20gJy4uLy4uL3V0aWxzL2NvbmRpdGlvbmFsL2lmLWV4cGFuZGVkLnNlcnZpY2UnO1xuXG5ARGlyZWN0aXZlKHsgc2VsZWN0b3I6ICdjbHItYWNjb3JkaW9uLXBhbmVsJyB9KVxuZXhwb3J0IGNsYXNzIEFjY29yZGlvbk9vbXBhTG9vbXBhIGV4dGVuZHMgT29tcGFMb29tcGEge1xuICBwcml2YXRlIGV4cGFuZDogSWZFeHBhbmRTZXJ2aWNlO1xuXG4gIGNvbnN0cnVjdG9yKGNkcjogQ2hhbmdlRGV0ZWN0b3JSZWYsIEBPcHRpb25hbCgpIHdpbGx5V29ua2E6IEFjY29yZGlvbldpbGx5V29ua2EsIGlmRXhwYW5kU2VydmljZTogSWZFeHBhbmRTZXJ2aWNlKSB7XG4gICAgaWYgKCF3aWxseVdvbmthKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ2Nsci1hY2NvcmRpb24tcGFuZWwgc2hvdWxkIG9ubHkgYmUgdXNlZCBpbnNpZGUgb2YgY2xyLWFjY29yZGlvbicpO1xuICAgIH1cbiAgICBzdXBlcihjZHIsIHdpbGx5V29ua2EpO1xuICAgIHRoaXMuZXhwYW5kID0gaWZFeHBhbmRTZXJ2aWNlO1xuICB9XG5cbiAgZ2V0IGZsYXZvcigpIHtcbiAgICByZXR1cm4gdGhpcy5leHBhbmQuZXhwYW5kZWQ7XG4gIH1cbn1cbiJdfQ==