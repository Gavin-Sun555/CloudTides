/*
 * Copyright (c) 2016-2019 VMware, Inc. All Rights Reserved.
 * This software is released under MIT license.
 * The full license information can be found in LICENSE in the root directory of this project.
 */
import { __decorate } from "tslib";
import { Directive, HostListener, HostBinding, Input } from '@angular/core';
import { StepperService } from './providers/stepper.service';
import { ClrStepperPanel } from './stepper-panel';
import * as ɵngcc0 from '@angular/core';
export var ClrStepButtonType;
(function (ClrStepButtonType) {
    ClrStepButtonType["Next"] = "next";
    ClrStepButtonType["Submit"] = "submit";
})(ClrStepButtonType || (ClrStepButtonType = {}));
var ClrStepButton = /** @class */ (function () {
    function ClrStepButton(clrStep, stepperService) {
        this.clrStep = clrStep;
        this.stepperService = stepperService;
        this.type = ClrStepButtonType.Next;
        this.submitButton = false;
    }
    ClrStepButton.prototype.ngOnInit = function () {
        this.submitButton = this.type === ClrStepButtonType.Submit;
    };
    ClrStepButton.prototype.navigateToNextPanel = function () {
        this.stepperService.navigateToNextPanel(this.clrStep.id, this.clrStep.formGroup.valid);
    };
    ClrStepButton.ctorParameters = function () { return [
        { type: ClrStepperPanel },
        { type: StepperService }
    ]; };
    __decorate([
        Input('clrStepButton')
    ], ClrStepButton.prototype, "type", void 0);
    __decorate([
        HostBinding('class.btn-primary')
    ], ClrStepButton.prototype, "submitButton", void 0);
    __decorate([
        HostListener('click')
    ], ClrStepButton.prototype, "navigateToNextPanel", null);
ClrStepButton.ɵfac = function ClrStepButton_Factory(t) { return new (t || ClrStepButton)(ɵngcc0.ɵɵdirectiveInject(ClrStepperPanel), ɵngcc0.ɵɵdirectiveInject(StepperService)); };
ClrStepButton.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: ClrStepButton, selectors: [["", "clrStepButton", ""]], hostVars: 7, hostBindings: function ClrStepButton_HostBindings(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵlistener("click", function ClrStepButton_click_HostBindingHandler() { return ctx.navigateToNextPanel(); });
    } if (rf & 2) {
        ɵngcc0.ɵɵhostProperty("type", "button");
        ɵngcc0.ɵɵclassProp("clr-step-button", true)("btn", true)("btn-primary", ctx.submitButton);
    } }, inputs: { type: ["clrStepButton", "type"] } });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ClrStepButton, [{
        type: Directive,
        args: [{
                selector: '[clrStepButton]',
                host: {
                    '[class.clr-step-button]': 'true',
                    '[class.btn]': 'true',
                    '[type]': "'button'"
                }
            }]
    }], function () { return [{ type: ClrStepperPanel }, { type: StepperService }]; }, { type: [{
            type: Input,
            args: ['clrStepButton']
        }], submitButton: [{
            type: HostBinding,
            args: ['class.btn-primary']
        }], navigateToNextPanel: [{
            type: HostListener,
            args: ['click']
        }] }); })();
    return ClrStepButton;
}());
export { ClrStepButton };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3RlcC1idXR0b24uanMiLCJzb3VyY2VzIjpbIm5nOi9AY2xyL2FuZ3VsYXIvYWNjb3JkaW9uL3N0ZXBwZXIvc3RlcC1idXR0b24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQSxPQUFPLEVBQUUsU0FBUyxFQUFFLFlBQVksRUFBRSxXQUFXLEVBQUUsS0FBSyxFQUFVLE1BQU0sZUFBZSxDQUFDO0FBRXBGLE9BQU8sRUFBRSxjQUFjLEVBQUUsTUFBTSw2QkFBNkIsQ0FBQztBQUM3RCxPQUFPLEVBQUUsZUFBZSxFQUFFLE1BQU0saUJBQWlCLENBQUM7O0FBRWxELE1BQU0sQ0FBTixJQUFZLGlCQUdYO0FBSEQsV0FBWSxpQkFBaUI7QUFDNUIsSUFBQyxrQ0FBYSxDQUFBO0FBQUMsSUFDZCxzQ0FBaUIsQ0FBQTtBQUNuQixDQUFDLEVBSFcsaUJBQWlCLEtBQWpCLGlCQUFpQixRQUc1QjtBQVVEO0FBQ0UsSUFHQSx1QkFBb0IsT0FBd0IsRUFBVSxjQUE4QjtBQUFJLFFBQXBFLFlBQU8sR0FBUCxPQUFPLENBQWlCO0FBQUMsUUFBUyxtQkFBYyxHQUFkLGNBQWMsQ0FBZ0I7QUFBQyxRQUg3RCxTQUFJLEdBQStCLGlCQUFpQixDQUFDLElBQUksQ0FBQztBQUNwRixRQUFvQyxpQkFBWSxHQUFHLEtBQUssQ0FBQztBQUN6RCxJQUN5RixDQUFDO0FBQzFGLElBQ0UsZ0NBQVEsR0FBUjtBQUNELFFBQUcsSUFBSSxDQUFDLFlBQVksR0FBRyxJQUFJLENBQUMsSUFBSSxLQUFLLGlCQUFpQixDQUFDLE1BQU0sQ0FBQztBQUMvRCxJQUFFLENBQUM7QUFFSCxJQUNFLDJDQUFtQixHQUFuQjtBQUFjLFFBQ1osSUFBSSxDQUFDLGNBQWMsQ0FBQyxtQkFBbUIsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLEVBQUUsRUFBRSxJQUFJLENBQUMsT0FBTyxDQUFDLFNBQVMsQ0FBQyxLQUFLLENBQUMsQ0FBQztBQUMzRixJQUFFLENBQUM7QUFDRjtBQUN3RCxnQkFYMUIsZUFBZTtBQUFJLGdCQUFzQixjQUFjO0FBQUc7QUFFbEYsSUFMbUI7QUFBYSxRQUFwQyxLQUFLLENBQUMsZUFBZSxDQUFDO0FBQUMsK0NBQTBEO0FBQ25GLElBQW1DO0FBQWEsUUFBOUMsV0FBVyxDQUFDLG1CQUFtQixDQUFDO0FBQUMsdURBQXFCO0FBRXpELElBT0U7QUFBYSxRQURaLFlBQVksQ0FBQyxPQUFPLENBQUM7QUFDeEIsNERBRUc7SUFiVSxhQUFhLHdCQVJ6QixTQUFTLENBQUMsY0FDVCxRQUFRLEVBQUUsaUJBQWlCLGNBQzNCLElBQUksRUFBRSxrQkFDSix5QkFBeUIsRUFBRSxNQUFNO0dBQ2pDLGFBQWEsRUFBRSxNQUFNLGtCQUNyQixRQUFRLEVBQUUsVUFBVSxlQUNyQixXQUNGLENBQUMsUUFDVyxhQUFhLENBY3pCOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O29CQUNEO0FBQUMsSUFERCxvQkFBQztBQUNBLENBREEsQUFkRCxJQWNDO0FBQ0QsU0FmYSxhQUFhO0FBQUkiLCJzb3VyY2VzQ29udGVudCI6WyIvKlxuICogQ29weXJpZ2h0IChjKSAyMDE2LTIwMTkgVk13YXJlLCBJbmMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKiBUaGlzIHNvZnR3YXJlIGlzIHJlbGVhc2VkIHVuZGVyIE1JVCBsaWNlbnNlLlxuICogVGhlIGZ1bGwgbGljZW5zZSBpbmZvcm1hdGlvbiBjYW4gYmUgZm91bmQgaW4gTElDRU5TRSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBwcm9qZWN0LlxuICovXG5cbmltcG9ydCB7IERpcmVjdGl2ZSwgSG9zdExpc3RlbmVyLCBIb3N0QmluZGluZywgSW5wdXQsIE9uSW5pdCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG5pbXBvcnQgeyBTdGVwcGVyU2VydmljZSB9IGZyb20gJy4vcHJvdmlkZXJzL3N0ZXBwZXIuc2VydmljZSc7XG5pbXBvcnQgeyBDbHJTdGVwcGVyUGFuZWwgfSBmcm9tICcuL3N0ZXBwZXItcGFuZWwnO1xuXG5leHBvcnQgZW51bSBDbHJTdGVwQnV0dG9uVHlwZSB7XG4gIE5leHQgPSAnbmV4dCcsXG4gIFN1Ym1pdCA9ICdzdWJtaXQnLFxufVxuXG5ARGlyZWN0aXZlKHtcbiAgc2VsZWN0b3I6ICdbY2xyU3RlcEJ1dHRvbl0nLFxuICBob3N0OiB7XG4gICAgJ1tjbGFzcy5jbHItc3RlcC1idXR0b25dJzogJ3RydWUnLFxuICAgICdbY2xhc3MuYnRuXSc6ICd0cnVlJyxcbiAgICAnW3R5cGVdJzogXCInYnV0dG9uJ1wiLFxuICB9LFxufSlcbmV4cG9ydCBjbGFzcyBDbHJTdGVwQnV0dG9uIGltcGxlbWVudHMgT25Jbml0IHtcbiAgQElucHV0KCdjbHJTdGVwQnV0dG9uJykgdHlwZTogQ2xyU3RlcEJ1dHRvblR5cGUgfCBzdHJpbmcgPSBDbHJTdGVwQnV0dG9uVHlwZS5OZXh0O1xuICBASG9zdEJpbmRpbmcoJ2NsYXNzLmJ0bi1wcmltYXJ5Jykgc3VibWl0QnV0dG9uID0gZmFsc2U7XG5cbiAgY29uc3RydWN0b3IocHJpdmF0ZSBjbHJTdGVwOiBDbHJTdGVwcGVyUGFuZWwsIHByaXZhdGUgc3RlcHBlclNlcnZpY2U6IFN0ZXBwZXJTZXJ2aWNlKSB7fVxuXG4gIG5nT25Jbml0KCkge1xuICAgIHRoaXMuc3VibWl0QnV0dG9uID0gdGhpcy50eXBlID09PSBDbHJTdGVwQnV0dG9uVHlwZS5TdWJtaXQ7XG4gIH1cblxuICBASG9zdExpc3RlbmVyKCdjbGljaycpXG4gIG5hdmlnYXRlVG9OZXh0UGFuZWwoKSB7XG4gICAgdGhpcy5zdGVwcGVyU2VydmljZS5uYXZpZ2F0ZVRvTmV4dFBhbmVsKHRoaXMuY2xyU3RlcC5pZCwgdGhpcy5jbHJTdGVwLmZvcm1Hcm91cC52YWxpZCk7XG4gIH1cbn1cbiJdfQ==