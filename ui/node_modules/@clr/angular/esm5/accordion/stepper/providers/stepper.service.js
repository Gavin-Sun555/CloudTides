/*
 * Copyright (c) 2016-2019 VMware, Inc. All Rights Reserved.
 * This software is released under MIT license.
 * The full license information can be found in LICENSE in the root directory of this project.
 */
import { __decorate, __extends } from "tslib";
import { Injectable } from '@angular/core';
import { map, distinctUntilChanged } from 'rxjs/operators';
import { Subject } from 'rxjs';
import { AccordionService } from './../../providers/accordion.service';
import { StepperModel } from '../models/stepper.model';
import * as ɵngcc0 from '@angular/core';
var StepperService = /** @class */ (function (_super) {
    __extends(StepperService, _super);
    function StepperService() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.panelsCompleted = _this.getAllCompletedPanelChanges();
        _this.accordion = new StepperModel();
        _this._activeStepChanges = new Subject();
        _this.activeStep = _this._activeStepChanges.asObservable();
        return _this;
    }
    StepperService.prototype.resetPanels = function () {
        this.accordion.resetPanels();
        this.emitUpdatedPanels();
    };
    StepperService.prototype.setPanelsWithErrors = function (ids) {
        this.accordion.setPanelsWithErrors(ids);
        this.emitUpdatedPanels();
    };
    StepperService.prototype.navigateToNextPanel = function (currentPanelId, currentPanelValid) {
        if (currentPanelValid === void 0) { currentPanelValid = true; }
        this.accordion.navigateToNextPanel(currentPanelId, currentPanelValid);
        this.updateNextStep(currentPanelId, currentPanelValid);
        this.emitUpdatedPanels();
    };
    StepperService.prototype.overrideInitialPanel = function (panelId) {
        this.accordion.overrideInitialPanel(panelId);
        this.emitUpdatedPanels();
    };
    StepperService.prototype.updateNextStep = function (currentPanelId, currentPanelValid) {
        var nextPanel = this.accordion.getNextPanel(currentPanelId);
        if (currentPanelValid && nextPanel) {
            this._activeStepChanges.next(nextPanel.id);
        }
        else if (currentPanelValid) {
            this._activeStepChanges.next(currentPanelId);
        }
    };
    StepperService.prototype.getAllCompletedPanelChanges = function () {
        var _this = this;
        return this._panelsChanges.pipe(map(function () { return _this.accordion.allPanelsCompleted; }), distinctUntilChanged());
    };
StepperService.ɵfac = function StepperService_Factory(t) { return ɵStepperService_BaseFactory(t || StepperService); };
StepperService.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: StepperService, factory: function (t) { return StepperService.ɵfac(t); } });
var ɵStepperService_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(StepperService);
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(StepperService, [{
        type: Injectable
    }], null, null); })();
    return StepperService;
}(AccordionService));
export { StepperService };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3RlcHBlci5zZXJ2aWNlLmpzIiwic291cmNlcyI6WyJuZzovQGNsci9hbmd1bGFyL2FjY29yZGlvbi9zdGVwcGVyL3Byb3ZpZGVycy9zdGVwcGVyLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzNDLE9BQU8sRUFBRSxHQUFHLEVBQUUsb0JBQW9CLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUMzRCxPQUFPLEVBQWMsT0FBTyxFQUFFLE1BQU0sTUFBTSxDQUFDO0FBRTNDLE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLHFDQUFxQyxDQUFDO0FBQ3ZFLE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSx5QkFBeUIsQ0FBQzs7QUFHdkQ7QUFDQyxJQURtQyxrQ0FBZ0I7QUFBQyxJQUFyRDtBQUE0QixRQUE1QixxRUF5Q0M7QUFDRCxRQXpDVyxxQkFBZSxHQUFHLEtBQUksQ0FBQywyQkFBMkIsRUFBRSxDQUFDO0FBQ2hFLFFBQVksZUFBUyxHQUFHLElBQUksWUFBWSxFQUFFLENBQUM7QUFDM0MsUUFDVSx3QkFBa0IsR0FBRyxJQUFJLE9BQU8sRUFBVSxDQUFDO0FBQ3JELFFBQVcsZ0JBQVUsR0FBRyxLQUFJLENBQUMsa0JBQWtCLENBQUMsWUFBWSxFQUFFLENBQUM7QUFDL0Q7QUFFRyxJQWlDSCxDQUFDO0FBQ0QsSUFuQ0Usb0NBQVcsR0FBWDtBQUFjLFFBQ1osSUFBSSxDQUFDLFNBQVMsQ0FBQyxXQUFXLEVBQUUsQ0FBQztBQUNqQyxRQUFJLElBQUksQ0FBQyxpQkFBaUIsRUFBRSxDQUFDO0FBQzdCLElBQUUsQ0FBQztBQUVILElBQUUsNENBQW1CLEdBQW5CLFVBQW9CLEdBQWE7QUFDbkMsUUFBSSxJQUFJLENBQUMsU0FBUyxDQUFDLG1CQUFtQixDQUFDLEdBQUcsQ0FBQyxDQUFDO0FBQzVDLFFBQUksSUFBSSxDQUFDLGlCQUFpQixFQUFFLENBQUM7QUFDN0IsSUFBRSxDQUFDO0FBRUgsSUFBRSw0Q0FBbUIsR0FBbkIsVUFBb0IsY0FBc0IsRUFBRSxpQkFBd0I7QUFDdEUsUUFEOEMsa0NBQUEsRUFBQSx3QkFBd0I7QUFDdEUsUUFBSSxJQUFJLENBQUMsU0FBUyxDQUFDLG1CQUFtQixDQUFDLGNBQWMsRUFBRSxpQkFBaUIsQ0FBQyxDQUFDO0FBQzFFLFFBQUksSUFBSSxDQUFDLGNBQWMsQ0FBQyxjQUFjLEVBQUUsaUJBQWlCLENBQUMsQ0FBQztBQUMzRCxRQUFJLElBQUksQ0FBQyxpQkFBaUIsRUFBRSxDQUFDO0FBQzdCLElBQUUsQ0FBQztBQUVILElBQUUsNkNBQW9CLEdBQXBCLFVBQXFCLE9BQWU7QUFDdEMsUUFBSSxJQUFJLENBQUMsU0FBUyxDQUFDLG9CQUFvQixDQUFDLE9BQU8sQ0FBQyxDQUFDO0FBQ2pELFFBQUksSUFBSSxDQUFDLGlCQUFpQixFQUFFLENBQUM7QUFDN0IsSUFBRSxDQUFDO0FBRUgsSUFBVSx1Q0FBYyxHQUF0QixVQUF1QixjQUFzQixFQUFFLGlCQUEwQjtBQUMzRSxRQUFJLElBQU0sU0FBUyxHQUFHLElBQUksQ0FBQyxTQUFTLENBQUMsWUFBWSxDQUFDLGNBQWMsQ0FBQyxDQUFDO0FBQ2xFLFFBQ0ksSUFBSSxpQkFBaUIsSUFBSSxTQUFTLEVBQUU7QUFDeEMsWUFBTSxJQUFJLENBQUMsa0JBQWtCLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxFQUFFLENBQUMsQ0FBQztBQUNqRCxTQUFLO0FBQUMsYUFBSyxJQUFJLGlCQUFpQixFQUFFO0FBQ2xDLFlBQU0sSUFBSSxDQUFDLGtCQUFrQixDQUFDLElBQUksQ0FBQyxjQUFjLENBQUMsQ0FBQztBQUNuRCxTQUFLO0FBQ0wsSUFBRSxDQUFDO0FBRUgsSUFBVSxvREFBMkIsR0FBbkM7QUFBYyxRQUFkLGlCQUVDO0FBQ0gsUUFGSSxPQUFPLElBQUksQ0FBQyxjQUFjLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxjQUFNLE9BQUEsS0FBSSxDQUFDLFNBQVMsQ0FBQyxrQkFBa0IsRUFBakMsQ0FBaUMsQ0FBQyxFQUFFLG9CQUFvQixFQUFFLENBQUMsQ0FBQztBQUMxRyxJQUFFLENBQUM7SUF4Q1UsY0FBYyx3QkFEMUIsVUFBVSxFQUFFLFFBQ0EsY0FBYyxDQXlDMUI7Ozs7OzBCQUNEO0FBQUMsSUFERCxxQkFBQztBQUNBLENBREEsQUF6Q0QsQ0FBb0MsZ0JBQWdCLEdBeUNuRDtBQUNELFNBMUNhLGNBQWM7QUFBSSIsInNvdXJjZXNDb250ZW50IjpbIi8qXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTYtMjAxOSBWTXdhcmUsIEluYy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqIFRoaXMgc29mdHdhcmUgaXMgcmVsZWFzZWQgdW5kZXIgTUlUIGxpY2Vuc2UuXG4gKiBUaGUgZnVsbCBsaWNlbnNlIGluZm9ybWF0aW9uIGNhbiBiZSBmb3VuZCBpbiBMSUNFTlNFIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHByb2plY3QuXG4gKi9cblxuaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgbWFwLCBkaXN0aW5jdFVudGlsQ2hhbmdlZCB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcbmltcG9ydCB7IE9ic2VydmFibGUsIFN1YmplY3QgfSBmcm9tICdyeGpzJztcblxuaW1wb3J0IHsgQWNjb3JkaW9uU2VydmljZSB9IGZyb20gJy4vLi4vLi4vcHJvdmlkZXJzL2FjY29yZGlvbi5zZXJ2aWNlJztcbmltcG9ydCB7IFN0ZXBwZXJNb2RlbCB9IGZyb20gJy4uL21vZGVscy9zdGVwcGVyLm1vZGVsJztcblxuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIFN0ZXBwZXJTZXJ2aWNlIGV4dGVuZHMgQWNjb3JkaW9uU2VydmljZSB7XG4gIHJlYWRvbmx5IHBhbmVsc0NvbXBsZXRlZCA9IHRoaXMuZ2V0QWxsQ29tcGxldGVkUGFuZWxDaGFuZ2VzKCk7XG4gIHByb3RlY3RlZCBhY2NvcmRpb24gPSBuZXcgU3RlcHBlck1vZGVsKCk7XG5cbiAgcHJpdmF0ZSBfYWN0aXZlU3RlcENoYW5nZXMgPSBuZXcgU3ViamVjdDxzdHJpbmc+KCk7XG4gIHJlYWRvbmx5IGFjdGl2ZVN0ZXAgPSB0aGlzLl9hY3RpdmVTdGVwQ2hhbmdlcy5hc09ic2VydmFibGUoKTtcblxuICByZXNldFBhbmVscygpIHtcbiAgICB0aGlzLmFjY29yZGlvbi5yZXNldFBhbmVscygpO1xuICAgIHRoaXMuZW1pdFVwZGF0ZWRQYW5lbHMoKTtcbiAgfVxuXG4gIHNldFBhbmVsc1dpdGhFcnJvcnMoaWRzOiBzdHJpbmdbXSkge1xuICAgIHRoaXMuYWNjb3JkaW9uLnNldFBhbmVsc1dpdGhFcnJvcnMoaWRzKTtcbiAgICB0aGlzLmVtaXRVcGRhdGVkUGFuZWxzKCk7XG4gIH1cblxuICBuYXZpZ2F0ZVRvTmV4dFBhbmVsKGN1cnJlbnRQYW5lbElkOiBzdHJpbmcsIGN1cnJlbnRQYW5lbFZhbGlkID0gdHJ1ZSkge1xuICAgIHRoaXMuYWNjb3JkaW9uLm5hdmlnYXRlVG9OZXh0UGFuZWwoY3VycmVudFBhbmVsSWQsIGN1cnJlbnRQYW5lbFZhbGlkKTtcbiAgICB0aGlzLnVwZGF0ZU5leHRTdGVwKGN1cnJlbnRQYW5lbElkLCBjdXJyZW50UGFuZWxWYWxpZCk7XG4gICAgdGhpcy5lbWl0VXBkYXRlZFBhbmVscygpO1xuICB9XG5cbiAgb3ZlcnJpZGVJbml0aWFsUGFuZWwocGFuZWxJZDogc3RyaW5nKSB7XG4gICAgdGhpcy5hY2NvcmRpb24ub3ZlcnJpZGVJbml0aWFsUGFuZWwocGFuZWxJZCk7XG4gICAgdGhpcy5lbWl0VXBkYXRlZFBhbmVscygpO1xuICB9XG5cbiAgcHJpdmF0ZSB1cGRhdGVOZXh0U3RlcChjdXJyZW50UGFuZWxJZDogc3RyaW5nLCBjdXJyZW50UGFuZWxWYWxpZDogYm9vbGVhbikge1xuICAgIGNvbnN0IG5leHRQYW5lbCA9IHRoaXMuYWNjb3JkaW9uLmdldE5leHRQYW5lbChjdXJyZW50UGFuZWxJZCk7XG5cbiAgICBpZiAoY3VycmVudFBhbmVsVmFsaWQgJiYgbmV4dFBhbmVsKSB7XG4gICAgICB0aGlzLl9hY3RpdmVTdGVwQ2hhbmdlcy5uZXh0KG5leHRQYW5lbC5pZCk7XG4gICAgfSBlbHNlIGlmIChjdXJyZW50UGFuZWxWYWxpZCkge1xuICAgICAgdGhpcy5fYWN0aXZlU3RlcENoYW5nZXMubmV4dChjdXJyZW50UGFuZWxJZCk7XG4gICAgfVxuICB9XG5cbiAgcHJpdmF0ZSBnZXRBbGxDb21wbGV0ZWRQYW5lbENoYW5nZXMoKTogT2JzZXJ2YWJsZTxib29sZWFuPiB7XG4gICAgcmV0dXJuIHRoaXMuX3BhbmVsc0NoYW5nZXMucGlwZShtYXAoKCkgPT4gdGhpcy5hY2NvcmRpb24uYWxsUGFuZWxzQ29tcGxldGVkKSwgZGlzdGluY3RVbnRpbENoYW5nZWQoKSk7XG4gIH1cbn1cbiJdfQ==