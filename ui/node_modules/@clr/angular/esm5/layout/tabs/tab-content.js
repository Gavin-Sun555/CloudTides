import { __decorate, __param } from "tslib";
/*
 * Copyright (c) 2016-2019 VMware, Inc. All Rights Reserved.
 * This software is released under MIT license.
 * The full license information can be found in LICENSE in the root directory of this project.
 */
import { Component, Inject, Input, ViewChild } from '@angular/core';
import { IF_ACTIVE_ID, IfActiveService } from '../../utils/conditional/if-active.service';
import { AriaService } from './providers/aria.service';
import { TabsService } from './providers/tabs.service';
import * as ɵngcc0 from '@angular/core';

var _c0 = ["tabContentProjectedRef"];
function ClrTabContent_ng_template_0_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "section", 1);
    ɵngcc0.ɵɵprojection(1);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    var ctx_r1 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵclassProp("active", ctx_r1.active);
    ɵngcc0.ɵɵproperty("id", ctx_r1.tabContentId)("hidden", !ctx_r1.active);
    ɵngcc0.ɵɵattribute("aria-labelledby", ctx_r1.ariaLabelledBy)("aria-expanded", ctx_r1.active)("aria-hidden", !ctx_r1.active);
} }
var _c1 = ["*"];
var nbTabContentComponents = 0;
var ClrTabContent = /** @class */ (function () {
    function ClrTabContent(ifActiveService, id, ariaService, tabsService) {
        this.ifActiveService = ifActiveService;
        this.id = id;
        this.ariaService = ariaService;
        this.tabsService = tabsService;
        if (!this.tabContentId) {
            this.tabContentId = 'clr-tab-content-' + nbTabContentComponents++;
        }
    }
    Object.defineProperty(ClrTabContent.prototype, "templateRef", {
        // The template must be applied on the top-down phase of view-child initialization to prevent
        // components in the content from initializing before a content container exists.
        // Some child components need their container for sizing calculations.
        /* tslint:disable:no-unused-variable */
        set: function (value) {
            this.viewRef = this.tabsService.tabContentViewContainer.createEmbeddedView(value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ClrTabContent.prototype, "ariaLabelledBy", {
        /* tslint:enable:no-unused-variable */
        get: function () {
            return this.ariaService.ariaLabelledBy;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ClrTabContent.prototype, "tabContentId", {
        get: function () {
            return this.ariaService.ariaControls;
        },
        set: function (id) {
            this.ariaService.ariaControls = id;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ClrTabContent.prototype, "active", {
        get: function () {
            return this.ifActiveService.current === this.id;
        },
        enumerable: true,
        configurable: true
    });
    ClrTabContent.prototype.ngOnDestroy = function () {
        var index = this.tabsService.tabContentViewContainer.indexOf(this.viewRef);
        if (index > -1) {
            this.tabsService.tabContentViewContainer.remove(index);
        }
    };
    ClrTabContent.ctorParameters = function () { return [
        { type: IfActiveService },
        { type: Number, decorators: [{ type: Inject, args: [IF_ACTIVE_ID,] }] },
        { type: AriaService },
        { type: TabsService }
    ]; };
    __decorate([
        ViewChild('tabContentProjectedRef', { static: true })
    ], ClrTabContent.prototype, "templateRef", null);
    __decorate([
        Input('id')
    ], ClrTabContent.prototype, "tabContentId", null);
    ClrTabContent = __decorate([ __param(1, Inject(IF_ACTIVE_ID))
    ], ClrTabContent);
ClrTabContent.ɵfac = function ClrTabContent_Factory(t) { return new (t || ClrTabContent)(ɵngcc0.ɵɵdirectiveInject(IfActiveService), ɵngcc0.ɵɵdirectiveInject(IF_ACTIVE_ID), ɵngcc0.ɵɵdirectiveInject(AriaService), ɵngcc0.ɵɵdirectiveInject(TabsService)); };
ClrTabContent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: ClrTabContent, selectors: [["clr-tab-content"]], viewQuery: function ClrTabContent_Query(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵstaticViewQuery(_c0, true);
    } if (rf & 2) {
        var _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.templateRef = _t.first);
    } }, inputs: { tabContentId: ["id", "tabContentId"] }, ngContentSelectors: _c1, decls: 2, vars: 0, consts: [["tabContentProjectedRef", ""], ["role", "tabpanel", 1, "tab-content", 3, "id", "hidden"]], template: function ClrTabContent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵtemplate(0, ClrTabContent_ng_template_0_Template, 2, 7, "ng-template", null, 0, ɵngcc0.ɵɵtemplateRefExtractor);
    } }, encapsulation: 2 });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ClrTabContent, [{
        type: Component,
        args: [{
                selector: 'clr-tab-content',
                template: "\n    <ng-template #tabContentProjectedRef>\n      <section [id]=\"tabContentId\" role=\"tabpanel\" class=\"tab-content\" [class.active]=\"active\"\n               [hidden]=\"!active\"\n               [attr.aria-labelledby]=\"ariaLabelledBy\"\n               [attr.aria-expanded]=\"active\"\n               [attr.aria-hidden]=\"!active\">\n        <ng-content></ng-content>\n      </section>\n    </ng-template>\n    "
            }]
    }], function () { return [{ type: IfActiveService }, { type: Number, decorators: [{
                type: Inject,
                args: [IF_ACTIVE_ID]
            }] }, { type: AriaService }, { type: TabsService }]; }, { tabContentId: [{
            type: Input,
            args: ['id']
        }], templateRef: [{
            type: ViewChild,
            args: ['tabContentProjectedRef', { static: true }]
        }] }); })();
    return ClrTabContent;
}());
export { ClrTabContent };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGFiLWNvbnRlbnQuanMiLCJzb3VyY2VzIjpbIm5nOi9AY2xyL2FuZ3VsYXIvbGF5b3V0L3RhYnMvdGFiLWNvbnRlbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNILE9BQU8sRUFBRSxTQUFTLEVBQW1CLE1BQU0sRUFBRSxLQUFLLEVBQTBCLFNBQVMsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUM3RyxPQUFPLEVBQUUsWUFBWSxFQUFFLGVBQWUsRUFBRSxNQUFNLDJDQUEyQyxDQUFDO0FBQzFGLE9BQU8sRUFBRSxXQUFXLEVBQUUsTUFBTSwwQkFBMEIsQ0FBQztBQUN2RCxPQUFPLEVBQUUsV0FBVyxFQUFFLE1BQU0sMEJBQTBCLENBQUM7Ozs7Ozs7Ozs7Ozs7OztBQUV2RCxJQUFJLHNCQUFzQixHQUFXLENBQUMsQ0FBQztBQWdCdkM7QUFBaUQsSUFDL0MsdUJBQ1MsZUFBZ0MsRUFDVixFQUFVLEVBQy9CLFdBQXdCLEVBQ3hCLFdBQXdCO0FBQ2pDLFFBSlEsb0JBQWUsR0FBZixlQUFlLENBQWlCO0FBQUMsUUFDWCxPQUFFLEdBQUYsRUFBRSxDQUFRO0FBQUMsUUFDaEMsZ0JBQVcsR0FBWCxXQUFXLENBQWE7QUFBQyxRQUN6QixnQkFBVyxHQUFYLFdBQVcsQ0FBYTtBQUNwQyxRQUNJLElBQUksQ0FBQyxJQUFJLENBQUMsWUFBWSxFQUFFO0FBQzVCLFlBQU0sSUFBSSxDQUFDLFlBQVksR0FBRyxrQkFBa0IsR0FBRyxzQkFBc0IsRUFBRSxDQUFDO0FBQ3hFLFNBQUs7QUFDTCxJQUFFLENBQUM7QUFDSCxJQVFFLHNCQUFZLHNDQUFXO0FBQUksUUFMM0IsNkZBQTZGO0FBQy9GLFFBQUUsaUZBQWlGO0FBQ25GLFFBQUUsc0VBQXNFO0FBQ3hFLFFBQUUsdUNBQXVDO0FBQ3pDLGFBQ0UsVUFBd0IsS0FBaUM7QUFDM0QsWUFBSSxJQUFJLENBQUMsT0FBTyxHQUFHLElBQUksQ0FBQyxXQUFXLENBQUMsdUJBQXVCLENBQUMsa0JBQWtCLENBQUMsS0FBSyxDQUFDLENBQUM7QUFDdEYsUUFBRSxDQUFDO0FBQ0Y7QUFBMEI7QUFFZixPQUhUO0FBQ0gsSUFFRSxzQkFBSSx5Q0FBYztBQUFJLFFBRnRCLHNDQUFzQztBQUN4QyxhQUNFO0FBQWMsWUFDWixPQUFPLElBQUksQ0FBQyxXQUFXLENBQUMsY0FBYyxDQUFDO0FBQzNDLFFBQUUsQ0FBQztBQUVIO0FBQTBCO0FBQ0osT0FIbkI7QUFDSCxJQUNFLHNCQUFJLHVDQUFZO0FBQUksYUFBcEI7QUFBYyxZQUNaLE9BQU8sSUFBSSxDQUFDLFdBQVcsQ0FBQyxZQUFZLENBQUM7QUFDekMsUUFBRSxDQUFDO0FBRUgsYUFDRSxVQUFpQixFQUFVO0FBQzdCLFlBQUksSUFBSSxDQUFDLFdBQVcsQ0FBQyxZQUFZLEdBQUcsRUFBRSxDQUFDO0FBQ3ZDLFFBQUUsQ0FBQztBQUVIO0FBQ1M7QUFBMkIsT0FSakM7QUFDSCxJQU1FLHNCQUFJLGlDQUFNO0FBQUksYUFBZDtBQUFjLFlBQ1osT0FBTyxJQUFJLENBQUMsZUFBZSxDQUFDLE9BQU8sS0FBSyxJQUFJLENBQUMsRUFBRSxDQUFDO0FBQ3BELFFBQUUsQ0FBQztBQUVIO0FBQ0U7QUFBMkIsT0FIMUI7QUFDSCxJQUNFLG1DQUFXLEdBQVg7QUFBYyxRQUNaLElBQU0sS0FBSyxHQUFHLElBQUksQ0FBQyxXQUFXLENBQUMsdUJBQXVCLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQztBQUNqRixRQUFJLElBQUksS0FBSyxHQUFHLENBQUMsQ0FBQyxFQUFFO0FBQ3BCLFlBQU0sSUFBSSxDQUFDLFdBQVcsQ0FBQyx1QkFBdUIsQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUM7QUFDN0QsU0FBSztBQUNMLElBQUUsQ0FBQztBQUNGO0FBQ3dELGdCQTlDN0IsZUFBZTtBQUN6Qyw2Q0FBRyxNQUFNLFNBQUMsWUFBWTtBQUFTLGdCQUNSLFdBQVc7QUFDbEMsZ0JBQXVCLFdBQVc7QUFDbEM7QUFDSSxJQVlKO0FBQWEsUUFEWixTQUFTLENBQUMsd0JBQXdCLEVBQUUsRUFBRSxNQUFNLEVBQUUsSUFBSSxFQUFFLENBQUM7QUFDeEQsb0RBRUc7QUFDRixJQVdDO0FBQWEsUUFEWixLQUFLLENBQUMsSUFBSSxDQUFDO0FBQ2QscURBRUc7QUFFSCxJQXJDYSxhQUFhLHdCQWR6QixTQUFTLENBQUMsY0FDVCxqQ0FhTSxDQUdILFdBQUEsTUFBTSxDQUFDLFlBQVksQ0FBQyxDQUFBO09BaEJmLEVBQUUsVEFnQmMsT0FIYixhQUFhLENBK0N6QjtHQTVENEIsY0FDM0IsUUFBUSxFQUFFOzt3QkFVUCxVQUNKLENBQUM7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O29CQWlERjtBQUFDLElBREQsb0JBQUM7QUFDQSxDQURBLEFBL0NELElBK0NDO0FBQ0QsU0FoRGEsYUFBYTtBQUFJIiwic291cmNlc0NvbnRlbnQiOlsiLypcbiAqIENvcHlyaWdodCAoYykgMjAxNi0yMDE5IFZNd2FyZSwgSW5jLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICogVGhpcyBzb2Z0d2FyZSBpcyByZWxlYXNlZCB1bmRlciBNSVQgbGljZW5zZS5cbiAqIFRoZSBmdWxsIGxpY2Vuc2UgaW5mb3JtYXRpb24gY2FuIGJlIGZvdW5kIGluIExJQ0VOU0UgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgcHJvamVjdC5cbiAqL1xuaW1wb3J0IHsgQ29tcG9uZW50LCBFbWJlZGRlZFZpZXdSZWYsIEluamVjdCwgSW5wdXQsIE9uRGVzdHJveSwgVGVtcGxhdGVSZWYsIFZpZXdDaGlsZCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgSUZfQUNUSVZFX0lELCBJZkFjdGl2ZVNlcnZpY2UgfSBmcm9tICcuLi8uLi91dGlscy9jb25kaXRpb25hbC9pZi1hY3RpdmUuc2VydmljZSc7XG5pbXBvcnQgeyBBcmlhU2VydmljZSB9IGZyb20gJy4vcHJvdmlkZXJzL2FyaWEuc2VydmljZSc7XG5pbXBvcnQgeyBUYWJzU2VydmljZSB9IGZyb20gJy4vcHJvdmlkZXJzL3RhYnMuc2VydmljZSc7XG5cbmxldCBuYlRhYkNvbnRlbnRDb21wb25lbnRzOiBudW1iZXIgPSAwO1xuXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICdjbHItdGFiLWNvbnRlbnQnLFxuICB0ZW1wbGF0ZTogYFxuICAgIDxuZy10ZW1wbGF0ZSAjdGFiQ29udGVudFByb2plY3RlZFJlZj5cbiAgICAgIDxzZWN0aW9uIFtpZF09XCJ0YWJDb250ZW50SWRcIiByb2xlPVwidGFicGFuZWxcIiBjbGFzcz1cInRhYi1jb250ZW50XCIgW2NsYXNzLmFjdGl2ZV09XCJhY3RpdmVcIlxuICAgICAgICAgICAgICAgW2hpZGRlbl09XCIhYWN0aXZlXCJcbiAgICAgICAgICAgICAgIFthdHRyLmFyaWEtbGFiZWxsZWRieV09XCJhcmlhTGFiZWxsZWRCeVwiXG4gICAgICAgICAgICAgICBbYXR0ci5hcmlhLWV4cGFuZGVkXT1cImFjdGl2ZVwiXG4gICAgICAgICAgICAgICBbYXR0ci5hcmlhLWhpZGRlbl09XCIhYWN0aXZlXCI+XG4gICAgICAgIDxuZy1jb250ZW50PjwvbmctY29udGVudD5cbiAgICAgIDwvc2VjdGlvbj5cbiAgICA8L25nLXRlbXBsYXRlPlxuICAgIGAsXG59KVxuZXhwb3J0IGNsYXNzIENsclRhYkNvbnRlbnQgaW1wbGVtZW50cyBPbkRlc3Ryb3kge1xuICBjb25zdHJ1Y3RvcihcbiAgICBwdWJsaWMgaWZBY3RpdmVTZXJ2aWNlOiBJZkFjdGl2ZVNlcnZpY2UsXG4gICAgQEluamVjdChJRl9BQ1RJVkVfSUQpIHB1YmxpYyBpZDogbnVtYmVyLFxuICAgIHByaXZhdGUgYXJpYVNlcnZpY2U6IEFyaWFTZXJ2aWNlLFxuICAgIHByaXZhdGUgdGFic1NlcnZpY2U6IFRhYnNTZXJ2aWNlXG4gICkge1xuICAgIGlmICghdGhpcy50YWJDb250ZW50SWQpIHtcbiAgICAgIHRoaXMudGFiQ29udGVudElkID0gJ2Nsci10YWItY29udGVudC0nICsgbmJUYWJDb250ZW50Q29tcG9uZW50cysrO1xuICAgIH1cbiAgfVxuXG4gIHByaXZhdGUgdmlld1JlZjogRW1iZWRkZWRWaWV3UmVmPENsclRhYkNvbnRlbnQ+O1xuXG4gIC8vIFRoZSB0ZW1wbGF0ZSBtdXN0IGJlIGFwcGxpZWQgb24gdGhlIHRvcC1kb3duIHBoYXNlIG9mIHZpZXctY2hpbGQgaW5pdGlhbGl6YXRpb24gdG8gcHJldmVudFxuICAvLyBjb21wb25lbnRzIGluIHRoZSBjb250ZW50IGZyb20gaW5pdGlhbGl6aW5nIGJlZm9yZSBhIGNvbnRlbnQgY29udGFpbmVyIGV4aXN0cy5cbiAgLy8gU29tZSBjaGlsZCBjb21wb25lbnRzIG5lZWQgdGhlaXIgY29udGFpbmVyIGZvciBzaXppbmcgY2FsY3VsYXRpb25zLlxuICAvKiB0c2xpbnQ6ZGlzYWJsZTpuby11bnVzZWQtdmFyaWFibGUgKi9cbiAgQFZpZXdDaGlsZCgndGFiQ29udGVudFByb2plY3RlZFJlZicsIHsgc3RhdGljOiB0cnVlIH0pXG4gIHByaXZhdGUgc2V0IHRlbXBsYXRlUmVmKHZhbHVlOiBUZW1wbGF0ZVJlZjxDbHJUYWJDb250ZW50Pikge1xuICAgIHRoaXMudmlld1JlZiA9IHRoaXMudGFic1NlcnZpY2UudGFiQ29udGVudFZpZXdDb250YWluZXIuY3JlYXRlRW1iZWRkZWRWaWV3KHZhbHVlKTtcbiAgfVxuICAvKiB0c2xpbnQ6ZW5hYmxlOm5vLXVudXNlZC12YXJpYWJsZSAqL1xuXG4gIGdldCBhcmlhTGFiZWxsZWRCeSgpOiBzdHJpbmcge1xuICAgIHJldHVybiB0aGlzLmFyaWFTZXJ2aWNlLmFyaWFMYWJlbGxlZEJ5O1xuICB9XG5cbiAgZ2V0IHRhYkNvbnRlbnRJZCgpOiBzdHJpbmcge1xuICAgIHJldHVybiB0aGlzLmFyaWFTZXJ2aWNlLmFyaWFDb250cm9scztcbiAgfVxuXG4gIEBJbnB1dCgnaWQnKVxuICBzZXQgdGFiQ29udGVudElkKGlkOiBzdHJpbmcpIHtcbiAgICB0aGlzLmFyaWFTZXJ2aWNlLmFyaWFDb250cm9scyA9IGlkO1xuICB9XG5cbiAgZ2V0IGFjdGl2ZSgpIHtcbiAgICByZXR1cm4gdGhpcy5pZkFjdGl2ZVNlcnZpY2UuY3VycmVudCA9PT0gdGhpcy5pZDtcbiAgfVxuXG4gIG5nT25EZXN0cm95KCk6IHZvaWQge1xuICAgIGNvbnN0IGluZGV4ID0gdGhpcy50YWJzU2VydmljZS50YWJDb250ZW50Vmlld0NvbnRhaW5lci5pbmRleE9mKHRoaXMudmlld1JlZik7XG4gICAgaWYgKGluZGV4ID4gLTEpIHtcbiAgICAgIHRoaXMudGFic1NlcnZpY2UudGFiQ29udGVudFZpZXdDb250YWluZXIucmVtb3ZlKGluZGV4KTtcbiAgICB9XG4gIH1cbn1cbiJdfQ==