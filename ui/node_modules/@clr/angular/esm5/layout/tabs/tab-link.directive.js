import { __decorate, __param } from "tslib";
/*
 * Copyright (c) 2016-2020 VMware, Inc. All Rights Reserved.
 * This software is released under MIT license.
 * The full license information can be found in LICENSE in the root directory of this project.
 */
import { ComponentFactoryResolver, Directive, ElementRef, HostBinding, HostListener, Inject, Input, ViewContainerRef, } from '@angular/core';
import { IF_ACTIVE_ID, IfActiveService } from '../../utils/conditional/if-active.service';
import { TemplateRefContainer } from '../../utils/template-ref/template-ref-container';
import { TabsService } from './providers/tabs.service';
import { AriaService } from './providers/aria.service';
import { TABS_ID } from './tabs-id.provider';
import { TabsLayout } from './enums/tabs-layout.enum';
import * as ɵngcc0 from '@angular/core';
var nbTabLinkComponents = 0;
var ClrTabLink = /** @class */ (function () {
    function ClrTabLink(ifActiveService, id, ariaService, el, cfr, viewContainerRef, tabsService, tabsId) {
        this.ifActiveService = ifActiveService;
        this.id = id;
        this.ariaService = ariaService;
        this.el = el;
        this.cfr = cfr;
        this.viewContainerRef = viewContainerRef;
        this.tabsService = tabsService;
        this.tabsId = tabsId;
        if (!this.tabLinkId) {
            this.tabLinkId = 'clr-tab-link-' + nbTabLinkComponents++;
        }
        // Tab links can be rendered in one of two places: in the main area or inside the overflow dropdown menu.
        // Here, we create a container so that its template can be used to create embeddedView on the fly.
        // See TabsService's renderView() method and how it's used in Tabs class for an example.
        var factory = this.cfr.resolveComponentFactory(TemplateRefContainer);
        this.templateRefContainer = this.viewContainerRef.createComponent(factory, undefined, undefined, [
            [this.el.nativeElement],
        ]).instance;
    }
    Object.defineProperty(ClrTabLink.prototype, "inOverflow", {
        get: function () {
            return this._inOverflow && this.tabsService.layout !== TabsLayout.VERTICAL;
        },
        set: function (inOverflow) {
            this._inOverflow = inOverflow;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ClrTabLink.prototype, "addLinkClasses", {
        get: function () {
            return !this.inOverflow;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ClrTabLink.prototype, "ariaControls", {
        get: function () {
            return this.ariaService.ariaControls;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ClrTabLink.prototype, "tabLinkId", {
        get: function () {
            return this.ariaService.ariaLabelledBy;
        },
        set: function (id) {
            this.ariaService.ariaLabelledBy = id;
        },
        enumerable: true,
        configurable: true
    });
    ClrTabLink.prototype.activate = function () {
        this.ifActiveService.current = this.id;
    };
    Object.defineProperty(ClrTabLink.prototype, "active", {
        get: function () {
            return this.ifActiveService.current === this.id;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ClrTabLink.prototype, "tabindex", {
        get: function () {
            return this.active ? 0 : -1;
        },
        enumerable: true,
        configurable: true
    });
    ClrTabLink.ctorParameters = function () { return [
        { type: IfActiveService },
        { type: Number, decorators: [{ type: Inject, args: [IF_ACTIVE_ID,] }] },
        { type: AriaService },
        { type: ElementRef },
        { type: ComponentFactoryResolver },
        { type: ViewContainerRef },
        { type: TabsService },
        { type: Number, decorators: [{ type: Inject, args: [TABS_ID,] }] }
    ]; };
    __decorate([
        Input('clrTabLinkInOverflow')
    ], ClrTabLink.prototype, "inOverflow", null);
    __decorate([
        HostBinding('class.btn-link'),
        HostBinding('class.nav-link')
    ], ClrTabLink.prototype, "addLinkClasses", null);
    __decorate([
        HostBinding('attr.aria-controls')
    ], ClrTabLink.prototype, "ariaControls", null);
    __decorate([
        HostBinding('id'),
        Input('id')
    ], ClrTabLink.prototype, "tabLinkId", null);
    __decorate([
        HostListener('click')
    ], ClrTabLink.prototype, "activate", null);
    __decorate([
        HostBinding('class.active'),
        HostBinding('attr.aria-selected')
    ], ClrTabLink.prototype, "active", null);
    __decorate([
        HostBinding('attr.tabindex')
    ], ClrTabLink.prototype, "tabindex", null);
    ClrTabLink = __decorate([ __param(1, Inject(IF_ACTIVE_ID)),
        __param(7, Inject(TABS_ID))
    ], ClrTabLink);
ClrTabLink.ɵfac = function ClrTabLink_Factory(t) { return new (t || ClrTabLink)(ɵngcc0.ɵɵdirectiveInject(IfActiveService), ɵngcc0.ɵɵdirectiveInject(IF_ACTIVE_ID), ɵngcc0.ɵɵdirectiveInject(AriaService), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ComponentFactoryResolver), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef), ɵngcc0.ɵɵdirectiveInject(TabsService), ɵngcc0.ɵɵdirectiveInject(TABS_ID)); };
ClrTabLink.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: ClrTabLink, selectors: [["", "clrTabLink", ""]], hostAttrs: ["role", "tab", "type", "button"], hostVars: 13, hostBindings: function ClrTabLink_HostBindings(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵlistener("click", function ClrTabLink_click_HostBindingHandler() { return ctx.activate(); });
    } if (rf & 2) {
        ɵngcc0.ɵɵhostProperty("id", ctx.tabLinkId);
        ɵngcc0.ɵɵattribute("aria-hidden", false)("aria-controls", ctx.ariaControls)("aria-selected", ctx.active)("tabindex", ctx.tabindex);
        ɵngcc0.ɵɵclassProp("btn", true)("btn-link", ctx.addLinkClasses)("nav-link", ctx.addLinkClasses)("active", ctx.active);
    } }, inputs: { tabLinkId: ["id", "tabLinkId"], inOverflow: ["clrTabLinkInOverflow", "inOverflow"] } });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ClrTabLink, [{
        type: Directive,
        args: [{
                selector: '[clrTabLink]',
                host: {
                    '[attr.aria-hidden]': 'false',
                    '[class.btn]': 'true',
                    role: 'tab',
                    type: 'button'
                }
            }]
    }], function () { return [{ type: IfActiveService }, { type: Number, decorators: [{
                type: Inject,
                args: [IF_ACTIVE_ID]
            }] }, { type: AriaService }, { type: ɵngcc0.ElementRef }, { type: ɵngcc0.ComponentFactoryResolver }, { type: ɵngcc0.ViewContainerRef }, { type: TabsService }, { type: Number, decorators: [{
                type: Inject,
                args: [TABS_ID]
            }] }]; }, { tabLinkId: [{
            type: HostBinding,
            args: ['id']
        }, {
            type: Input,
            args: ['id']
        }], inOverflow: [{
            type: Input,
            args: ['clrTabLinkInOverflow']
        }], addLinkClasses: [{
            type: HostBinding,
            args: ['class.btn-link']
        }, {
            type: HostBinding,
            args: ['class.nav-link']
        }], ariaControls: [{
            type: HostBinding,
            args: ['attr.aria-controls']
        }], activate: [{
            type: HostListener,
            args: ['click']
        }], active: [{
            type: HostBinding,
            args: ['class.active']
        }, {
            type: HostBinding,
            args: ['attr.aria-selected']
        }], tabindex: [{
            type: HostBinding,
            args: ['attr.tabindex']
        }] }); })();
    return ClrTabLink;
}());
export { ClrTabLink };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,