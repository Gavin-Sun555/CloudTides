import { __decorate, __param } from "tslib";
/*
 * Copyright (c) 2016-2020 VMware, Inc. All Rights Reserved.
 * This software is released under MIT license.
 * The full license information can be found in LICENSE in the root directory of this project.
 */
import { Component, ContentChildren, ElementRef, Inject, Input, ViewChild, ViewContainerRef, HostBinding, } from '@angular/core';
import { startWith } from 'rxjs/operators';
import { IfActiveService } from '../../utils/conditional/if-active.service';
import { ClrKeyFocus } from '../../utils/focus/key-focus/key-focus';
import { ClrCommonStringsService } from '../../utils/i18n/common-strings.service';
import { ClrPopoverToggleService } from '../../utils/popover/providers/popover-toggle.service';
import { TabsLayout } from './enums/tabs-layout.enum';
import { TabsService } from './providers/tabs.service';
import { ClrTab } from './tab';
import { TABS_ID, TABS_ID_PROVIDER } from './tabs-id.provider';
import { ClrTabOverflowContent } from './tab-overflow-content';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '../../utils/focus/key-focus/key-focus';
import * as ɵngcc2 from '@angular/common';
import * as ɵngcc3 from '../../icon/icon';
import * as ɵngcc4 from './tab-overflow-content';

var _c0 = ["tabContentViewContainer"];
function ClrTabs_ng_container_1_ng_container_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainerStart(0);
    ɵngcc0.ɵɵelementStart(1, "li", 4);
    ɵngcc0.ɵɵelementContainer(2, 5);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementContainerEnd();
} if (rf & 2) {
    var link_r3 = ɵngcc0.ɵɵnextContext().$implicit;
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("ngTemplateOutlet", link_r3.templateRefContainer.template);
} }
function ClrTabs_ng_container_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainerStart(0);
    ɵngcc0.ɵɵtemplate(1, ClrTabs_ng_container_1_ng_container_1_Template, 3, 1, "ng-container", 2);
    ɵngcc0.ɵɵelementContainerEnd();
} if (rf & 2) {
    var link_r3 = ctx.$implicit;
    var ctx_r0 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", link_r3.tabsId === ctx_r0.tabsId && !link_r3.inOverflow);
} }
function ClrTabs_ng_container_2_clr_tab_overflow_content_6_ng_container_1_ng_container_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainer(0, 5);
} if (rf & 2) {
    var link_r9 = ɵngcc0.ɵɵnextContext().$implicit;
    ɵngcc0.ɵɵproperty("ngTemplateOutlet", link_r9.templateRefContainer.template);
} }
function ClrTabs_ng_container_2_clr_tab_overflow_content_6_ng_container_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainerStart(0);
    ɵngcc0.ɵɵtemplate(1, ClrTabs_ng_container_2_clr_tab_overflow_content_6_ng_container_1_ng_container_1_Template, 1, 1, "ng-container", 13);
    ɵngcc0.ɵɵelementContainerEnd();
} if (rf & 2) {
    var link_r9 = ctx.$implicit;
    var ctx_r8 = ɵngcc0.ɵɵnextContext(3);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", link_r9.tabsId === ctx_r8.tabsId && link_r9.inOverflow);
} }
function ClrTabs_ng_container_2_clr_tab_overflow_content_6_Template(rf, ctx) { if (rf & 1) {
    var _r13 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "clr-tab-overflow-content", 12);
    ɵngcc0.ɵɵlistener("keydown.esc", function ClrTabs_ng_container_2_clr_tab_overflow_content_6_Template_clr_tab_overflow_content_keydown_esc_0_listener() { ɵngcc0.ɵɵrestoreView(_r13); var ctx_r12 = ɵngcc0.ɵɵnextContext(2); return ctx_r12.closeOnEscapeKey(); }, false, ɵngcc0.ɵɵresolveDocument)("click", function ClrTabs_ng_container_2_clr_tab_overflow_content_6_Template_clr_tab_overflow_content_click_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r13); ɵngcc0.ɵɵnextContext(); var _r6 = ɵngcc0.ɵɵreference(4); var ctx_r14 = ɵngcc0.ɵɵnextContext(); return ctx_r14.closeOnOutsideClick($event, _r6); }, false, ɵngcc0.ɵɵresolveDocument)("focusout", function ClrTabs_ng_container_2_clr_tab_overflow_content_6_Template_clr_tab_overflow_content_focusout_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r13); var ctx_r15 = ɵngcc0.ɵɵnextContext(2); return ctx_r15.closeOnFocusOut($event); });
    ɵngcc0.ɵɵtemplate(1, ClrTabs_ng_container_2_clr_tab_overflow_content_6_ng_container_1_Template, 2, 1, "ng-container", 1);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    var ctx_r7 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngForOf", ctx_r7.tabLinkDirectives);
} }
function ClrTabs_ng_container_2_Template(rf, ctx) { if (rf & 1) {
    var _r17 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementContainerStart(0);
    ɵngcc0.ɵɵelementStart(1, "div", 6);
    ɵngcc0.ɵɵelementStart(2, "li", 7);
    ɵngcc0.ɵɵelementStart(3, "button", 8, 9);
    ɵngcc0.ɵɵlistener("mousedown", function ClrTabs_ng_container_2_Template_button_mousedown_3_listener() { ɵngcc0.ɵɵrestoreView(_r17); var ctx_r16 = ɵngcc0.ɵɵnextContext(); return ctx_r16._mousedown = true; })("focus", function ClrTabs_ng_container_2_Template_button_focus_3_listener() { ɵngcc0.ɵɵrestoreView(_r17); var ctx_r18 = ɵngcc0.ɵɵnextContext(); return ctx_r18.openOverflowOnFocus(); })("click", function ClrTabs_ng_container_2_Template_button_click_3_listener() { ɵngcc0.ɵɵrestoreView(_r17); var ctx_r19 = ɵngcc0.ɵɵnextContext(); return ctx_r19.toggleOverflowOnClick(); });
    ɵngcc0.ɵɵelement(5, "clr-icon", 10);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵtemplate(6, ClrTabs_ng_container_2_clr_tab_overflow_content_6_Template, 2, 1, "clr-tab-overflow-content", 11);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementContainerEnd();
} if (rf & 2) {
    var ctx_r1 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵclassProp("open", ctx_r1.toggleService.open);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵclassProp("active", ctx_r1.activeTabInOverflow)("open", ctx_r1.toggleService.open);
    ɵngcc0.ɵɵattribute("tabindex", ctx_r1.activeTabInOverflow && !ctx_r1.toggleService.open ? 0 : 0 - 1);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵclassProp("is-info", ctx_r1.toggleService.open);
    ɵngcc0.ɵɵattribute("title", ctx_r1.commonStrings.keys.more);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r1.toggleService.open);
} }
var ClrTabs = /** @class */ (function () {
    function ClrTabs(ifActiveService, toggleService, tabsService, tabsId, commonStrings) {
        this.ifActiveService = ifActiveService;
        this.toggleService = toggleService;
        this.tabsService = tabsService;
        this.tabsId = tabsId;
        this.commonStrings = commonStrings;
        this.subscriptions = [];
        this._tabLinkDirectives = [];
        this.tabLinkElements = [];
        // in order to check focus is triggered by click
        // we are using this _mousedown flag
        this._mousedown = false;
    }
    Object.defineProperty(ClrTabs.prototype, "overflowPosition", {
        get: function () {
            return this._tabLinkDirectives.filter(function (link) { return !link.inOverflow; }).length;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ClrTabs.prototype, "tabContentViewContainer", {
        /* tslint:disable:no-unused-variable */
        set: function (value) {
            this.tabsService.tabContentViewContainer = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ClrTabs.prototype, "layout", {
        get: function () {
            return this.tabsService.layout;
        },
        /* tslint:enable:no-unused-variable */
        set: function (layout) {
            if (Object.keys(TabsLayout)
                .map(function (key) {
                return TabsLayout[key];
            })
                .indexOf(layout) >= 0) {
                this.tabsService.layout = layout;
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ClrTabs.prototype, "tabLinkDirectives", {
        get: function () {
            return this._tabLinkDirectives;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ClrTabs.prototype, "activeTabInOverflow", {
        get: function () {
            return this.tabsService.overflowTabs.indexOf(this.tabsService.activeTab) > -1;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ClrTabs.prototype, "activeTabPosition", {
        get: function () {
            return this._tabLinkDirectives.findIndex(function (link) { return link.active; });
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ClrTabs.prototype, "tabIds", {
        get: function () {
            return this.tabsService.children.map(function (tab) { return tab.tabLink.tabLinkId; }).join(' ');
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ClrTabs.prototype, "isCurrentInOverflow", {
        get: function () {
            return this.keyFocus.current >= this.overflowPosition;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ClrTabs.prototype, "isVertical", {
        get: function () {
            return this.layout === TabsLayout.VERTICAL;
        },
        enumerable: true,
        configurable: true
    });
    ClrTabs.prototype.toggleOverflowOnPosition = function (position) {
        // we need to check current position to determine
        // whether we need to open the tab overflow or not
        this.toggleService.open = position >= this.overflowPosition;
    };
    Object.defineProperty(ClrTabs.prototype, "tabOverflowEl", {
        set: function (value) {
            this._tabOverflowEl = value && value.nativeElement;
            if (this.toggleService.open && value) {
                // only when tab overflow view element is registered,
                // we need to move the focus to the first item
                this.keyFocus.focusCurrent();
            }
        },
        enumerable: true,
        configurable: true
    });
    ClrTabs.prototype.resetKeyFocusCurrentToActive = function (event) {
        var keyFocusContainsFocus = this.keyFocus.nativeElement.contains(event.relatedTarget);
        if (!keyFocusContainsFocus && this.keyFocus.current !== this.activeTabPosition) {
            this.keyFocus.current = this.activeTabPosition;
        }
    };
    ClrTabs.prototype.toggleOverflowOnClick = function () {
        if (this.isCurrentInOverflow && this.toggleService.open) {
            this.keyFocus.moveTo(this.overflowPosition - 1);
        }
        else {
            this.keyFocus.moveTo(this.overflowPosition);
        }
        // once click handler completes running,
        // reset the _mousedown flag
        this._mousedown = false;
    };
    ClrTabs.prototype.openOverflowOnFocus = function () {
        // This method should be called only on keyboard generated focus
        // when the active tab is in the overflow
        if (!this._mousedown && !this.toggleService.open) {
            this.keyFocus.moveTo(this.activeTabPosition);
        }
    };
    ClrTabs.prototype.closeOnFocusOut = function (event) {
        if (!this._tabOverflowEl.contains(event.relatedTarget) &&
            this.toggleService.open &&
            !this._mousedown) {
            this.toggleService.open = false;
            // if the focus is out of overflow and lands on the active tab link
            // which is currently visible, set the key focus current to activeTabPosition
            if (this.tabLinkElements[this.activeTabPosition] === event.relatedTarget) {
                this.keyFocus.current = this.activeTabPosition;
            }
        }
    };
    ClrTabs.prototype.closeOnEscapeKey = function () {
        // Move current to the last visible focusable item
        this.keyFocus.moveTo(this.overflowPosition - 1);
    };
    ClrTabs.prototype.closeOnOutsideClick = function (event, tabOverflowTrigger) {
        // Exit early if the event target is the trigger element itself or element that's inside the trigger element.
        // This is because we have another handler on the tabOverflowTrigger element itself.
        // As this handler method is on the document level so the event bubbles up to it and conflicts
        // with the tabOverflowTrigger handler resulting in opening the tab overflow and closing it right away consecutively.
        if (event.target === tabOverflowTrigger || tabOverflowTrigger.contains(event.target)) {
            return;
        }
        // Move current to the last visible focusable item
        if (!this._tabOverflowEl.contains(event.target) && this.isCurrentInOverflow) {
            this.keyFocus.moveTo(this.overflowPosition - 1);
        }
    };
    ClrTabs.prototype.listenForTabLinkChanges = function () {
        var _this = this;
        return this.tabs.changes.pipe(startWith(this.tabs.map(function (tab) { return tab.tabLink; }))).subscribe(function () {
            _this._tabLinkDirectives = _this.tabs.map(function (tab) { return tab.tabLink; });
            _this.tabLinkElements = _this._tabLinkDirectives.map(function (tab) { return tab.el.nativeElement; });
        });
    };
    ClrTabs.prototype.ngAfterContentInit = function () {
        this.subscriptions.push(this.listenForTabLinkChanges());
        if (typeof this.ifActiveService.current === 'undefined' && this.tabLinkDirectives[0]) {
            this.tabLinkDirectives[0].activate();
        }
        // set initial current position
        this.keyFocus.current = this.activeTabPosition;
    };
    ClrTabs.prototype.ngOnDestroy = function () {
        this.subscriptions.forEach(function (sub) {
            sub.unsubscribe();
        });
    };
    ClrTabs.ctorParameters = function () { return [
        { type: IfActiveService },
        { type: ClrPopoverToggleService },
        { type: TabsService },
        { type: Number, decorators: [{ type: Inject, args: [TABS_ID,] }] },
        { type: ClrCommonStringsService }
    ]; };
    __decorate([
        ViewChild('tabContentViewContainer', { static: true, read: ViewContainerRef })
    ], ClrTabs.prototype, "tabContentViewContainer", null);
    __decorate([
        Input('clrLayout')
    ], ClrTabs.prototype, "layout", null);
    __decorate([
        ContentChildren(ClrTab)
    ], ClrTabs.prototype, "tabs", void 0);
    __decorate([
        ViewChild(ClrKeyFocus, { static: true })
    ], ClrTabs.prototype, "keyFocus", void 0);
    __decorate([
        HostBinding('class.tabs-vertical')
    ], ClrTabs.prototype, "isVertical", null);
    __decorate([
        ViewChild(ClrTabOverflowContent, { read: ElementRef })
    ], ClrTabs.prototype, "tabOverflowEl", null);
    ClrTabs = __decorate([ __param(3, Inject(TABS_ID))
    ], ClrTabs);
ClrTabs.ɵfac = function ClrTabs_Factory(t) { return new (t || ClrTabs)(ɵngcc0.ɵɵdirectiveInject(IfActiveService), ɵngcc0.ɵɵdirectiveInject(ClrPopoverToggleService), ɵngcc0.ɵɵdirectiveInject(TabsService), ɵngcc0.ɵɵdirectiveInject(TABS_ID), ɵngcc0.ɵɵdirectiveInject(ClrCommonStringsService)); };
ClrTabs.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: ClrTabs, selectors: [["clr-tabs"]], contentQueries: function ClrTabs_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {
        ɵngcc0.ɵɵcontentQuery(dirIndex, ClrTab, false);
    } if (rf & 2) {
        var _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.tabs = _t);
    } }, viewQuery: function ClrTabs_Query(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵstaticViewQuery(_c0, true, ViewContainerRef);
        ɵngcc0.ɵɵviewQuery(ClrTabOverflowContent, true, ElementRef);
        ɵngcc0.ɵɵstaticViewQuery(ClrKeyFocus, true);
    } if (rf & 2) {
        var _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.tabContentViewContainer = _t.first);
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.tabOverflowEl = _t.first);
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.keyFocus = _t.first);
    } }, hostVars: 2, hostBindings: function ClrTabs_HostBindings(rf, ctx) { if (rf & 2) {
        ɵngcc0.ɵɵclassProp("tabs-vertical", ctx.isVertical);
    } }, inputs: { layout: ["clrLayout", "layout"] }, features: [ɵngcc0.ɵɵProvidersFeature([IfActiveService, ClrPopoverToggleService, TabsService, TABS_ID_PROVIDER])], decls: 5, vars: 4, consts: [["role", "tablist", "clrDirection", "both", 1, "nav", 3, "clrKeyFocus", "clrFocusChange", "focusout"], [4, "ngFor", "ngForOf"], [4, "ngIf"], ["tabContentViewContainer", ""], ["role", "presentation", 1, "nav-item"], [3, "ngTemplateOutlet"], ["role", "presentation", 1, "tabs-overflow", "bottom-right"], ["role", "application", 1, "nav-item"], ["type", "button", "aria-hidden", "true", 1, "btn", "btn-link", "nav-link", "dropdown-toggle", 3, "mousedown", "focus", "click"], ["tabOverflowTrigger", ""], ["shape", "ellipsis-horizontal"], [3, "keydown.esc", "click", "focusout", 4, "ngIf"], [3, "keydown.esc", "click", "focusout"], [3, "ngTemplateOutlet", 4, "ngIf"]], template: function ClrTabs_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "ul", 0);
        ɵngcc0.ɵɵlistener("clrFocusChange", function ClrTabs_Template_ul_clrFocusChange_0_listener($event) { return ctx.toggleOverflowOnPosition($event); })("focusout", function ClrTabs_Template_ul_focusout_0_listener($event) { return ctx.resetKeyFocusCurrentToActive($event); });
        ɵngcc0.ɵɵtemplate(1, ClrTabs_ng_container_1_Template, 2, 1, "ng-container", 1);
        ɵngcc0.ɵɵtemplate(2, ClrTabs_ng_container_2_Template, 7, 11, "ng-container", 2);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementContainer(3, null, 3);
    } if (rf & 2) {
        ɵngcc0.ɵɵproperty("clrKeyFocus", ctx.tabLinkElements);
        ɵngcc0.ɵɵattribute("aria-owns", ctx.tabIds);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngForOf", ctx.tabLinkDirectives);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.tabsService.overflowTabs.length > 0);
    } }, directives: [ɵngcc1.ClrKeyFocus, ɵngcc2.NgForOf, ɵngcc2.NgIf, ɵngcc2.NgTemplateOutlet, ɵngcc3.ClrIconCustomTag, ɵngcc4.ClrTabOverflowContent], encapsulation: 2 });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ClrTabs, [{
        type: Component,
        args: [{
                selector: 'clr-tabs',
                template: "\n        <ul class=\"nav\" role=\"tablist\" [attr.aria-owns]=\"tabIds\" [clrKeyFocus]=\"tabLinkElements\" clrDirection=\"both\" (clrFocusChange)=\"toggleOverflowOnPosition($event)\" (focusout)=\"resetKeyFocusCurrentToActive($event)\">\n            <!--tab links-->\n            <ng-container *ngFor=\"let link of tabLinkDirectives\">\n                <ng-container *ngIf=\"link.tabsId === tabsId && !link.inOverflow\">\n                    <li role=\"presentation\" class=\"nav-item\">\n                        <ng-container [ngTemplateOutlet]=\"link.templateRefContainer.template\"></ng-container>\n                    </li>\n                </ng-container>\n            </ng-container>\n            <ng-container *ngIf=\"tabsService.overflowTabs.length > 0\">\n                <div class=\"tabs-overflow bottom-right\" role=\"presentation\" \n                  [class.open]=\"toggleService.open\">\n                    <li role=\"application\" class=\"nav-item\">\n                        <button #tabOverflowTrigger class=\"btn btn-link nav-link dropdown-toggle\" type=\"button\" aria-hidden=\"true\" \n                        [attr.tabindex]=\"activeTabInOverflow && !toggleService.open? 0: -1\"\n                        [class.active]=\"activeTabInOverflow\"\n                        [class.open]=\"toggleService.open\"\n                        (mousedown)=\"_mousedown = true\"\n                        (focus)=\"openOverflowOnFocus()\"\n                        (click)=\"toggleOverflowOnClick()\">\n                            <clr-icon shape=\"ellipsis-horizontal\"\n                              [class.is-info]=\"toggleService.open\"\n                              [attr.title]=\"commonStrings.keys.more\"></clr-icon>\n                        </button>\n                    </li>\n                    <!--tab links in overflow menu-->\n                    <clr-tab-overflow-content *ngIf=\"toggleService.open\"  \n                      (document:keydown.esc)=\"closeOnEscapeKey()\" \n                      (document:click)=\"closeOnOutsideClick($event, tabOverflowTrigger)\"\n                      (focusout)=\"closeOnFocusOut($event)\">\n                        <ng-container *ngFor=\"let link of tabLinkDirectives\">\n                            <ng-container *ngIf=\"link.tabsId === tabsId && link.inOverflow\"\n                                          [ngTemplateOutlet]=\"link.templateRefContainer.template\">\n                            </ng-container>\n                        </ng-container>\n                    </clr-tab-overflow-content>\n                </div>\n            </ng-container>\n        </ul>\n        <ng-container #tabContentViewContainer></ng-container>\n    ",
                providers: [IfActiveService, ClrPopoverToggleService, TabsService, TABS_ID_PROVIDER]
            }]
    }], function () { return [{ type: IfActiveService }, { type: ClrPopoverToggleService }, { type: TabsService }, { type: Number, decorators: [{
                type: Inject,
                args: [TABS_ID]
            }] }, { type: ClrCommonStringsService }]; }, { tabContentViewContainer: [{
            type: ViewChild,
            args: ['tabContentViewContainer', { static: true, read: ViewContainerRef }]
        }], layout: [{
            type: Input,
            args: ['clrLayout']
        }], isVertical: [{
            type: HostBinding,
            args: ['class.tabs-vertical']
        }], tabOverflowEl: [{
            type: ViewChild,
            args: [ClrTabOverflowContent, { read: ElementRef }]
        }], tabs: [{
            type: ContentChildren,
            args: [ClrTab]
        }], keyFocus: [{
            type: ViewChild,
            args: [ClrKeyFocus, { static: true }]
        }] }); })();
    return ClrTabs;
}());
export { ClrTabs };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,