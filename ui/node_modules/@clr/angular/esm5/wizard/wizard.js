/*
 * Copyright (c) 2016-2020 VMware, Inc. All Rights Reserved.
 * This software is released under MIT license.
 * The full license information can be found in LICENSE in the root directory of this project.
 */
import { __decorate, __param } from "tslib";
import { AfterContentInit, Component, ContentChildren, DoCheck, ElementRef, EventEmitter, Input, IterableDiffers, OnDestroy, Output, QueryList, ViewChild, PLATFORM_ID, Inject, } from '@angular/core';
import { isPlatformBrowser } from '@angular/common';
import { filter } from 'rxjs/operators';
import { ButtonHubService } from './providers/button-hub.service';
import { HeaderActionService } from './providers/header-actions.service';
import { PageCollectionService } from './providers/page-collection.service';
import { WizardNavigationService } from './providers/wizard-navigation.service';
import { ClrWizardHeaderAction } from './wizard-header-action';
import { ClrWizardPage } from './wizard-page';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '../modal/modal';
import * as ɵngcc2 from './wizard-stepnav';
import * as ɵngcc3 from '@angular/common';
import * as ɵngcc4 from '../modal/modal-body';

var _c0 = ["wizardTitle"];
function ClrWizard_ng_template_8_Template(rf, ctx) { }
function ClrWizard_div_9_div_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div");
    ɵngcc0.ɵɵprojection(1, 2);
    ɵngcc0.ɵɵelementEnd();
} }
function ClrWizard_div_9_div_2_ng_template_1_Template(rf, ctx) { }
function ClrWizard_div_9_div_2_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div");
    ɵngcc0.ɵɵtemplate(1, ClrWizard_div_9_div_2_ng_template_1_Template, 0, 0, "ng-template", 6);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    var ctx_r6 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngTemplateOutlet", ctx_r6.navService.currentPage.headerActions);
} }
function ClrWizard_div_9_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div", 13);
    ɵngcc0.ɵɵtemplate(1, ClrWizard_div_9_div_1_Template, 2, 0, "div", 14);
    ɵngcc0.ɵɵtemplate(2, ClrWizard_div_9_div_2_Template, 2, 1, "div", 14);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    var ctx_r2 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r2.headerActionService.showWizardHeaderActions);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r2.headerActionService.currentPageHasHeaderActions);
} }
function ClrWizard_div_15_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div", 15);
    ɵngcc0.ɵɵprojection(1, 3);
    ɵngcc0.ɵɵelementEnd();
} }
function ClrWizard_div_16_ng_template_1_Template(rf, ctx) { }
function ClrWizard_div_16_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div", 15);
    ɵngcc0.ɵɵtemplate(1, ClrWizard_div_16_ng_template_1_Template, 0, 0, "ng-template", 6);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    var ctx_r4 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngTemplateOutlet", ctx_r4.navService.currentPage.buttons);
} }
var _c1 = [[["clr-wizard-title"]], "*", [["clr-wizard-header-action"]], [["clr-wizard-button"]]];
var _c2 = ["clr-wizard-title", "*", "clr-wizard-header-action", "clr-wizard-button"];
var ClrWizard = /** @class */ (function () {
    function ClrWizard(platformId, navService, pageCollection, buttonService, headerActionService, elementRef, differs) {
        this.platformId = platformId;
        this.navService = navService;
        this.pageCollection = pageCollection;
        this.buttonService = buttonService;
        this.headerActionService = headerActionService;
        this.elementRef = elementRef;
        /**
         * Set the modal size of the wizard. Set using `[clrWizardSize]` input.
         */
        this.size = 'xl';
        /**
         * Tells the modal part of the wizard whether it should have a close "X"
         * in the top right corner. Set using `[clrWizardClosable]` input.
         */
        this.closable = true;
        this._forceForward = false;
        this._open = false;
        this._stopNext = false;
        this._stopCancel = false;
        this._stopNavigation = false;
        this._disableStepnav = false;
        /**
         * Used to communicate to the underlying modal that animations are not
         * wanted. Primary use is for the display of static/inline wizards.
         * Set using `[clrWizardPreventModalAnimation]` input.
         */
        /** @deprecated since 3.0, input should be removed in 4.0 because is only related to inline wizards */
        this._stopModalAnimations = false;
        /**
         * Emits when the wizard is opened or closed.
         * Listen via `(clrWizardOpenChange)` event.
         */
        this._openChanged = new EventEmitter(false);
        /**
         * Emits when the wizard is canceled. Listen via `(clrWizardOnCancel)` event.
         * Can be combined with the `[clrWizardPreventDefaultCancel]` input to create
         * wizard-level custom cancel routines.
         */
        this.onCancel = new EventEmitter(false);
        /**
         * Emits when the wizard is completed. Listen via `(clrWizardOnFinish)` event.
         * Can be combined with the `[clrWizardPreventDefaultNext]` input to create
         * wizard-level custom completion routines.
         */
        this.wizardFinished = new EventEmitter(false);
        /**
         * Emits when the wizard is reset. Listen via `(clrWizardOnReset)` event.
         */
        this.onReset = new EventEmitter(false);
        /**
         * Emits when the current page has changed. Listen via `(clrWizardCurrentPageChanged)` event.
         * output. Useful for non-blocking validation.
         */
        this.currentPageChanged = new EventEmitter(false);
        /**
         * Emits when the wizard moves to the next page. Listen via `(clrWizardOnNext)` event.
         * Can be combined with the `[clrWizardPreventDefaultNext]` input to create
         * wizard-level custom navigation routines, which are useful for validation.
         */
        this.onMoveNext = new EventEmitter(false);
        /**
         * Emits when the wizard moves to the previous page. Can be useful for validation.
         * Listen via `(clrWizardOnPrevious)` event.
         */
        this.onMovePrevious = new EventEmitter(false);
        this.subscriptions = [];
        this.subscriptions.push(this.listenForNextPageChanges(), this.listenForPreviousPageChanges(), this.listenForCancelChanges(), this.listenForFinishedChanges(), this.listenForPageChanges());
        this.differ = differs.find([]).create(null);
    }
    Object.defineProperty(ClrWizard.prototype, "forceForward", {
        get: function () {
            return this._forceForward;
        },
        /**
         * Resets page completed states when navigating backwards.
         * Set using `[clrWizardForceForwardNavigation]` input.
         */
        set: function (value) {
            this._forceForward = !!value;
            this.navService.forceForwardNavigation = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ClrWizard.prototype, "clrWizardOpen", {
        /**
         * Toggles open/close of the wizard component.
         * Set using the `[clrWizardOpen]` input.
         */
        set: function (open) {
            if (open) {
                this.buttonService.buttonsReady = true;
            }
            this._open = open;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ClrWizard.prototype, "stopNext", {
        get: function () {
            return this._stopNext;
        },
        /**
         * Prevents ClrWizard from moving to the next page or closing itself on finishing.
         * Set using the `[clrWizardPreventDefaultNext]` input. Note that using stopNext
         * will require you to create your own calls to .next() and .finish() in your
         * host component to make the ClrWizard work as expected.
         */
        set: function (value) {
            this._stopNext = !!value;
            this.navService.wizardHasAltNext = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ClrWizard.prototype, "stopCancel", {
        get: function () {
            return this._stopCancel;
        },
        /**
         * Prevents ClrWizard from closing when the cancel button or close "X" is clicked.
         * Set using the `[clrWizardPreventDefaultCancel]` input.
         *
         * Note that using stopCancel will require you to create your own calls to `close()` in your host compone`nt
         * to make the ClrWizard work as expected. Useful for doing checks or prompts
         * before closing a ClrWizard.
         */
        set: function (value) {
            this._stopCancel = !!value;
            this.navService.wizardHasAltCancel = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ClrWizard.prototype, "stopNavigation", {
        get: function () {
            return this._stopNavigation;
        },
        /**
         * Prevents ClrWizard from performing any form of navigation away from the current
         * page. Set using the `[clrWizardPreventNavigation]` input.
         * Note that stopNavigation is meant to freeze the wizard in place, typically
         * during a long validation or background action where you want the wizard to
         * display loading content but not allow the user to execute navigation in
         * the stepnav, close X, or the  back, finish, or next buttons.
         */
        set: function (value) {
            this._stopNavigation = !!value;
            this.navService.wizardStopNavigation = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ClrWizard.prototype, "disableStepnav", {
        get: function () {
            return this._disableStepnav;
        },
        /**
         * Prevents clicks on the links in the stepnav from working.
         * Set using `[clrWizardDisableStepnav]` input.
         * A more granular bypassing of navigation which can be useful when your
         * ClrWizard is in a state of completion and you don't want users to be
         * able to jump backwards and change things.
         */
        set: function (value) {
            this._disableStepnav = !!value;
            this.navService.wizardDisableStepnav = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ClrWizard.prototype, "stopModalAnimations", {
        get: function () {
            return this._stopModalAnimations ? 'true' : 'false';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ClrWizard.prototype, "currentPage", {
        get: function () {
            return this.navService.currentPage;
        },
        set: function (page) {
            this.navService.goTo(page, true);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ClrWizard.prototype, "isLast", {
        get: function () {
            return this.navService.currentPageIsLast;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ClrWizard.prototype, "isFirst", {
        get: function () {
            return this.navService.currentPageIsFirst;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ClrWizard.prototype, "isStatic", {
        get: function () {
            return this.elementRef.nativeElement.classList.contains('clr-wizard--inline');
        },
        enumerable: true,
        configurable: true
    });
    ClrWizard.prototype.ngAfterContentInit = function () {
        this.pageCollection.pages = this.pages;
        this.headerActionService.wizardHeaderActions = this.headerActions;
        this.initializeButtons();
    };
    ClrWizard.prototype.ngDoCheck = function () {
        this.updateNavOnPageChanges();
    };
    ClrWizard.prototype.ngOnDestroy = function () {
        this.subscriptions.forEach(function (s) { return s.unsubscribe(); });
    };
    /**
     * Marks Wizard as finished. By default it does not execute event
     * emissions or checks before completing and closing. This method is commonly
     * used as part of an alternative navigation with `[clrWizardPreventDefaultNext]`.
     *
     * If `skipChecksAndEmits` is true, the wizard will complete and close
     * regardless of the state of its current page. This is useful for alternative
     * navigation where event emissions have already been done and firing them again
     * may cause an event loop.
     */
    ClrWizard.prototype.finish = function (skipChecksAndEmits) {
        if (skipChecksAndEmits === void 0) { skipChecksAndEmits = true; }
        if (skipChecksAndEmits) {
            this.forceFinish();
        }
        else {
            this.navService.finish();
        }
    };
    /**
     * Marks the wizard as finished but does run checks and emissions.
     * Good for a last step in an alternate workflow. Does the same thing as
     * calling `ClrWizard.finish(true)` or `ClrWizard.finish()` without a parameter.
     */
    ClrWizard.prototype.forceFinish = function () {
        if (this.stopNavigation) {
            return;
        }
        this.close();
    };
    /**
     * Opens the wizard. If there is no current page defined, sets the first page in the wizard to be current.
     */
    ClrWizard.prototype.open = function () {
        this._open = true;
        if (!this.currentPage) {
            this.navService.setFirstPageCurrent();
        }
        // Only render buttons when wizard is opened, to avoid chocolate errors
        this.buttonService.buttonsReady = true;
        this._openChanged.emit(true);
    };
    /**
     * Closes the wizard. Call this directly instead of `cancel()` to implement alternative cancel functionality.
     */
    ClrWizard.prototype.close = function () {
        if (this.stopNavigation) {
            return;
        }
        this._open = false;
        this._openChanged.emit(false);
    };
    /**
     * Used to open and close the wizard. By default the wizard will
     * close if invoked with no parameter. If parameter is true wizard will open
     * else if false will close.
     */
    ClrWizard.prototype.toggle = function (open) {
        if (open) {
            this.open();
        }
        else {
            this.close();
        }
    };
    /**
     * Moves the wizard to the previous page.
     */
    ClrWizard.prototype.previous = function () {
        this.navService.previous();
    };
    /**
     * By default, `next()` does not execute event emissions.
     * This method is commonly called as part of an alternative navigation
     * with `[clrWizardPreventDefaultNext]`. The wizard will move to the next page
     * regardless of the state of its current page. This is useful for alternative
     * navigation where event emissions have already been done and firing them again
     * may cause an event loop.
     *
     * If `skipChecksAndEmits` is false, the wizard will execute default checks
     * and emit events as normal. This is useful for custom buttons or programmatic
     * workflows that are not executing the wizards default checks and emissions.
     * It is another way to navigate without having to rewrite the wizard’s default
     * functionality from scratch.
     */
    ClrWizard.prototype.next = function (skipChecksAndEmits) {
        if (skipChecksAndEmits === void 0) { skipChecksAndEmits = true; }
        if (skipChecksAndEmits) {
            this.forceNext();
        }
        else {
            this.navService.next();
        }
    };
    /**
     * Moves the wizard to the next page without the checks and emissions.
     * Good for a last step in an alternate workflow.
     * Alias for `ClrWizard.next(true)` or `ClrWizard.next()`
     */
    ClrWizard.prototype.forceNext = function () {
        this.navService.forceNext();
    };
    /**
     * Cancels and closes the wizard. Do not use this for an override of the cancel
     * the functionality with `[clrWizardPreventDefaultCancel]`, `[clrWizardPreventPageDefaultCancel]`,
     * or `[clrWizardPagePreventDefault]` because it will initiate the same checks
     * and event emissions that invoked your event handler. Use `ClrWizard.close()` instead.
     */
    ClrWizard.prototype.cancel = function () {
        this.navService.cancel();
    };
    /**
     * Overrides behavior of the underlying modal to avoid collisions with
     * alternative cancel functionality. In most cases, use `ClrWizard.cancel()` instead.
     */
    ClrWizard.prototype.modalCancel = function () {
        if (this.closable) {
            this.checkAndCancel();
        }
    };
    /**
     * Checks for alternative cancel flows defined at the current page or
     * wizard level. Performs a canceled if not. Emits events that initiate
     * the alternative cancel outputs `(clrWizardPageOnCancel)` and `(clrWizardOnCancel)`.
     */
    ClrWizard.prototype.checkAndCancel = function () {
        var currentPage = this.currentPage;
        var currentPageHasOverrides = currentPage.stopCancel || currentPage.preventDefault;
        if (this.stopNavigation) {
            return;
        }
        currentPage.pageOnCancel.emit();
        if (!currentPageHasOverrides) {
            this.onCancel.emit();
        }
        if (!this.stopCancel && !currentPageHasOverrides) {
            this.close();
        }
    };
    /**
     * Navigates to a given page in the Wizard. Navigation will invoke the wizard’s default
     * checks and event emissions.
     *
     * The format of the expected ID parameter can be found in the return of the
     * ClrWizardPage.id getter, usually prefixed with `clr-wizard-page-` and then either a
     * numeric ID or the ID specified for the `ClrWizardPage` component’s `id` input.
     */
    ClrWizard.prototype.goTo = function (pageId) {
        if (!pageId) {
            return;
        }
        this.navService.goTo(pageId);
    };
    /**
     * Reset sets all WizardPages to incomplete and sets the first page in the `ClrWizard` to
     * be the current page, resetting the wizard navigation.
     * Use `(clrWizardOnReset)` event to reset the data or model of your wizard.
     */
    ClrWizard.prototype.reset = function () {
        this.pageCollection.reset();
        this.onReset.next();
    };
    ClrWizard.prototype.listenForNextPageChanges = function () {
        var _this = this;
        return this.navService.movedToNextPage.pipe(filter(function () { return isPlatformBrowser(_this.platformId); })).subscribe(function () {
            _this.onMoveNext.emit();
            _this.wizardTitle.nativeElement.focus();
        });
    };
    ClrWizard.prototype.listenForPreviousPageChanges = function () {
        var _this = this;
        return this.navService.movedToPreviousPage.pipe(filter(function () { return isPlatformBrowser(_this.platformId); })).subscribe(function () {
            _this.onMovePrevious.emit();
            _this.wizardTitle.nativeElement.focus();
        });
    };
    ClrWizard.prototype.listenForCancelChanges = function () {
        var _this = this;
        return this.navService.notifyWizardCancel.subscribe(function () { return _this.checkAndCancel(); });
    };
    ClrWizard.prototype.listenForFinishedChanges = function () {
        var _this = this;
        return this.navService.wizardFinished.subscribe(function () { return _this.emitWizardFinished(); });
    };
    ClrWizard.prototype.listenForPageChanges = function () {
        var _this = this;
        return this.navService.currentPageChanged.subscribe(function () { return _this.currentPageChanged.emit(); });
    };
    ClrWizard.prototype.updateNavOnPageChanges = function () {
        var _this = this;
        var changes = this.differ.diff(this.pages);
        if (changes) {
            changes.forEachAddedItem(function () { return _this.navService.updateNavigation(); });
            changes.forEachRemovedItem(function () { return _this.navService.updateNavigation(); });
        }
    };
    ClrWizard.prototype.initializeButtons = function () {
        // Only trigger buttons ready if default is open (inlined)
        if (this._open) {
            this.buttonService.buttonsReady = true;
        }
    };
    ClrWizard.prototype.emitWizardFinished = function () {
        if (!this.stopNext) {
            this.forceFinish();
        }
        this.wizardFinished.emit();
    };
    ClrWizard.ctorParameters = function () { return [
        { type: Object, decorators: [{ type: Inject, args: [PLATFORM_ID,] }] },
        { type: WizardNavigationService },
        { type: PageCollectionService },
        { type: ButtonHubService },
        { type: HeaderActionService },
        { type: ElementRef },
        { type: IterableDiffers }
    ]; };
    __decorate([
        Input('clrWizardSize')
    ], ClrWizard.prototype, "size", void 0);
    __decorate([
        Input('clrWizardClosable')
    ], ClrWizard.prototype, "closable", void 0);
    __decorate([
        Input('clrWizardForceForwardNavigation')
    ], ClrWizard.prototype, "forceForward", null);
    __decorate([
        Input('clrWizardOpen')
    ], ClrWizard.prototype, "clrWizardOpen", null);
    __decorate([
        Input('clrWizardPreventDefaultNext')
    ], ClrWizard.prototype, "stopNext", null);
    __decorate([
        Input('clrWizardPreventDefaultCancel')
    ], ClrWizard.prototype, "stopCancel", null);
    __decorate([
        Input('clrWizardPreventNavigation')
    ], ClrWizard.prototype, "stopNavigation", null);
    __decorate([
        Input('clrWizardDisableStepnav')
    ], ClrWizard.prototype, "disableStepnav", null);
    __decorate([
        Input('clrWizardPreventModalAnimation')
    ], ClrWizard.prototype, "_stopModalAnimations", void 0);
    __decorate([
        Output('clrWizardOpenChange')
    ], ClrWizard.prototype, "_openChanged", void 0);
    __decorate([
        Output('clrWizardOnCancel')
    ], ClrWizard.prototype, "onCancel", void 0);
    __decorate([
        Output('clrWizardOnFinish')
    ], ClrWizard.prototype, "wizardFinished", void 0);
    __decorate([
        Output('clrWizardOnReset')
    ], ClrWizard.prototype, "onReset", void 0);
    __decorate([
        Output('clrWizardCurrentPageChanged')
    ], ClrWizard.prototype, "currentPageChanged", void 0);
    __decorate([
        Output('clrWizardOnNext')
    ], ClrWizard.prototype, "onMoveNext", void 0);
    __decorate([
        Output('clrWizardOnPrevious')
    ], ClrWizard.prototype, "onMovePrevious", void 0);
    __decorate([
        ContentChildren(ClrWizardPage, { descendants: true })
    ], ClrWizard.prototype, "pages", void 0);
    __decorate([
        ContentChildren(ClrWizardHeaderAction)
    ], ClrWizard.prototype, "headerActions", void 0);
    __decorate([
        ViewChild('wizardTitle')
    ], ClrWizard.prototype, "wizardTitle", void 0);
    ClrWizard = __decorate([ __param(0, Inject(PLATFORM_ID))
    ], ClrWizard);
ClrWizard.ɵfac = function ClrWizard_Factory(t) { return new (t || ClrWizard)(ɵngcc0.ɵɵdirectiveInject(PLATFORM_ID), ɵngcc0.ɵɵdirectiveInject(WizardNavigationService), ɵngcc0.ɵɵdirectiveInject(PageCollectionService), ɵngcc0.ɵɵdirectiveInject(ButtonHubService), ɵngcc0.ɵɵdirectiveInject(HeaderActionService), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.IterableDiffers)); };
ClrWizard.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: ClrWizard, selectors: [["clr-wizard"]], contentQueries: function ClrWizard_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {
        ɵngcc0.ɵɵcontentQuery(dirIndex, ClrWizardPage, true);
        ɵngcc0.ɵɵcontentQuery(dirIndex, ClrWizardHeaderAction, false);
    } if (rf & 2) {
        var _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.pages = _t);
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.headerActions = _t);
    } }, viewQuery: function ClrWizard_Query(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵviewQuery(_c0, true);
    } if (rf & 2) {
        var _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.wizardTitle = _t.first);
    } }, hostVars: 10, hostBindings: function ClrWizard_HostBindings(rf, ctx) { if (rf & 2) {
        ɵngcc0.ɵɵclassProp("clr-wizard", true)("wizard-md", ctx.size == "md")("wizard-lg", ctx.size == "lg")("wizard-xl", ctx.size == "xl")("lastPage", ctx.navService.currentPageIsLast);
    } }, inputs: { size: ["clrWizardSize", "size"], closable: ["clrWizardClosable", "closable"], _stopModalAnimations: ["clrWizardPreventModalAnimation", "_stopModalAnimations"], forceForward: ["clrWizardForceForwardNavigation", "forceForward"], clrWizardOpen: "clrWizardOpen", stopNext: ["clrWizardPreventDefaultNext", "stopNext"], stopCancel: ["clrWizardPreventDefaultCancel", "stopCancel"], stopNavigation: ["clrWizardPreventNavigation", "stopNavigation"], disableStepnav: ["clrWizardDisableStepnav", "disableStepnav"] }, outputs: { _openChanged: "clrWizardOpenChange", onCancel: "clrWizardOnCancel", wizardFinished: "clrWizardOnFinish", onReset: "clrWizardOnReset", currentPageChanged: "clrWizardCurrentPageChanged", onMoveNext: "clrWizardOnNext", onMovePrevious: "clrWizardOnPrevious" }, features: [ɵngcc0.ɵɵProvidersFeature([WizardNavigationService, PageCollectionService, ButtonHubService, HeaderActionService])], ngContentSelectors: _c2, decls: 17, vars: 11, consts: [[3, "clrModalOpen", "clrModalSize", "clrModalClosable", "clrModalStaticBackdrop", "clrModalSkipAnimation", "clrModalOverrideScrollService", "clrModalPreventClose", "clrModalAlternateClose"], [1, "modal-nav", "clr-wizard-stepnav-wrapper"], [1, "clr-wizard-title"], [1, "modal-title"], ["tabindex", "-1", 1, "modal-title-text"], ["wizardTitle", ""], [3, "ngTemplateOutlet"], ["class", "modal-header-actions-wrapper", 4, "ngIf"], [1, "modal-body"], ["clr-wizard-pages-wrapper", "", 1, "clr-wizard-content"], [1, "modal-footer", "clr-wizard-footer"], [1, "clr-wizard-footer-buttons"], ["class", "clr-wizard-footer-buttons-wrapper", 4, "ngIf"], [1, "modal-header-actions-wrapper"], [4, "ngIf"], [1, "clr-wizard-footer-buttons-wrapper"]], template: function ClrWizard_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef(_c1);
        ɵngcc0.ɵɵelementStart(0, "clr-modal", 0);
        ɵngcc0.ɵɵlistener("clrModalAlternateClose", function ClrWizard_Template_clr_modal_clrModalAlternateClose_0_listener() { return ctx.modalCancel(); });
        ɵngcc0.ɵɵelementStart(1, "nav", 1);
        ɵngcc0.ɵɵelementStart(2, "h1", 2);
        ɵngcc0.ɵɵprojection(3);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelement(4, "clr-wizard-stepnav");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(5, "h2", 3);
        ɵngcc0.ɵɵelementStart(6, "span", 4, 5);
        ɵngcc0.ɵɵtemplate(8, ClrWizard_ng_template_8_Template, 0, 0, "ng-template", 6);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵtemplate(9, ClrWizard_div_9_Template, 3, 2, "div", 7);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(10, "div", 8);
        ɵngcc0.ɵɵelementStart(11, "main", 9);
        ɵngcc0.ɵɵprojection(12, 1);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(13, "div", 10);
        ɵngcc0.ɵɵelementStart(14, "div", 11);
        ɵngcc0.ɵɵtemplate(15, ClrWizard_div_15_Template, 2, 0, "div", 12);
        ɵngcc0.ɵɵtemplate(16, ClrWizard_div_16_Template, 2, 1, "div", 12);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵproperty("clrModalOpen", ctx._open)("clrModalSize", ctx.size)("clrModalClosable", ctx.closable)("clrModalStaticBackdrop", true)("clrModalSkipAnimation", ctx.stopModalAnimations)("clrModalOverrideScrollService", ctx.isStatic)("clrModalPreventClose", true);
        ɵngcc0.ɵɵadvance(8);
        ɵngcc0.ɵɵproperty("ngTemplateOutlet", ctx.navService.currentPageTitle);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.headerActionService.displayHeaderActionsWrapper);
        ɵngcc0.ɵɵadvance(6);
        ɵngcc0.ɵɵproperty("ngIf", ctx.navService.currentPage && !ctx.navService.currentPage.hasButtons);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.navService.currentPage && ctx.navService.currentPage.hasButtons);
    } }, directives: [ɵngcc1.ClrModal, ɵngcc2.ClrWizardStepnav, ɵngcc3.NgTemplateOutlet, ɵngcc3.NgIf, ɵngcc4.ClrModalBody], encapsulation: 2 });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ClrWizard, [{
        type: Component,
        args: [{
                selector: 'clr-wizard',
                providers: [WizardNavigationService, PageCollectionService, ButtonHubService, HeaderActionService],
                template: "<!--\n  ~ Copyright (c) 2016-2020 VMware, Inc. All Rights Reserved.\n  ~ This software is released under MIT license.\n  ~ The full license information can be found in LICENSE in the root directory of this project.\n  -->\n\n<clr-modal\n    [clrModalOpen]=\"_open\"\n    [clrModalSize]=\"size\"\n    [clrModalClosable]=\"closable\"\n    [clrModalStaticBackdrop]=\"true\"\n    [clrModalSkipAnimation]=\"stopModalAnimations\"\n    [clrModalOverrideScrollService]=\"isStatic\"\n    [clrModalPreventClose]=\"true\"\n    (clrModalAlternateClose)=\"modalCancel()\">\n\n    <nav class=\"modal-nav clr-wizard-stepnav-wrapper\">\n        <h1 class=\"clr-wizard-title\"><ng-content select=\"clr-wizard-title\"></ng-content></h1>\n        <clr-wizard-stepnav></clr-wizard-stepnav>\n    </nav>\n\n    <h2 class=\"modal-title\">\n        <span tabindex=\"-1\" #wizardTitle class=\"modal-title-text\">\n            <ng-template [ngTemplateOutlet]=\"navService.currentPageTitle\"></ng-template>\n        </span>\n\n        <div class=\"modal-header-actions-wrapper\" *ngIf=\"headerActionService.displayHeaderActionsWrapper\">\n            <div *ngIf=\"headerActionService.showWizardHeaderActions\">\n                <ng-content select=\"clr-wizard-header-action\"></ng-content>\n            </div>\n            <div *ngIf=\"headerActionService.currentPageHasHeaderActions\">\n                <ng-template [ngTemplateOutlet]=\"navService.currentPage.headerActions\"></ng-template>\n            </div>\n        </div>\n    </h2>\n\n    <div class=\"modal-body\">\n        <main clr-wizard-pages-wrapper class=\"clr-wizard-content\">\n            <ng-content></ng-content>\n        </main>\n    </div>\n    <div class=\"modal-footer clr-wizard-footer\">\n        <div class=\"clr-wizard-footer-buttons\">\n            <div *ngIf=\"navService.currentPage && !navService.currentPage.hasButtons\"\n                class=\"clr-wizard-footer-buttons-wrapper\">\n                <ng-content select=\"clr-wizard-button\"></ng-content>\n            </div>\n            <div *ngIf=\"navService.currentPage && navService.currentPage.hasButtons\"\n                class=\"clr-wizard-footer-buttons-wrapper\">\n                <ng-template [ngTemplateOutlet]=\"navService.currentPage.buttons\"></ng-template>\n            </div>\n        </div>\n    </div>\n</clr-modal>\n",
                host: {
                    '[class.clr-wizard]': 'true',
                    '[class.wizard-md]': "size == 'md'",
                    '[class.wizard-lg]': "size == 'lg'",
                    '[class.wizard-xl]': "size == 'xl'",
                    '[class.lastPage]': 'navService.currentPageIsLast'
                }
            }]
    }], function () { return [{ type: Object, decorators: [{
                type: Inject,
                args: [PLATFORM_ID]
            }] }, { type: WizardNavigationService }, { type: PageCollectionService }, { type: ButtonHubService }, { type: HeaderActionService }, { type: ɵngcc0.ElementRef }, { type: ɵngcc0.IterableDiffers }]; }, { size: [{
            type: Input,
            args: ['clrWizardSize']
        }], closable: [{
            type: Input,
            args: ['clrWizardClosable']
        }], _stopModalAnimations: [{
            type: Input,
            args: ['clrWizardPreventModalAnimation']
        }], _openChanged: [{
            type: Output,
            args: ['clrWizardOpenChange']
        }], onCancel: [{
            type: Output,
            args: ['clrWizardOnCancel']
        }], wizardFinished: [{
            type: Output,
            args: ['clrWizardOnFinish']
        }], onReset: [{
            type: Output,
            args: ['clrWizardOnReset']
        }], currentPageChanged: [{
            type: Output,
            args: ['clrWizardCurrentPageChanged']
        }], onMoveNext: [{
            type: Output,
            args: ['clrWizardOnNext']
        }], onMovePrevious: [{
            type: Output,
            args: ['clrWizardOnPrevious']
        }], forceForward: [{
            type: Input,
            args: ['clrWizardForceForwardNavigation']
        }], clrWizardOpen: [{
            type: Input,
            args: ['clrWizardOpen']
        }], stopNext: [{
            type: Input,
            args: ['clrWizardPreventDefaultNext']
        }], stopCancel: [{
            type: Input,
            args: ['clrWizardPreventDefaultCancel']
        }], stopNavigation: [{
            type: Input,
            args: ['clrWizardPreventNavigation']
        }], disableStepnav: [{
            type: Input,
            args: ['clrWizardDisableStepnav']
        }], pages: [{
            type: ContentChildren,
            args: [ClrWizardPage, { descendants: true }]
        }], headerActions: [{
            type: ContentChildren,
            args: [ClrWizardHeaderAction]
        }], wizardTitle: [{
            type: ViewChild,
            args: ['wizardTitle']
        }] }); })();
    return ClrWizard;
}());
export { ClrWizard };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,