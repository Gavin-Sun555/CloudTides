/*
 * Copyright (c) 2016-2020 VMware, Inc. All Rights Reserved.
 * This software is released under MIT license.
 * The full license information can be found in LICENSE in the root directory of this project.
 */
import { __decorate } from "tslib";
import { ClrTimelineStepState } from '../enums/timeline-step-state.enum';
import { ClrCommonStringsService } from '../../utils/i18n/common-strings.service';
import { Injectable } from '@angular/core';
import * as ɵngcc0 from '@angular/core';
var TimelineIconAttributeService = /** @class */ (function () {
    function TimelineIconAttributeService(commonStrings) {
        this.attributeMap = new Map();
        this.attributeMap.set(ClrTimelineStepState.NOT_STARTED, {
            iconShape: 'circle',
            ariaLabel: commonStrings.keys.timelineStepNotStarted,
        });
        this.attributeMap.set(ClrTimelineStepState.CURRENT, {
            iconShape: 'dot-circle',
            ariaLabel: commonStrings.keys.timelineStepCurrent,
        });
        this.attributeMap.set(ClrTimelineStepState.PROCESSING, {
            iconShape: undefined,
            ariaLabel: commonStrings.keys.timelineStepProcessing,
        });
        this.attributeMap.set(ClrTimelineStepState.SUCCESS, {
            iconShape: 'success-standard',
            ariaLabel: commonStrings.keys.timelineStepSuccess,
        });
        this.attributeMap.set(ClrTimelineStepState.ERROR, {
            iconShape: 'error-standard',
            ariaLabel: commonStrings.keys.timelineStepError,
        });
    }
    TimelineIconAttributeService.prototype.getAriaLabel = function (step) {
        return this.attributeMap.get(step).ariaLabel;
    };
    TimelineIconAttributeService.prototype.getIconShape = function (step) {
        return this.attributeMap.get(step).iconShape;
    };
    TimelineIconAttributeService.ctorParameters = function () { return [
        { type: ClrCommonStringsService }
    ]; };
TimelineIconAttributeService.ɵfac = function TimelineIconAttributeService_Factory(t) { return new (t || TimelineIconAttributeService)(ɵngcc0.ɵɵinject(ClrCommonStringsService)); };
TimelineIconAttributeService.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: TimelineIconAttributeService, factory: function (t) { return TimelineIconAttributeService.ɵfac(t); } });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(TimelineIconAttributeService, [{
        type: Injectable
    }], function () { return [{ type: ClrCommonStringsService }]; }, null); })();
    return TimelineIconAttributeService;
}());
export { TimelineIconAttributeService };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGltZWxpbmUtaWNvbi1hdHRyaWJ1dGUuc2VydmljZS5qcyIsInNvdXJjZXMiOlsibmc6L0BjbHIvYW5ndWxhci90aW1lbGluZS9wcm92aWRlcnMvdGltZWxpbmUtaWNvbi1hdHRyaWJ1dGUuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBLE9BQU8sRUFBRSxvQkFBb0IsRUFBRSxNQUFNLG1DQUFtQyxDQUFDO0FBRXpFLE9BQU8sRUFBRSx1QkFBdUIsRUFBRSxNQUFNLHlDQUF5QyxDQUFDO0FBQ2xGLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7O0FBRzNDO0FBQ29CLElBRWxCLHNDQUFZLGFBQXNDO0FBQ3BELFFBSFUsaUJBQVksR0FBOEMsSUFBSSxHQUFHLEVBQXdDLENBQUM7QUFDcEgsUUFFSSxJQUFJLENBQUMsWUFBWSxDQUFDLEdBQUcsQ0FBQyxvQkFBb0IsQ0FBQyxXQUFXLEVBQUU7QUFDNUQsWUFBTSxTQUFTLEVBQUUsUUFBUTtBQUN6QixZQUFNLFNBQVMsRUFBRSxhQUFhLENBQUMsSUFBSSxDQUFDLHNCQUFzQjtBQUMxRCxTQUFLLENBQUMsQ0FBQztBQUNQLFFBQUksSUFBSSxDQUFDLFlBQVksQ0FBQyxHQUFHLENBQUMsb0JBQW9CLENBQUMsT0FBTyxFQUFFO0FBQ3hELFlBQU0sU0FBUyxFQUFFLFlBQVk7QUFDN0IsWUFBTSxTQUFTLEVBQUUsYUFBYSxDQUFDLElBQUksQ0FBQyxtQkFBbUI7QUFDdkQsU0FBSyxDQUFDLENBQUM7QUFDUCxRQUFJLElBQUksQ0FBQyxZQUFZLENBQUMsR0FBRyxDQUFDLG9CQUFvQixDQUFDLFVBQVUsRUFBRTtBQUMzRCxZQUFNLFNBQVMsRUFBRSxTQUFTO0FBQzFCLFlBQU0sU0FBUyxFQUFFLGFBQWEsQ0FBQyxJQUFJLENBQUMsc0JBQXNCO0FBQzFELFNBQUssQ0FBQyxDQUFDO0FBQ1AsUUFBSSxJQUFJLENBQUMsWUFBWSxDQUFDLEdBQUcsQ0FBQyxvQkFBb0IsQ0FBQyxPQUFPLEVBQUU7QUFDeEQsWUFBTSxTQUFTLEVBQUUsa0JBQWtCO0FBQ25DLFlBQU0sU0FBUyxFQUFFLGFBQWEsQ0FBQyxJQUFJLENBQUMsbUJBQW1CO0FBQ3ZELFNBQUssQ0FBQyxDQUFDO0FBQ1AsUUFBSSxJQUFJLENBQUMsWUFBWSxDQUFDLEdBQUcsQ0FBQyxvQkFBb0IsQ0FBQyxLQUFLLEVBQUU7QUFDdEQsWUFBTSxTQUFTLEVBQUUsZ0JBQWdCO0FBQ2pDLFlBQU0sU0FBUyxFQUFFLGFBQWEsQ0FBQyxJQUFJLENBQUMsaUJBQWlCO0FBQ3JELFNBQUssQ0FBQyxDQUFDO0FBQ1AsSUFBRSxDQUFDO0FBQ0gsSUFDUyxtREFBWSxHQUFuQixVQUFvQixJQUEwQjtBQUFJLFFBQ2hELE9BQU8sSUFBSSxDQUFDLFlBQVksQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLENBQUMsU0FBUyxDQUFDO0FBQ2pELElBQUUsQ0FBQztBQUVILElBQVMsbURBQVksR0FBbkIsVUFBb0IsSUFBMEI7QUFBSSxRQUNoRCxPQUFPLElBQUksQ0FBQyxZQUFZLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxDQUFDLFNBQVMsQ0FBQztBQUNqRCxJQUFFLENBQUM7QUFDRjtBQUN1RSxnQkEvQjNDLHVCQUF1QjtBQUFHO0lBSDFDLDRCQUE0Qix3QkFEeEMsVUFBVSxFQUFFLFFBQ0EsNEJBQTRCLENBaUN4Qzs7OztpRkFDRDtBQUFDLElBREQsbUNBQUM7QUFDQSxDQURBLEFBakNELElBaUNDO0FBQ0QsU0FsQ2EsNEJBQTRCO0FBQ3hDIiwic291cmNlc0NvbnRlbnQiOlsiLypcbiAqIENvcHlyaWdodCAoYykgMjAxNi0yMDIwIFZNd2FyZSwgSW5jLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICogVGhpcyBzb2Z0d2FyZSBpcyByZWxlYXNlZCB1bmRlciBNSVQgbGljZW5zZS5cbiAqIFRoZSBmdWxsIGxpY2Vuc2UgaW5mb3JtYXRpb24gY2FuIGJlIGZvdW5kIGluIExJQ0VOU0UgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgcHJvamVjdC5cbiAqL1xuXG5pbXBvcnQgeyBDbHJUaW1lbGluZVN0ZXBTdGF0ZSB9IGZyb20gJy4uL2VudW1zL3RpbWVsaW5lLXN0ZXAtc3RhdGUuZW51bSc7XG5pbXBvcnQgeyBJY29uQXR0cmlidXRlcyB9IGZyb20gJy4uL2ludGVyZmFjZS9pY29uLWF0dHJpYnV0ZS5pdGVyZmFjZSc7XG5pbXBvcnQgeyBDbHJDb21tb25TdHJpbmdzU2VydmljZSB9IGZyb20gJy4uLy4uL3V0aWxzL2kxOG4vY29tbW9uLXN0cmluZ3Muc2VydmljZSc7XG5pbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbkBJbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBUaW1lbGluZUljb25BdHRyaWJ1dGVTZXJ2aWNlIHtcbiAgcHJpdmF0ZSBhdHRyaWJ1dGVNYXA6IE1hcDxDbHJUaW1lbGluZVN0ZXBTdGF0ZSwgSWNvbkF0dHJpYnV0ZXM+ID0gbmV3IE1hcDxDbHJUaW1lbGluZVN0ZXBTdGF0ZSwgSWNvbkF0dHJpYnV0ZXM+KCk7XG5cbiAgY29uc3RydWN0b3IoY29tbW9uU3RyaW5nczogQ2xyQ29tbW9uU3RyaW5nc1NlcnZpY2UpIHtcbiAgICB0aGlzLmF0dHJpYnV0ZU1hcC5zZXQoQ2xyVGltZWxpbmVTdGVwU3RhdGUuTk9UX1NUQVJURUQsIHtcbiAgICAgIGljb25TaGFwZTogJ2NpcmNsZScsXG4gICAgICBhcmlhTGFiZWw6IGNvbW1vblN0cmluZ3Mua2V5cy50aW1lbGluZVN0ZXBOb3RTdGFydGVkLFxuICAgIH0pO1xuICAgIHRoaXMuYXR0cmlidXRlTWFwLnNldChDbHJUaW1lbGluZVN0ZXBTdGF0ZS5DVVJSRU5ULCB7XG4gICAgICBpY29uU2hhcGU6ICdkb3QtY2lyY2xlJyxcbiAgICAgIGFyaWFMYWJlbDogY29tbW9uU3RyaW5ncy5rZXlzLnRpbWVsaW5lU3RlcEN1cnJlbnQsXG4gICAgfSk7XG4gICAgdGhpcy5hdHRyaWJ1dGVNYXAuc2V0KENsclRpbWVsaW5lU3RlcFN0YXRlLlBST0NFU1NJTkcsIHtcbiAgICAgIGljb25TaGFwZTogdW5kZWZpbmVkLFxuICAgICAgYXJpYUxhYmVsOiBjb21tb25TdHJpbmdzLmtleXMudGltZWxpbmVTdGVwUHJvY2Vzc2luZyxcbiAgICB9KTtcbiAgICB0aGlzLmF0dHJpYnV0ZU1hcC5zZXQoQ2xyVGltZWxpbmVTdGVwU3RhdGUuU1VDQ0VTUywge1xuICAgICAgaWNvblNoYXBlOiAnc3VjY2Vzcy1zdGFuZGFyZCcsXG4gICAgICBhcmlhTGFiZWw6IGNvbW1vblN0cmluZ3Mua2V5cy50aW1lbGluZVN0ZXBTdWNjZXNzLFxuICAgIH0pO1xuICAgIHRoaXMuYXR0cmlidXRlTWFwLnNldChDbHJUaW1lbGluZVN0ZXBTdGF0ZS5FUlJPUiwge1xuICAgICAgaWNvblNoYXBlOiAnZXJyb3Itc3RhbmRhcmQnLFxuICAgICAgYXJpYUxhYmVsOiBjb21tb25TdHJpbmdzLmtleXMudGltZWxpbmVTdGVwRXJyb3IsXG4gICAgfSk7XG4gIH1cblxuICBwdWJsaWMgZ2V0QXJpYUxhYmVsKHN0ZXA6IENsclRpbWVsaW5lU3RlcFN0YXRlKTogc3RyaW5nIHtcbiAgICByZXR1cm4gdGhpcy5hdHRyaWJ1dGVNYXAuZ2V0KHN0ZXApLmFyaWFMYWJlbDtcbiAgfVxuXG4gIHB1YmxpYyBnZXRJY29uU2hhcGUoc3RlcDogQ2xyVGltZWxpbmVTdGVwU3RhdGUpOiBzdHJpbmcge1xuICAgIHJldHVybiB0aGlzLmF0dHJpYnV0ZU1hcC5nZXQoc3RlcCkuaWNvblNoYXBlO1xuICB9XG59XG4iXX0=