import { __decorate } from "tslib";
/*
 * Copyright (c) 2016-2019 VMware, Inc. All Rights Reserved.
 * This software is released under MIT license.
 * The full license information can be found in LICENSE in the root directory of this project.
 */
import { Directive, EventEmitter, Input, OnDestroy, Output, TemplateRef, ViewContainerRef } from '@angular/core';
import { ClrPopoverToggleService } from '../popover/providers/popover-toggle.service';
import * as ɵngcc0 from '@angular/core';
var ClrIfOpen = /** @class */ (function () {
    function ClrIfOpen(toggleService, template, container) {
        var _this = this;
        this.toggleService = toggleService;
        this.template = template;
        this.container = container;
        /**********
         * @property openChange
         *
         * @description
         * An event emitter that emits when the open property is set to allow for 2way binding when the directive is
         * used with de-structured / de-sugared syntax.
         */
        this.openChange = new EventEmitter(false);
        this.subscription = this.toggleService.openChange.subscribe(function (change) {
            _this.updateView(change);
            _this.openChange.emit(change);
        });
    }
    Object.defineProperty(ClrIfOpen.prototype, "open", {
        /********
         *
         * @description
         * A getter that returns the current ClrPopoverToggleService.open value.
         *
         */
        get: function () {
            return this.toggleService.open;
        },
        /*********
         *
         * @description
         * A setter that updates ClrPopoverToggleService.open with value.
         *
         * @param value
         */
        set: function (value) {
            this.toggleService.open = value;
        },
        enumerable: true,
        configurable: true
    });
    /*********
     *
     * @description
     * Function that takes a boolean value and either created an embedded view for the associated ViewContainerRef or,
     * Clears all views from the ViewContainerRef
     * @param value
     */
    ClrIfOpen.prototype.updateView = function (value) {
        if (value) {
            this.container.createEmbeddedView(this.template);
        }
        else {
            this.container.clear();
        }
    };
    ClrIfOpen.prototype.ngOnDestroy = function () {
        this.subscription.unsubscribe();
    };
    ClrIfOpen.ctorParameters = function () { return [
        { type: ClrPopoverToggleService },
        { type: TemplateRef },
        { type: ViewContainerRef }
    ]; };
    __decorate([
        Input('clrIfOpen')
    ], ClrIfOpen.prototype, "open", null);
    __decorate([
        Output('clrIfOpenChange')
    ], ClrIfOpen.prototype, "openChange", void 0);
ClrIfOpen.ɵfac = function ClrIfOpen_Factory(t) { return new (t || ClrIfOpen)(ɵngcc0.ɵɵdirectiveInject(ClrPopoverToggleService), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.TemplateRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef)); };
ClrIfOpen.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: ClrIfOpen, selectors: [["", "clrIfOpen", ""]], inputs: { open: ["clrIfOpen", "open"] }, outputs: { openChange: "clrIfOpenChange" } });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ClrIfOpen, [{
        type: Directive,
        args: [{ selector: '[clrIfOpen]' }]
    }], function () { return [{ type: ClrPopoverToggleService }, { type: ɵngcc0.TemplateRef }, { type: ɵngcc0.ViewContainerRef }]; }, { openChange: [{
            type: Output,
            args: ['clrIfOpenChange']
        }], open: [{
            type: Input,
            args: ['clrIfOpen']
        }] }); })();
    return ClrIfOpen;
}());
export { ClrIfOpen };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaWYtb3Blbi5kaXJlY3RpdmUuanMiLCJzb3VyY2VzIjpbIm5nOi9AY2xyL2FuZ3VsYXIvdXRpbHMvY29uZGl0aW9uYWwvaWYtb3Blbi5kaXJlY3RpdmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNILE9BQU8sRUFBRSxTQUFTLEVBQUUsWUFBWSxFQUFFLEtBQUssRUFBRSxTQUFTLEVBQUUsTUFBTSxFQUFFLFdBQVcsRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUdqSCxPQUFPLEVBQUUsdUJBQXVCLEVBQUUsTUFBTSw2Q0FBNkMsQ0FBQzs7QUFjdEY7QUFBNkMsSUFrQzNDLG1CQUNVLGFBQXNDLEVBQ3RDLFFBQTBCLEVBQzFCLFNBQTJCO0FBQ3BDLFFBSkQsaUJBU0M7QUFDSCxRQVRZLGtCQUFhLEdBQWIsYUFBYSxDQUF5QjtBQUFDLFFBQ3ZDLGFBQVEsR0FBUixRQUFRLENBQWtCO0FBQUMsUUFDM0IsY0FBUyxHQUFULFNBQVMsQ0FBa0I7QUFDdkMsUUF2QkU7QUFDRjtBQUVDO0FBQVc7QUFDTTtBQUNNO0FBRUEsV0FEbkI7QUFDTCxRQUE2QixlQUFVLEdBQTBCLElBQUksWUFBWSxDQUFVLEtBQUssQ0FBQyxDQUFDO0FBQ2xHLFFBZ0JJLElBQUksQ0FBQyxZQUFZLEdBQUcsSUFBSSxDQUFDLGFBQWEsQ0FBQyxVQUFVLENBQUMsU0FBUyxDQUFDLFVBQUEsTUFBTTtBQUFJLFlBQ3BFLEtBQUksQ0FBQyxVQUFVLENBQUMsTUFBTSxDQUFDLENBQUM7QUFDOUIsWUFBTSxLQUFJLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztBQUNuQyxRQUFJLENBQUMsQ0FBQyxDQUFDO0FBQ1AsSUFBRSxDQUFDO0FBQ0gsSUFqQ0Usc0JBQVcsMkJBQUk7QUFBSSxRQWFuQjtBQUNGO0FBQ007QUFDTTtBQUdMO0FBQVcsV0FEYjtBQUNMLGFBQUU7QUFBYyxZQUNaLE9BQU8sSUFBSSxDQUFDLGFBQWEsQ0FBQyxJQUFJLENBQUM7QUFDbkMsUUFBRSxDQUFDO0FBRUgsUUEvQkU7QUFDRjtBQUNNO0FBQ007QUFFQztBQUViO0FBQ0UsV0FGRztBQUNMLGFBQ0UsVUFBZ0IsS0FBYztBQUNoQyxZQUFJLElBQUksQ0FBQyxhQUFhLENBQUMsSUFBSSxHQUFHLEtBQUssQ0FBQztBQUNwQyxRQUFFLENBQUM7QUFFSDtBQUNZO0FBRUosT0FMTDtBQUNILElBK0JFO0FBQ0Y7QUFDRTtBQUNFO0FBQ0U7QUFDRTtBQUVKLE9BREM7QUFDTCxJQUFTLDhCQUFVLEdBQWpCLFVBQWtCLEtBQWM7QUFDbEMsUUFBSSxJQUFJLEtBQUssRUFBRTtBQUNmLFlBQU0sSUFBSSxDQUFDLFNBQVMsQ0FBQyxrQkFBa0IsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUM7QUFDdkQsU0FBSztBQUFDLGFBQUs7QUFDWCxZQUFNLElBQUksQ0FBQyxTQUFTLENBQUMsS0FBSyxFQUFFLENBQUM7QUFDN0IsU0FBSztBQUNMLElBQUUsQ0FBQztBQUVILElBQUUsK0JBQVcsR0FBWDtBQUFjLFFBQ1osSUFBSSxDQUFDLFlBQVksQ0FBQyxXQUFXLEVBQUUsQ0FBQztBQUNwQyxJQUFFLENBQUM7QUFDRjtBQUNvRCxnQkE3QjFCLHVCQUF1QjtBQUNoRCxnQkFBb0IsV0FBVztBQUFJLGdCQUNkLGdCQUFnQjtBQUNyQztBQUNJLElBNUJKO0FBQWEsUUFEWixLQUFLLENBQUMsV0FBVyxDQUFDO0FBQ3JCLHlDQUVHO0FBRUgsSUFPNkI7QUFBYSxRQUF2QyxNQUFNLENBQUMsaUJBQWlCLENBQUM7QUFBQyxpREFBcUU7SUF0QnJGLFNBQVMsd0JBWnJCLFNBQVMsQ0FBQyxFQUFFLFFBQVEsRUFBRSxhQUFhLEVBQUUsQ0FBQyxTQUV2Qzs7O1NBU0csUUFDVTtDQUFTLENBK0RyQjs7Ozs7OztvQkFDRDtBQUFDLElBREQsZ0JBQUM7QUFDQSxDQURBLEFBL0RELElBK0RDO0FBQ0QsU0FoRWEsU0FBUztBQUFJIiwic291cmNlc0NvbnRlbnQiOlsiLypcbiAqIENvcHlyaWdodCAoYykgMjAxNi0yMDE5IFZNd2FyZSwgSW5jLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICogVGhpcyBzb2Z0d2FyZSBpcyByZWxlYXNlZCB1bmRlciBNSVQgbGljZW5zZS5cbiAqIFRoZSBmdWxsIGxpY2Vuc2UgaW5mb3JtYXRpb24gY2FuIGJlIGZvdW5kIGluIExJQ0VOU0UgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgcHJvamVjdC5cbiAqL1xuaW1wb3J0IHsgRGlyZWN0aXZlLCBFdmVudEVtaXR0ZXIsIElucHV0LCBPbkRlc3Ryb3ksIE91dHB1dCwgVGVtcGxhdGVSZWYsIFZpZXdDb250YWluZXJSZWYgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IFN1YnNjcmlwdGlvbiB9IGZyb20gJ3J4anMnO1xuXG5pbXBvcnQgeyBDbHJQb3BvdmVyVG9nZ2xlU2VydmljZSB9IGZyb20gJy4uL3BvcG92ZXIvcHJvdmlkZXJzL3BvcG92ZXItdG9nZ2xlLnNlcnZpY2UnO1xuXG5ARGlyZWN0aXZlKHsgc2VsZWN0b3I6ICdbY2xySWZPcGVuXScgfSlcblxuLyoqKioqKioqKipcbiAqXG4gKiBAY2xhc3MgQ2xySWZPcGVuXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBBIHN0cnVjdHVyYWwgZGlyZWN0aXZlIHRoYXQgY29udHJvbHMgd2hldGhlciBvciBub3QgdGhlIGFzc29jaWF0ZWQgVGVtcGxhdGVSZWYgaXMgaW5zdGFudGlhdGVkIG9yIG5vdC5cbiAqIEl0IG1ha2VzIHVzZSBvZiBhIENvbXBvbmVudCBpbnN0YW5jZSBsZXZlbCBzZXJ2aWNlOiBDbHJQb3BvdmVyVG9nZ2xlU2VydmljZSB0byBtYWludGFpbiBzdGF0ZSBiZXR3ZWVuIGl0c2VsZiBhbmQgdGhlIGNvbXBvbmVudFxuICogdXNpbmcgaXQgaW4gdGhlIGNvbXBvbmVudCB0ZW1wbGF0ZS5cbiAqXG4gKi9cbmV4cG9ydCBjbGFzcyBDbHJJZk9wZW4gaW1wbGVtZW50cyBPbkRlc3Ryb3kge1xuICBwcml2YXRlIHN1YnNjcmlwdGlvbjogU3Vic2NyaXB0aW9uO1xuXG4gIC8qKioqKioqKipcbiAgICpcbiAgICogQGRlc2NyaXB0aW9uXG4gICAqIEEgc2V0dGVyIHRoYXQgdXBkYXRlcyBDbHJQb3BvdmVyVG9nZ2xlU2VydmljZS5vcGVuIHdpdGggdmFsdWUuXG4gICAqXG4gICAqIEBwYXJhbSB2YWx1ZVxuICAgKi9cbiAgQElucHV0KCdjbHJJZk9wZW4nKVxuICBwdWJsaWMgc2V0IG9wZW4odmFsdWU6IGJvb2xlYW4pIHtcbiAgICB0aGlzLnRvZ2dsZVNlcnZpY2Uub3BlbiA9IHZhbHVlO1xuICB9XG5cbiAgLyoqKioqKioqKipcbiAgICogQHByb3BlcnR5IG9wZW5DaGFuZ2VcbiAgICpcbiAgICogQGRlc2NyaXB0aW9uXG4gICAqIEFuIGV2ZW50IGVtaXR0ZXIgdGhhdCBlbWl0cyB3aGVuIHRoZSBvcGVuIHByb3BlcnR5IGlzIHNldCB0byBhbGxvdyBmb3IgMndheSBiaW5kaW5nIHdoZW4gdGhlIGRpcmVjdGl2ZSBpc1xuICAgKiB1c2VkIHdpdGggZGUtc3RydWN0dXJlZCAvIGRlLXN1Z2FyZWQgc3ludGF4LlxuICAgKi9cbiAgQE91dHB1dCgnY2xySWZPcGVuQ2hhbmdlJykgb3BlbkNoYW5nZTogRXZlbnRFbWl0dGVyPGJvb2xlYW4+ID0gbmV3IEV2ZW50RW1pdHRlcjxib29sZWFuPihmYWxzZSk7XG5cbiAgLyoqKioqKioqXG4gICAqXG4gICAqIEBkZXNjcmlwdGlvblxuICAgKiBBIGdldHRlciB0aGF0IHJldHVybnMgdGhlIGN1cnJlbnQgQ2xyUG9wb3ZlclRvZ2dsZVNlcnZpY2Uub3BlbiB2YWx1ZS5cbiAgICpcbiAgICovXG4gIHB1YmxpYyBnZXQgb3BlbigpIHtcbiAgICByZXR1cm4gdGhpcy50b2dnbGVTZXJ2aWNlLm9wZW47XG4gIH1cblxuICBjb25zdHJ1Y3RvcihcbiAgICBwcml2YXRlIHRvZ2dsZVNlcnZpY2U6IENsclBvcG92ZXJUb2dnbGVTZXJ2aWNlLFxuICAgIHByaXZhdGUgdGVtcGxhdGU6IFRlbXBsYXRlUmVmPGFueT4sXG4gICAgcHJpdmF0ZSBjb250YWluZXI6IFZpZXdDb250YWluZXJSZWZcbiAgKSB7XG4gICAgdGhpcy5zdWJzY3JpcHRpb24gPSB0aGlzLnRvZ2dsZVNlcnZpY2Uub3BlbkNoYW5nZS5zdWJzY3JpYmUoY2hhbmdlID0+IHtcbiAgICAgIHRoaXMudXBkYXRlVmlldyhjaGFuZ2UpO1xuICAgICAgdGhpcy5vcGVuQ2hhbmdlLmVtaXQoY2hhbmdlKTtcbiAgICB9KTtcbiAgfVxuXG4gIC8qKioqKioqKipcbiAgICpcbiAgICogQGRlc2NyaXB0aW9uXG4gICAqIEZ1bmN0aW9uIHRoYXQgdGFrZXMgYSBib29sZWFuIHZhbHVlIGFuZCBlaXRoZXIgY3JlYXRlZCBhbiBlbWJlZGRlZCB2aWV3IGZvciB0aGUgYXNzb2NpYXRlZCBWaWV3Q29udGFpbmVyUmVmIG9yLFxuICAgKiBDbGVhcnMgYWxsIHZpZXdzIGZyb20gdGhlIFZpZXdDb250YWluZXJSZWZcbiAgICogQHBhcmFtIHZhbHVlXG4gICAqL1xuICBwdWJsaWMgdXBkYXRlVmlldyh2YWx1ZTogYm9vbGVhbikge1xuICAgIGlmICh2YWx1ZSkge1xuICAgICAgdGhpcy5jb250YWluZXIuY3JlYXRlRW1iZWRkZWRWaWV3KHRoaXMudGVtcGxhdGUpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLmNvbnRhaW5lci5jbGVhcigpO1xuICAgIH1cbiAgfVxuXG4gIG5nT25EZXN0cm95KCkge1xuICAgIHRoaXMuc3Vic2NyaXB0aW9uLnVuc3Vic2NyaWJlKCk7XG4gIH1cbn1cbiJdfQ==