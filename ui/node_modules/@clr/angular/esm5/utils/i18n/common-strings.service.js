import { __assign, __decorate } from "tslib";
/*
 * Copyright (c) 2016-2020 VMware, Inc. All Rights Reserved.
 * This software is released under MIT license.
 * The full license information can be found in LICENSE in the root directory of this project.
 */
import { Injectable } from '@angular/core';
import { commonStringsDefault } from './../../utils/i18n/common-strings.default';
import * as i0 from "@angular/core";
import * as ɵngcc0 from '@angular/core';
var ClrCommonStringsService = /** @class */ (function () {
    function ClrCommonStringsService() {
        this._strings = commonStringsDefault;
    }
    /**
     * Allows you to pass in new overrides for localization
     */
    ClrCommonStringsService.prototype.localize = function (overrides) {
        this._strings = __assign(__assign({}, this._strings), overrides);
    };
    Object.defineProperty(ClrCommonStringsService.prototype, "keys", {
        /**
         * Access to all of the keys as strings
         */
        get: function () {
            return this._strings;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Parse a string with a set of tokens to replace
     */
    ClrCommonStringsService.prototype.parse = function (source, tokens) {
        if (tokens === void 0) { tokens = {}; }
        var names = Object.keys(tokens);
        var output = source;
        if (names.length) {
            names.forEach(function (name) {
                output = output.replace("{" + name + "}", tokens[name]);
            });
        }
        return output;
    };
    ClrCommonStringsService.ɵprov = i0.ɵɵdefineInjectable({ factory: function ClrCommonStringsService_Factory() { return new ClrCommonStringsService(); }, token: ClrCommonStringsService, providedIn: "root" });
ClrCommonStringsService.ɵfac = function ClrCommonStringsService_Factory(t) { return new (t || ClrCommonStringsService)(); };
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ClrCommonStringsService, [{
        type: Injectable,
        args: [{
                providedIn: 'root'
            }]
    }], function () { return []; }, null); })();
    return ClrCommonStringsService;
}());
export { ClrCommonStringsService };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29tbW9uLXN0cmluZ3Muc2VydmljZS5qcyIsInNvdXJjZXMiOlsibmc6L0BjbHIvYW5ndWxhci91dGlscy9pMThuL2NvbW1vbi1zdHJpbmdzLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUVILE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFFM0MsT0FBTyxFQUFFLG9CQUFvQixFQUFFLE1BQU0sMkNBQTJDLENBQUM7QUFDakY7O0FBS0E7QUFDb0IsSUFEcEI7QUFBcUMsUUFDM0IsYUFBUSxHQUFHLG9CQUFvQixDQUFDO0FBQzFDLEtBNEJDO0FBQ0QsSUE1QkU7QUFDRjtBQUNFLE9BQUc7QUFDTCxJQUFFLDBDQUFRLEdBQVIsVUFBUyxTQUFvQztBQUMvQyxRQUFJLElBQUksQ0FBQyxRQUFRLHlCQUFRLElBQUksQ0FBQyxRQUFRLEdBQUssU0FBUyxDQUFFLENBQUM7QUFDdkQsSUFBRSxDQUFDO0FBRUgsSUFHRSxzQkFBSSx5Q0FBSTtBQUFJLFFBSFo7QUFDRjtBQUVBLFdBREs7QUFDTCxhQUFFO0FBQWMsWUFDWixPQUFPLElBQUksQ0FBQyxRQUFRLENBQUM7QUFDekIsUUFBRSxDQUFDO0FBRUg7QUFDb0I7QUFBMkIsT0FINUM7QUFDSCxJQUNFO0FBQ0Y7QUFDRSxPQUFHO0FBQ0wsSUFBRSx1Q0FBSyxHQUFMLFVBQU0sTUFBYyxFQUFFLE1BQXNDO0FBQzlELFFBRHdCLHVCQUFBLEVBQUEsV0FBc0M7QUFDOUQsUUFBSSxJQUFNLEtBQUssR0FBRyxNQUFNLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO0FBQ3RDLFFBQUksSUFBSSxNQUFNLEdBQUcsTUFBTSxDQUFDO0FBQ3hCLFFBQUksSUFBSSxLQUFLLENBQUMsTUFBTSxFQUFFO0FBQ3RCLFlBQU0sS0FBSyxDQUFDLE9BQU8sQ0FBQyxVQUFBLElBQUk7QUFBSSxnQkFDcEIsTUFBTSxHQUFHLE1BQU0sQ0FBQyxPQUFPLENBQUMsTUFBSSxJQUFJLE1BQUcsRUFBRSxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQztBQUMzRCxZQUFNLENBQUMsQ0FBQyxDQUFDO0FBQ1QsU0FBSztBQUNMLFFBQUksT0FBTyxNQUFNLENBQUM7QUFDbEIsSUFBRSxDQUFDO0FBQ0Y7SUE5QlksdUJBQXVCLHdCQUhuQyxVQUFVLENBQUMsY0FDVixVQUFVLEVBQUUsTUFBTSxXQUNuQixDQUFDLFFBQ1c7WUFBdUIsQ0E4Qm5DOzs7OztnREFDRDtBQUFDLGtDQTdDRDtBQUFFLENBNENELEFBOUJELElBOEJDO0FBQ0QsU0EvQmEsdUJBQXVCO0FBQ25DIiwic291cmNlc0NvbnRlbnQiOlsiLypcbiAqIENvcHlyaWdodCAoYykgMjAxNi0yMDIwIFZNd2FyZSwgSW5jLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICogVGhpcyBzb2Z0d2FyZSBpcyByZWxlYXNlZCB1bmRlciBNSVQgbGljZW5zZS5cbiAqIFRoZSBmdWxsIGxpY2Vuc2UgaW5mb3JtYXRpb24gY2FuIGJlIGZvdW5kIGluIExJQ0VOU0UgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgcHJvamVjdC5cbiAqL1xuXG5pbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbmltcG9ydCB7IGNvbW1vblN0cmluZ3NEZWZhdWx0IH0gZnJvbSAnLi8uLi8uLi91dGlscy9pMThuL2NvbW1vbi1zdHJpbmdzLmRlZmF1bHQnO1xuaW1wb3J0IHsgQ2xyQ29tbW9uU3RyaW5ncyB9IGZyb20gJy4vLi4vLi4vdXRpbHMvaTE4bi9jb21tb24tc3RyaW5ncy5pbnRlcmZhY2UnO1xuXG5ASW5qZWN0YWJsZSh7XG4gIHByb3ZpZGVkSW46ICdyb290Jyxcbn0pXG5leHBvcnQgY2xhc3MgQ2xyQ29tbW9uU3RyaW5nc1NlcnZpY2Uge1xuICBwcml2YXRlIF9zdHJpbmdzID0gY29tbW9uU3RyaW5nc0RlZmF1bHQ7XG5cbiAgLyoqXG4gICAqIEFsbG93cyB5b3UgdG8gcGFzcyBpbiBuZXcgb3ZlcnJpZGVzIGZvciBsb2NhbGl6YXRpb25cbiAgICovXG4gIGxvY2FsaXplKG92ZXJyaWRlczogUGFydGlhbDxDbHJDb21tb25TdHJpbmdzPikge1xuICAgIHRoaXMuX3N0cmluZ3MgPSB7IC4uLnRoaXMuX3N0cmluZ3MsIC4uLm92ZXJyaWRlcyB9O1xuICB9XG5cbiAgLyoqXG4gICAqIEFjY2VzcyB0byBhbGwgb2YgdGhlIGtleXMgYXMgc3RyaW5nc1xuICAgKi9cbiAgZ2V0IGtleXMoKTogUmVhZG9ubHk8Q2xyQ29tbW9uU3RyaW5ncz4ge1xuICAgIHJldHVybiB0aGlzLl9zdHJpbmdzO1xuICB9XG5cbiAgLyoqXG4gICAqIFBhcnNlIGEgc3RyaW5nIHdpdGggYSBzZXQgb2YgdG9rZW5zIHRvIHJlcGxhY2VcbiAgICovXG4gIHBhcnNlKHNvdXJjZTogc3RyaW5nLCB0b2tlbnM6IHsgW2tleTogc3RyaW5nXTogc3RyaW5nIH0gPSB7fSkge1xuICAgIGNvbnN0IG5hbWVzID0gT2JqZWN0LmtleXModG9rZW5zKTtcbiAgICBsZXQgb3V0cHV0ID0gc291cmNlO1xuICAgIGlmIChuYW1lcy5sZW5ndGgpIHtcbiAgICAgIG5hbWVzLmZvckVhY2gobmFtZSA9PiB7XG4gICAgICAgIG91dHB1dCA9IG91dHB1dC5yZXBsYWNlKGB7JHtuYW1lfX1gLCB0b2tlbnNbbmFtZV0pO1xuICAgICAgfSk7XG4gICAgfVxuICAgIHJldHVybiBvdXRwdXQ7XG4gIH1cbn1cbiJdfQ==