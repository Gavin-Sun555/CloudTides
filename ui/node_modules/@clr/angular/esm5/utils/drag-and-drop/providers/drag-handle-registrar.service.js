import { __decorate } from "tslib";
/*
 * Copyright (c) 2016-2018 VMware, Inc. All Rights Reserved.
 * This software is released under MIT license.
 * The full license information can be found in LICENSE in the root directory of this project.
 */
import { Injectable, Renderer2 } from '@angular/core';
import { DragEventListenerService } from './drag-event-listener.service';
// This provider registers the drag handle element.
// When it registers a element as a drag handle, it attaches that element to the listeners from ClrDragEventListener.
// Also, it adds the "drag-handle" css class to the registered element through Renderer.
import * as ɵngcc0 from '@angular/core';
var DragHandleRegistrarService = /** @class */ (function () {
    function DragHandleRegistrarService(dragEventListener, renderer) {
        this.dragEventListener = dragEventListener;
        this.renderer = renderer;
    }
    Object.defineProperty(DragHandleRegistrarService.prototype, "defaultHandleEl", {
        get: function () {
            return this._defaultHandleEl;
        },
        set: function (el) {
            this._defaultHandleEl = el; // defaultHandleEl will be usually the clrDraggable element.
            // If the customHandleEl has been registered,
            // don't make the defaultHandleEl the drag handle yet until the customHandleEl is unregistered.
            if (!this._customHandleEl) {
                this.makeElementHandle(this._defaultHandleEl);
            }
        },
        enumerable: true,
        configurable: true
    });
    DragHandleRegistrarService.prototype.makeElementHandle = function (el) {
        if (this._defaultHandleEl && this._defaultHandleEl !== el) {
            // Before making an element the custom handle element,
            // we should remove the existing drag-handle class from the draggable element.
            this.renderer.removeClass(this._defaultHandleEl, 'drag-handle');
        }
        this.dragEventListener.attachDragListeners(el);
        this.renderer.addClass(el, 'drag-handle');
    };
    Object.defineProperty(DragHandleRegistrarService.prototype, "customHandleEl", {
        get: function () {
            return this._customHandleEl;
        },
        enumerable: true,
        configurable: true
    });
    DragHandleRegistrarService.prototype.registerCustomHandle = function (el) {
        this.dragEventListener.detachDragListeners(); // removes the existing listeners
        this._customHandleEl = el;
        this.makeElementHandle(this._customHandleEl);
    };
    DragHandleRegistrarService.prototype.unregisterCustomHandle = function () {
        this.dragEventListener.detachDragListeners(); // removes the existing listeners
        this.renderer.removeClass(this._customHandleEl, 'drag-handle');
        delete this._customHandleEl;
        // if default handle is set, make that handle
        if (this._defaultHandleEl) {
            this.makeElementHandle(this._defaultHandleEl);
        }
    };
    DragHandleRegistrarService.ctorParameters = function () { return [
        { type: DragEventListenerService },
        { type: Renderer2 }
    ]; };
DragHandleRegistrarService.ɵfac = function DragHandleRegistrarService_Factory(t) { return new (t || DragHandleRegistrarService)(ɵngcc0.ɵɵinject(DragEventListenerService), ɵngcc0.ɵɵinject(ɵngcc0.Renderer2)); };
DragHandleRegistrarService.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: DragHandleRegistrarService, factory: function (t) { return DragHandleRegistrarService.ɵfac(t); } });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(DragHandleRegistrarService, [{
        type: Injectable
    }], function () { return [{ type: DragEventListenerService }, { type: ɵngcc0.Renderer2 }]; }, null); })();
    return DragHandleRegistrarService;
}());
export { DragHandleRegistrarService };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZHJhZy1oYW5kbGUtcmVnaXN0cmFyLnNlcnZpY2UuanMiLCJzb3VyY2VzIjpbIm5nOi9AY2xyL2FuZ3VsYXIvdXRpbHMvZHJhZy1hbmQtZHJvcC9wcm92aWRlcnMvZHJhZy1oYW5kbGUtcmVnaXN0cmFyLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNILE9BQU8sRUFBRSxVQUFVLEVBQUUsU0FBUyxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBRXRELE9BQU8sRUFBRSx3QkFBd0IsRUFBRSxNQUFNLCtCQUErQixDQUFDO0FBRXpFLG1EQUFtRDtBQUNuRCxxSEFBcUg7QUFDckgsd0ZBQXdGOztBQUV4RjtBQUNpQixJQWlCZixvQ0FBb0IsaUJBQThDLEVBQVUsUUFBbUI7QUFBSSxRQUEvRSxzQkFBaUIsR0FBakIsaUJBQWlCLENBQTZCO0FBQUMsUUFBUyxhQUFRLEdBQVIsUUFBUSxDQUFXO0FBQUMsSUFBRSxDQUFDO0FBQ3JHLElBZkUsc0JBQUksdURBQWU7QUFBSSxhQUF2QjtBQUFjLFlBQ1osT0FBTyxJQUFJLENBQUMsZ0JBQWdCLENBQUM7QUFDakMsUUFBRSxDQUFDO0FBRUgsYUFBRSxVQUFvQixFQUFRO0FBQzlCLFlBQUksSUFBSSxDQUFDLGdCQUFnQixHQUFHLEVBQUUsQ0FBQyxDQUFDLDREQUE0RDtBQUM1RixZQUNJLDZDQUE2QztBQUNqRCxZQUFJLCtGQUErRjtBQUNuRyxZQUFJLElBQUksQ0FBQyxJQUFJLENBQUMsZUFBZSxFQUFFO0FBQy9CLGdCQUFNLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxJQUFJLENBQUMsZ0JBQWdCLENBQUMsQ0FBQztBQUNwRCxhQUFLO0FBQ0wsUUFBRSxDQUFDO0FBRUg7QUFBMEI7QUFBMkIsT0FabEQ7QUFDSCxJQWFVLHNEQUFpQixHQUF6QixVQUEwQixFQUFRO0FBQ3BDLFFBQUksSUFBSSxJQUFJLENBQUMsZ0JBQWdCLElBQUksSUFBSSxDQUFDLGdCQUFnQixLQUFLLEVBQUUsRUFBRTtBQUMvRCxZQUFNLHNEQUFzRDtBQUM1RCxZQUFNLDhFQUE4RTtBQUNwRixZQUFNLElBQUksQ0FBQyxRQUFRLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxnQkFBZ0IsRUFBRSxhQUFhLENBQUMsQ0FBQztBQUN0RSxTQUFLO0FBQ0wsUUFBSSxJQUFJLENBQUMsaUJBQWlCLENBQUMsbUJBQW1CLENBQUMsRUFBRSxDQUFDLENBQUM7QUFDbkQsUUFBSSxJQUFJLENBQUMsUUFBUSxDQUFDLFFBQVEsQ0FBQyxFQUFFLEVBQUUsYUFBYSxDQUFDLENBQUM7QUFDOUMsSUFBRSxDQUFDO0FBRUgsSUFBRSxzQkFBSSxzREFBYztBQUFJLGFBQXRCO0FBQWMsWUFDWixPQUFPLElBQUksQ0FBQyxlQUFlLENBQUM7QUFDaEMsUUFBRSxDQUFDO0FBRUg7QUFBMEI7QUFDZixPQUhSO0FBQ0gsSUFDUyx5REFBb0IsR0FBM0IsVUFBNEIsRUFBUTtBQUN0QyxRQUFJLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxtQkFBbUIsRUFBRSxDQUFDLENBQUMsaUNBQWlDO0FBQ25GLFFBQUksSUFBSSxDQUFDLGVBQWUsR0FBRyxFQUFFLENBQUM7QUFDOUIsUUFBSSxJQUFJLENBQUMsaUJBQWlCLENBQUMsSUFBSSxDQUFDLGVBQWUsQ0FBQyxDQUFDO0FBQ2pELElBQUUsQ0FBQztBQUVILElBQVMsMkRBQXNCLEdBQTdCO0FBQWMsUUFDWixJQUFJLENBQUMsaUJBQWlCLENBQUMsbUJBQW1CLEVBQUUsQ0FBQyxDQUFDLGlDQUFpQztBQUNuRixRQUFJLElBQUksQ0FBQyxRQUFRLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxlQUFlLEVBQUUsYUFBYSxDQUFDLENBQUM7QUFDbkUsUUFBSSxPQUFPLElBQUksQ0FBQyxlQUFlLENBQUM7QUFDaEMsUUFBSSw2Q0FBNkM7QUFDakQsUUFBSSxJQUFJLElBQUksQ0FBQyxnQkFBZ0IsRUFBRTtBQUMvQixZQUFNLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxJQUFJLENBQUMsZ0JBQWdCLENBQUMsQ0FBQztBQUNwRCxTQUFLO0FBQ0wsSUFBRSxDQUFDO0FBQ0Y7QUFDcUUsZ0JBaEM3Qix3QkFBd0I7QUFBSSxnQkFBbUIsU0FBUztBQUFHO0lBbEJ2RiwwQkFBMEIsd0JBRHRDLFVBQVUsRUFBRSxRQUNBLDBCQUEwQixDQWlEdEM7Ozs7OEdBQ0Q7QUFBQyxJQURELGlDQUFDO0FBQ0EsQ0FEQSxBQWpERCxJQWlEQztBQUNELFNBbERhLDBCQUEwQjtBQUFJIiwic291cmNlc0NvbnRlbnQiOlsiLypcbiAqIENvcHlyaWdodCAoYykgMjAxNi0yMDE4IFZNd2FyZSwgSW5jLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICogVGhpcyBzb2Z0d2FyZSBpcyByZWxlYXNlZCB1bmRlciBNSVQgbGljZW5zZS5cbiAqIFRoZSBmdWxsIGxpY2Vuc2UgaW5mb3JtYXRpb24gY2FuIGJlIGZvdW5kIGluIExJQ0VOU0UgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgcHJvamVjdC5cbiAqL1xuaW1wb3J0IHsgSW5qZWN0YWJsZSwgUmVuZGVyZXIyIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbmltcG9ydCB7IERyYWdFdmVudExpc3RlbmVyU2VydmljZSB9IGZyb20gJy4vZHJhZy1ldmVudC1saXN0ZW5lci5zZXJ2aWNlJztcblxuLy8gVGhpcyBwcm92aWRlciByZWdpc3RlcnMgdGhlIGRyYWcgaGFuZGxlIGVsZW1lbnQuXG4vLyBXaGVuIGl0IHJlZ2lzdGVycyBhIGVsZW1lbnQgYXMgYSBkcmFnIGhhbmRsZSwgaXQgYXR0YWNoZXMgdGhhdCBlbGVtZW50IHRvIHRoZSBsaXN0ZW5lcnMgZnJvbSBDbHJEcmFnRXZlbnRMaXN0ZW5lci5cbi8vIEFsc28sIGl0IGFkZHMgdGhlIFwiZHJhZy1oYW5kbGVcIiBjc3MgY2xhc3MgdG8gdGhlIHJlZ2lzdGVyZWQgZWxlbWVudCB0aHJvdWdoIFJlbmRlcmVyLlxuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIERyYWdIYW5kbGVSZWdpc3RyYXJTZXJ2aWNlPFQ+IHtcbiAgcHJpdmF0ZSBfY3VzdG9tSGFuZGxlRWw6IGFueTtcbiAgcHJpdmF0ZSBfZGVmYXVsdEhhbmRsZUVsOiBhbnk7XG5cbiAgZ2V0IGRlZmF1bHRIYW5kbGVFbCgpIHtcbiAgICByZXR1cm4gdGhpcy5fZGVmYXVsdEhhbmRsZUVsO1xuICB9XG5cbiAgc2V0IGRlZmF1bHRIYW5kbGVFbChlbDogTm9kZSkge1xuICAgIHRoaXMuX2RlZmF1bHRIYW5kbGVFbCA9IGVsOyAvLyBkZWZhdWx0SGFuZGxlRWwgd2lsbCBiZSB1c3VhbGx5IHRoZSBjbHJEcmFnZ2FibGUgZWxlbWVudC5cblxuICAgIC8vIElmIHRoZSBjdXN0b21IYW5kbGVFbCBoYXMgYmVlbiByZWdpc3RlcmVkLFxuICAgIC8vIGRvbid0IG1ha2UgdGhlIGRlZmF1bHRIYW5kbGVFbCB0aGUgZHJhZyBoYW5kbGUgeWV0IHVudGlsIHRoZSBjdXN0b21IYW5kbGVFbCBpcyB1bnJlZ2lzdGVyZWQuXG4gICAgaWYgKCF0aGlzLl9jdXN0b21IYW5kbGVFbCkge1xuICAgICAgdGhpcy5tYWtlRWxlbWVudEhhbmRsZSh0aGlzLl9kZWZhdWx0SGFuZGxlRWwpO1xuICAgIH1cbiAgfVxuXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgZHJhZ0V2ZW50TGlzdGVuZXI6IERyYWdFdmVudExpc3RlbmVyU2VydmljZTxUPiwgcHJpdmF0ZSByZW5kZXJlcjogUmVuZGVyZXIyKSB7fVxuXG4gIHByaXZhdGUgbWFrZUVsZW1lbnRIYW5kbGUoZWw6IE5vZGUpIHtcbiAgICBpZiAodGhpcy5fZGVmYXVsdEhhbmRsZUVsICYmIHRoaXMuX2RlZmF1bHRIYW5kbGVFbCAhPT0gZWwpIHtcbiAgICAgIC8vIEJlZm9yZSBtYWtpbmcgYW4gZWxlbWVudCB0aGUgY3VzdG9tIGhhbmRsZSBlbGVtZW50LFxuICAgICAgLy8gd2Ugc2hvdWxkIHJlbW92ZSB0aGUgZXhpc3RpbmcgZHJhZy1oYW5kbGUgY2xhc3MgZnJvbSB0aGUgZHJhZ2dhYmxlIGVsZW1lbnQuXG4gICAgICB0aGlzLnJlbmRlcmVyLnJlbW92ZUNsYXNzKHRoaXMuX2RlZmF1bHRIYW5kbGVFbCwgJ2RyYWctaGFuZGxlJyk7XG4gICAgfVxuICAgIHRoaXMuZHJhZ0V2ZW50TGlzdGVuZXIuYXR0YWNoRHJhZ0xpc3RlbmVycyhlbCk7XG4gICAgdGhpcy5yZW5kZXJlci5hZGRDbGFzcyhlbCwgJ2RyYWctaGFuZGxlJyk7XG4gIH1cblxuICBnZXQgY3VzdG9tSGFuZGxlRWwoKSB7XG4gICAgcmV0dXJuIHRoaXMuX2N1c3RvbUhhbmRsZUVsO1xuICB9XG5cbiAgcHVibGljIHJlZ2lzdGVyQ3VzdG9tSGFuZGxlKGVsOiBOb2RlKSB7XG4gICAgdGhpcy5kcmFnRXZlbnRMaXN0ZW5lci5kZXRhY2hEcmFnTGlzdGVuZXJzKCk7IC8vIHJlbW92ZXMgdGhlIGV4aXN0aW5nIGxpc3RlbmVyc1xuICAgIHRoaXMuX2N1c3RvbUhhbmRsZUVsID0gZWw7XG4gICAgdGhpcy5tYWtlRWxlbWVudEhhbmRsZSh0aGlzLl9jdXN0b21IYW5kbGVFbCk7XG4gIH1cblxuICBwdWJsaWMgdW5yZWdpc3RlckN1c3RvbUhhbmRsZSgpIHtcbiAgICB0aGlzLmRyYWdFdmVudExpc3RlbmVyLmRldGFjaERyYWdMaXN0ZW5lcnMoKTsgLy8gcmVtb3ZlcyB0aGUgZXhpc3RpbmcgbGlzdGVuZXJzXG4gICAgdGhpcy5yZW5kZXJlci5yZW1vdmVDbGFzcyh0aGlzLl9jdXN0b21IYW5kbGVFbCwgJ2RyYWctaGFuZGxlJyk7XG4gICAgZGVsZXRlIHRoaXMuX2N1c3RvbUhhbmRsZUVsO1xuICAgIC8vIGlmIGRlZmF1bHQgaGFuZGxlIGlzIHNldCwgbWFrZSB0aGF0IGhhbmRsZVxuICAgIGlmICh0aGlzLl9kZWZhdWx0SGFuZGxlRWwpIHtcbiAgICAgIHRoaXMubWFrZUVsZW1lbnRIYW5kbGUodGhpcy5fZGVmYXVsdEhhbmRsZUVsKTtcbiAgICB9XG4gIH1cbn1cbiJdfQ==