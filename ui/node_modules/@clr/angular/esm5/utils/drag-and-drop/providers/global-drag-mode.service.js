import { __decorate } from "tslib";
/*
 * Copyright (c) 2016-2018 VMware, Inc. All Rights Reserved.
 * This software is released under MIT license.
 * The full license information can be found in LICENSE in the root directory of this project.
 */
import { Injectable, Renderer2 } from '@angular/core';
// This service class adds and removes the "in-drag" class to the document body element
// through its public enter() and exit() methods.
import * as ɵngcc0 from '@angular/core';
var GlobalDragModeService = /** @class */ (function () {
    function GlobalDragModeService(renderer) {
        this.renderer = renderer;
    }
    GlobalDragModeService.prototype.enter = function () {
        this.renderer.addClass(document.body, 'in-drag');
    };
    GlobalDragModeService.prototype.exit = function () {
        this.renderer.removeClass(document.body, 'in-drag');
    };
    GlobalDragModeService.ctorParameters = function () { return [
        { type: Renderer2 }
    ]; };
GlobalDragModeService.ɵfac = function GlobalDragModeService_Factory(t) { return new (t || GlobalDragModeService)(ɵngcc0.ɵɵinject(ɵngcc0.Renderer2)); };
GlobalDragModeService.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: GlobalDragModeService, factory: function (t) { return GlobalDragModeService.ɵfac(t); } });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(GlobalDragModeService, [{
        type: Injectable
    }], function () { return [{ type: ɵngcc0.Renderer2 }]; }, null); })();
    return GlobalDragModeService;
}());
export { GlobalDragModeService };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ2xvYmFsLWRyYWctbW9kZS5zZXJ2aWNlLmpzIiwic291cmNlcyI6WyJuZzovQGNsci9hbmd1bGFyL3V0aWxzL2RyYWctYW5kLWRyb3AvcHJvdmlkZXJzL2dsb2JhbC1kcmFnLW1vZGUuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0gsT0FBTyxFQUFFLFVBQVUsRUFBRSxTQUFTLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFFdEQsdUZBQXVGO0FBQ3ZGLGlEQUFpRDs7QUFFakQ7QUFDb0IsSUFBbEIsK0JBQW9CLFFBQW1CO0FBQUksUUFBdkIsYUFBUSxHQUFSLFFBQVEsQ0FBVztBQUFDLElBQUUsQ0FBQztBQUM3QyxJQUNFLHFDQUFLLEdBQUw7QUFBYyxRQUNaLElBQUksQ0FBQyxRQUFRLENBQUMsUUFBUSxDQUFDLFFBQVEsQ0FBQyxJQUFJLEVBQUUsU0FBUyxDQUFDLENBQUM7QUFDckQsSUFBRSxDQUFDO0FBRUgsSUFBRSxvQ0FBSSxHQUFKO0FBQWMsUUFDWixJQUFJLENBQUMsUUFBUSxDQUFDLFdBQVcsQ0FBQyxRQUFRLENBQUMsSUFBSSxFQUFFLFNBQVMsQ0FBQyxDQUFDO0FBQ3hELElBQUUsQ0FBQztBQUNGO0FBQ2dFLGdCQVZqQyxTQUFTO0FBQUc7SUFEL0IscUJBQXFCLHdCQURqQyxVQUFVLEVBQUUsUUFDQSxxQkFBcUIsQ0FVakM7Ozs7MEVBQ0Q7QUFBQyxJQURELDRCQUFDO0FBQ0EsQ0FEQSxBQVZELElBVUM7QUFDRCxTQVhhLHFCQUFxQjtBQUNqQyIsInNvdXJjZXNDb250ZW50IjpbIi8qXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTYtMjAxOCBWTXdhcmUsIEluYy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqIFRoaXMgc29mdHdhcmUgaXMgcmVsZWFzZWQgdW5kZXIgTUlUIGxpY2Vuc2UuXG4gKiBUaGUgZnVsbCBsaWNlbnNlIGluZm9ybWF0aW9uIGNhbiBiZSBmb3VuZCBpbiBMSUNFTlNFIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHByb2plY3QuXG4gKi9cbmltcG9ydCB7IEluamVjdGFibGUsIFJlbmRlcmVyMiB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG4vLyBUaGlzIHNlcnZpY2UgY2xhc3MgYWRkcyBhbmQgcmVtb3ZlcyB0aGUgXCJpbi1kcmFnXCIgY2xhc3MgdG8gdGhlIGRvY3VtZW50IGJvZHkgZWxlbWVudFxuLy8gdGhyb3VnaCBpdHMgcHVibGljIGVudGVyKCkgYW5kIGV4aXQoKSBtZXRob2RzLlxuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIEdsb2JhbERyYWdNb2RlU2VydmljZSB7XG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgcmVuZGVyZXI6IFJlbmRlcmVyMikge31cblxuICBlbnRlcigpOiB2b2lkIHtcbiAgICB0aGlzLnJlbmRlcmVyLmFkZENsYXNzKGRvY3VtZW50LmJvZHksICdpbi1kcmFnJyk7XG4gIH1cblxuICBleGl0KCk6IHZvaWQge1xuICAgIHRoaXMucmVuZGVyZXIucmVtb3ZlQ2xhc3MoZG9jdW1lbnQuYm9keSwgJ2luLWRyYWcnKTtcbiAgfVxufVxuIl19