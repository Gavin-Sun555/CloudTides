import { __decorate } from "tslib";
/*
 * Copyright (c) 2016-2020 VMware, Inc. All Rights Reserved.
 * This software is released under MIT license.
 * The full license information can be found in LICENSE in the root directory of this project.
 */
import { AfterContentInit, ComponentFactory, ComponentFactoryResolver, ContentChild, Directive, ElementRef, EventEmitter, Injector, OnDestroy, Output, ViewContainerRef, } from '@angular/core';
import { Input } from '@angular/core';
import { DomAdapter } from '../../dom-adapter/dom-adapter';
import { ClrDragEvent } from '../drag-event';
import { ClrDraggableGhost } from '../draggable-ghost';
import { ClrIfDragged } from '../if-dragged';
import { DragEventListenerService } from '../providers/drag-event-listener.service';
import { DragHandleRegistrarService } from '../providers/drag-handle-registrar.service';
import { DraggableSnapshotService } from '../providers/draggable-snapshot.service';
import { GlobalDragModeService } from '../providers/global-drag-mode.service';
import * as ɵngcc0 from '@angular/core';
var ClrDraggable = /** @class */ (function () {
    function ClrDraggable(el, dragEventListener, dragHandleRegistrar, viewContainerRef, cfr, injector, draggableSnapshot, globalDragMode) {
        this.el = el;
        this.dragEventListener = dragEventListener;
        this.dragHandleRegistrar = dragHandleRegistrar;
        this.viewContainerRef = viewContainerRef;
        this.cfr = cfr;
        this.injector = injector;
        this.draggableSnapshot = draggableSnapshot;
        this.globalDragMode = globalDragMode;
        this.subscriptions = [];
        this.dragOn = false;
        this.dragStartEmitter = new EventEmitter();
        this.dragMoveEmitter = new EventEmitter();
        this.dragEndEmitter = new EventEmitter();
        this.draggableEl = this.el.nativeElement;
        this.componentFactory = this.cfr.resolveComponentFactory(ClrDraggableGhost);
    }
    Object.defineProperty(ClrDraggable.prototype, "dataTransfer", {
        set: function (value) {
            this.dragEventListener.dragDataTransfer = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ClrDraggable.prototype, "group", {
        set: function (value) {
            this.dragEventListener.group = value;
        },
        enumerable: true,
        configurable: true
    });
    ClrDraggable.prototype.createDefaultGhost = function (event) {
        this.draggableSnapshot.capture(this.draggableEl, event);
        // NOTE: The default ghost element will appear
        // next to the clrDraggable in the DOM as a sibling element.
        this.viewContainerRef.createComponent(this.componentFactory, 0, this.injector, [
            [this.draggableEl.cloneNode(true)],
        ]);
    };
    ClrDraggable.prototype.destroyDefaultGhost = function () {
        this.viewContainerRef.clear();
        this.draggableSnapshot.discard();
    };
    ClrDraggable.prototype.ngAfterContentInit = function () {
        var _this = this;
        this.dragHandleRegistrar.defaultHandleEl = this.draggableEl;
        this.subscriptions.push(this.dragEventListener.dragStarted.subscribe(function (event) {
            _this.globalDragMode.enter();
            _this.dragOn = true;
            if (!_this.customGhost) {
                _this.createDefaultGhost(event);
            }
            _this.dragStartEmitter.emit(new ClrDragEvent(event));
        }));
        this.subscriptions.push(this.dragEventListener.dragMoved.subscribe(function (event) {
            _this.dragMoveEmitter.emit(new ClrDragEvent(event));
        }));
        this.subscriptions.push(this.dragEventListener.dragEnded.subscribe(function (event) {
            _this.globalDragMode.exit();
            _this.dragOn = false;
            if (!_this.customGhost) {
                _this.destroyDefaultGhost();
            }
            _this.dragEndEmitter.emit(new ClrDragEvent(event));
        }));
    };
    ClrDraggable.prototype.ngOnDestroy = function () {
        this.subscriptions.forEach(function (sub) { return sub.unsubscribe(); });
        this.dragEventListener.detachDragListeners();
    };
    ClrDraggable.ctorParameters = function () { return [
        { type: ElementRef },
        { type: DragEventListenerService },
        { type: DragHandleRegistrarService },
        { type: ViewContainerRef },
        { type: ComponentFactoryResolver },
        { type: Injector },
        { type: DraggableSnapshotService },
        { type: GlobalDragModeService }
    ]; };
    __decorate([
        ContentChild(ClrIfDragged)
    ], ClrDraggable.prototype, "customGhost", void 0);
    __decorate([
        Input('clrDraggable')
    ], ClrDraggable.prototype, "dataTransfer", null);
    __decorate([
        Input('clrGroup')
    ], ClrDraggable.prototype, "group", null);
    __decorate([
        Output('clrDragStart')
    ], ClrDraggable.prototype, "dragStartEmitter", void 0);
    __decorate([
        Output('clrDragMove')
    ], ClrDraggable.prototype, "dragMoveEmitter", void 0);
    __decorate([
        Output('clrDragEnd')
    ], ClrDraggable.prototype, "dragEndEmitter", void 0);
ClrDraggable.ɵfac = function ClrDraggable_Factory(t) { return new (t || ClrDraggable)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(DragEventListenerService), ɵngcc0.ɵɵdirectiveInject(DragHandleRegistrarService), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ComponentFactoryResolver), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Injector), ɵngcc0.ɵɵdirectiveInject(DraggableSnapshotService), ɵngcc0.ɵɵdirectiveInject(GlobalDragModeService)); };
ClrDraggable.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: ClrDraggable, selectors: [["", "clrDraggable", ""]], contentQueries: function ClrDraggable_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {
        ɵngcc0.ɵɵcontentQuery(dirIndex, ClrIfDragged, true);
    } if (rf & 2) {
        var _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.customGhost = _t.first);
    } }, hostVars: 4, hostBindings: function ClrDraggable_HostBindings(rf, ctx) { if (rf & 2) {
        ɵngcc0.ɵɵclassProp("draggable", true)("being-dragged", ctx.dragOn);
    } }, inputs: { dataTransfer: ["clrDraggable", "dataTransfer"], group: ["clrGroup", "group"] }, outputs: { dragStartEmitter: "clrDragStart", dragMoveEmitter: "clrDragMove", dragEndEmitter: "clrDragEnd" }, features: [ɵngcc0.ɵɵProvidersFeature([
            DragEventListenerService,
            DragHandleRegistrarService,
            DraggableSnapshotService,
            GlobalDragModeService,
            DomAdapter,
        ])] });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ClrDraggable, [{
        type: Directive,
        args: [{
                selector: '[clrDraggable]',
                providers: [
                    DragEventListenerService,
                    DragHandleRegistrarService,
                    DraggableSnapshotService,
                    GlobalDragModeService,
                    DomAdapter,
                ],
                host: { '[class.draggable]': 'true', '[class.being-dragged]': 'dragOn' }
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: DragEventListenerService }, { type: DragHandleRegistrarService }, { type: ɵngcc0.ViewContainerRef }, { type: ɵngcc0.ComponentFactoryResolver }, { type: ɵngcc0.Injector }, { type: DraggableSnapshotService }, { type: GlobalDragModeService }]; }, { dragStartEmitter: [{
            type: Output,
            args: ['clrDragStart']
        }], dragMoveEmitter: [{
            type: Output,
            args: ['clrDragMove']
        }], dragEndEmitter: [{
            type: Output,
            args: ['clrDragEnd']
        }], dataTransfer: [{
            type: Input,
            args: ['clrDraggable']
        }], group: [{
            type: Input,
            args: ['clrGroup']
        }], customGhost: [{
            type: ContentChild,
            args: [ClrIfDragged]
        }] }); })();
    return ClrDraggable;
}());
export { ClrDraggable };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,