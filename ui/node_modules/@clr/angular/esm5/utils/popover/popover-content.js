import { __decorate, __param } from "tslib";
/*
 * Copyright (c) 2016-2020 VMware, Inc. All Rights Reserved.
 * This software is released under MIT license.
 * The full license information can be found in LICENSE in the root directory of this project.
 *
 */
import { Directive, EmbeddedViewRef, Inject, Input, OnDestroy, Renderer2, TemplateRef, ViewContainerRef, AfterContentChecked, EventEmitter, } from '@angular/core';
import { DOCUMENT } from '@angular/common';
import { ClrPopoverToggleService } from './providers/popover-toggle.service';
import { ClrPopoverEventsService } from './providers/popover-events.service';
import { ClrPopoverPositionService } from './providers/popover-position.service';
import { debounceTime } from 'rxjs/operators';
// https://github.com/angular/angular/issues/20351#issuecomment-344009887
/** @dynamic */
import * as ɵngcc0 from '@angular/core';
var ClrPopoverContent = /** @class */ (function () {
    function ClrPopoverContent(document, container, template, renderer, smartPositionService, smartEventsService, smartOpenService) {
        this.document = document;
        this.container = container;
        this.template = template;
        this.renderer = renderer;
        this.smartPositionService = smartPositionService;
        this.smartEventsService = smartEventsService;
        this.smartOpenService = smartOpenService;
        this.subscriptions = [];
        this.shouldRealign = false;
        // Check-collector pattern:
        // In order to get accurate content height/width values, we cannot calculate alignment offsets until
        // after the projected content has stabilized.
        // As multiple check events may happen in the same rendering cycle, we need to collect all events
        // and only act after the content is really stable. Or we may get wrong intermediate positioning values.
        // We will channel subsequent content check events through this observable.
        this.checkCollector = new EventEmitter();
    }
    Object.defineProperty(ClrPopoverContent.prototype, "open", {
        set: function (value) {
            this.smartOpenService.open = !!value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ClrPopoverContent.prototype, "contentAt", {
        set: function (position) {
            this.smartPositionService.position = position;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ClrPopoverContent.prototype, "outsideClickClose", {
        set: function (clickToClose) {
            this.smartEventsService.outsideClickClose = !!clickToClose;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ClrPopoverContent.prototype, "scrollToClose", {
        set: function (scrollToClose) {
            this.smartEventsService.scrollToClose = !!scrollToClose;
        },
        enumerable: true,
        configurable: true
    });
    ClrPopoverContent.prototype.ngAfterViewInit = function () {
        var _this = this;
        this.subscriptions.push(this.smartOpenService.openChange.subscribe(function (change) {
            if (change) {
                _this.addContent();
            }
            else {
                _this.removeContent();
            }
        }), this.smartPositionService.shouldRealign.subscribe(function () {
            _this.shouldRealign = true;
            // Avoid flickering on initialization, caused by the asynchronous nature of the
            // check-collector pattern.
            if (_this.view) {
                _this.renderer.setStyle(_this.view.rootNodes[0], 'opacity', '0');
            }
        }), 
        // Here we collect subsequent synchronously received content-check events and only take action
        // at the end of the cycle. See below for details on the check-collector pattern.
        this.checkCollector.pipe(debounceTime(0)).subscribe(function () {
            _this.alignContent();
            _this.shouldRealign = false;
            if (_this.view) {
                _this.renderer.setStyle(_this.view.rootNodes[0], 'opacity', '1');
            }
        }));
    };
    ClrPopoverContent.prototype.ngOnDestroy = function () {
        this.removeContent();
        this.subscriptions.forEach(function (sub) { return sub.unsubscribe(); });
    };
    ClrPopoverContent.prototype.removeContent = function () {
        var _this = this;
        if (!this.view) {
            return;
        }
        this.view.rootNodes.forEach(function (node) { return _this.renderer.removeChild(_this.document.body, node); });
        this.container.clear();
        delete this.view;
    };
    /**
     * TODO(matt): investigate why DebugElement retains a reference to the nodes and causes a memory leak.
     * A note about the use of appendChild/removeChild
     * The DebugElement is keeping a reference to the detached node and its unclear why.
     * This does warrant further investigation. But, since it doesn't happen in production mode
     * it is a low priority issue for now.
     */
    ClrPopoverContent.prototype.addContent = function () {
        var _this = this;
        // Create the view container
        this.view = this.container.createEmbeddedView(this.template);
        this.smartEventsService.contentRef = this.view.rootNodes[0]; // So we know where/what to set close focus on
        this.renderer.addClass(this.view.rootNodes[0], 'clr-popover-content');
        // Reset to the begining of the document to be available for sizing/positioning calculations.
        // If we add new content to the bottom it triggers changes in the layout that may lead to false anchor
        // coordinates values.
        this.renderer.setStyle(this.view.rootNodes[0], 'top', '0px');
        this.renderer.setStyle(this.view.rootNodes[0], 'left', '0px');
        // We need to hide it during the calculation phase, while it's not yet finally positioned.
        this.renderer.setStyle(this.view.rootNodes[0], 'opacity', '0');
        this.renderer.listen(this.view.rootNodes[0], 'click', function (event) {
            _this.smartOpenService.openEvent = event;
        });
        this.view.rootNodes.forEach(function (node) {
            _this.renderer.appendChild(_this.document.body, node);
        });
        // Mark for realingment on the next content-check cycle.
        this.shouldRealign = true;
    };
    ClrPopoverContent.prototype.ngAfterContentChecked = function () {
        if (this.smartOpenService.open && this.view && this.shouldRealign) {
            // Channel content-check event through the check-collector
            this.checkCollector.emit();
        }
    };
    ClrPopoverContent.prototype.alignContent = function () {
        if (!this.view) {
            return;
        }
        var positionCoords = this.smartPositionService.alignContent(this.view.rootNodes[0]);
        this.renderer.setStyle(this.view.rootNodes[0], 'top', positionCoords.yOffset + "px");
        this.renderer.setStyle(this.view.rootNodes[0], 'left', positionCoords.xOffset + "px");
    };
    ClrPopoverContent.ctorParameters = function () { return [
        { type: HTMLDocument, decorators: [{ type: Inject, args: [DOCUMENT,] }] },
        { type: ViewContainerRef },
        { type: TemplateRef },
        { type: Renderer2 },
        { type: ClrPopoverPositionService },
        { type: ClrPopoverEventsService },
        { type: ClrPopoverToggleService }
    ]; };
    __decorate([
        Input('clrPopoverContent')
    ], ClrPopoverContent.prototype, "open", null);
    __decorate([
        Input('clrPopoverContentAt')
    ], ClrPopoverContent.prototype, "contentAt", null);
    __decorate([
        Input('clrPopoverContentOutsideClickToClose')
    ], ClrPopoverContent.prototype, "outsideClickClose", null);
    __decorate([
        Input('clrPopoverContentScrollToClose')
    ], ClrPopoverContent.prototype, "scrollToClose", null);
    ClrPopoverContent = __decorate([ __param(0, Inject(DOCUMENT))
    ], ClrPopoverContent);
ClrPopoverContent.ɵfac = function ClrPopoverContent_Factory(t) { return new (t || ClrPopoverContent)(ɵngcc0.ɵɵdirectiveInject(DOCUMENT), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.TemplateRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Renderer2), ɵngcc0.ɵɵdirectiveInject(ClrPopoverPositionService), ɵngcc0.ɵɵdirectiveInject(ClrPopoverEventsService), ɵngcc0.ɵɵdirectiveInject(ClrPopoverToggleService)); };
ClrPopoverContent.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: ClrPopoverContent, selectors: [["", "clrPopoverContent", ""]], inputs: { open: ["clrPopoverContent", "open"], contentAt: ["clrPopoverContentAt", "contentAt"], outsideClickClose: ["clrPopoverContentOutsideClickToClose", "outsideClickClose"], scrollToClose: ["clrPopoverContentScrollToClose", "scrollToClose"] } });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ClrPopoverContent, [{
        type: Directive,
        args: [{ selector: '[clrPopoverContent]' }]
    }], function () { return [{ type: HTMLDocument, decorators: [{
                type: Inject,
                args: [DOCUMENT]
            }] }, { type: ɵngcc0.ViewContainerRef }, { type: ɵngcc0.TemplateRef }, { type: ɵngcc0.Renderer2 }, { type: ClrPopoverPositionService }, { type: ClrPopoverEventsService }, { type: ClrPopoverToggleService }]; }, { open: [{
            type: Input,
            args: ['clrPopoverContent']
        }], contentAt: [{
            type: Input,
            args: ['clrPopoverContentAt']
        }], outsideClickClose: [{
            type: Input,
            args: ['clrPopoverContentOutsideClickToClose']
        }], scrollToClose: [{
            type: Input,
            args: ['clrPopoverContentScrollToClose']
        }] }); })();
    return ClrPopoverContent;
}());
export { ClrPopoverContent };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG9wb3Zlci1jb250ZW50LmpzIiwic291cmNlcyI6WyJuZzovQGNsci9hbmd1bGFyL3V0aWxzL3BvcG92ZXIvcG9wb3Zlci1jb250ZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNILE9BQU8sRUFDTCxTQUFTLEVBQ1QsZUFBZSxFQUNmLE1BQU0sRUFDTixLQUFLLEVBQ0wsU0FBUyxFQUNULFNBQVMsRUFDVCxXQUFXLEVBQ1gsZ0JBQWdCLEVBQ2hCLG1CQUFtQixFQUNuQixZQUFZLEdBQ2IsTUFBTSxlQUFlLENBQUM7QUFDdkIsT0FBTyxFQUFFLFFBQVEsRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBRzNDLE9BQU8sRUFBRSx1QkFBdUIsRUFBRSxNQUFNLG9DQUFvQyxDQUFDO0FBQzdFLE9BQU8sRUFBRSx1QkFBdUIsRUFBRSxNQUFNLG9DQUFvQyxDQUFDO0FBQzdFLE9BQU8sRUFBRSx5QkFBeUIsRUFBRSxNQUFNLHNDQUFzQyxDQUFDO0FBRWpGLE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUU5Qyx5RUFBeUU7QUFDekUsZUFBZTs7QUFFZjtBQUFxRCxJQXdCbkQsMkJBQzRCLFFBQXNCLEVBQ3hDLFNBQTJCLEVBQzNCLFFBQTBCLEVBQzFCLFFBQW1CLEVBQ25CLG9CQUErQyxFQUMvQyxrQkFBMkMsRUFDM0MsZ0JBQXlDO0FBQ2xELFFBUDJCLGFBQVEsR0FBUixRQUFRLENBQWM7QUFBQyxRQUN6QyxjQUFTLEdBQVQsU0FBUyxDQUFrQjtBQUFDLFFBQzVCLGFBQVEsR0FBUixRQUFRLENBQWtCO0FBQUMsUUFDM0IsYUFBUSxHQUFSLFFBQVEsQ0FBVztBQUFDLFFBQ3BCLHlCQUFvQixHQUFwQixvQkFBb0IsQ0FBMkI7QUFBQyxRQUNoRCx1QkFBa0IsR0FBbEIsa0JBQWtCLENBQXlCO0FBQUMsUUFDNUMscUJBQWdCLEdBQWhCLGdCQUFnQixDQUF5QjtBQUNyRCxRQTlCVSxrQkFBYSxHQUFtQixFQUFFLENBQUM7QUFDN0MsUUF1R1Usa0JBQWEsR0FBRyxLQUFLLENBQUM7QUFDaEMsUUFDRSwyQkFBMkI7QUFDN0IsUUFBRSxvR0FBb0c7QUFDdEcsUUFBRSw4Q0FBOEM7QUFDaEQsUUFBRSxpR0FBaUc7QUFDbkcsUUFBRSx3R0FBd0c7QUFDMUcsUUFBRSwyRUFBMkU7QUFDN0UsUUFBVSxtQkFBYyxHQUF1QixJQUFJLFlBQVksRUFBRSxDQUFDO0FBQ2xFLElBbkZLLENBQUM7QUFDTixJQTVCRSxzQkFBVyxtQ0FBSTtBQUFJLGFBQW5CLFVBQWdCLEtBQWM7QUFDaEMsWUFBSSxJQUFJLENBQUMsZ0JBQWdCLENBQUMsSUFBSSxHQUFHLENBQUMsQ0FBQyxLQUFLLENBQUM7QUFDekMsUUFBRSxDQUFDO0FBRUg7QUFBMEI7QUFDTCxPQUhsQjtBQUNILElBRUUsc0JBQUksd0NBQVM7QUFBSSxhQUFqQixVQUFjLFFBQTRCO0FBQzVDLFlBQUksSUFBSSxDQUFDLG9CQUFvQixDQUFDLFFBQVEsR0FBRyxRQUFRLENBQUM7QUFDbEQsUUFBRSxDQUFDO0FBRUg7QUFBMEI7QUFDdEIsT0FIRDtBQUNILElBRUUsc0JBQUksZ0RBQWlCO0FBQUksYUFBekIsVUFBc0IsWUFBWTtBQUNwQyxZQUFJLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxpQkFBaUIsR0FBRyxDQUFDLENBQUMsWUFBWSxDQUFDO0FBQy9ELFFBQUUsQ0FBQztBQUVIO0FBQTBCO0FBQ2hCLE9BSFA7QUFDSCxJQUVFLHNCQUFJLDRDQUFhO0FBQUksYUFBckIsVUFBa0IsYUFBYTtBQUNqQyxZQUFJLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxhQUFhLEdBQUcsQ0FBQyxDQUFDLGFBQWEsQ0FBQztBQUM1RCxRQUFFLENBQUM7QUFFSDtBQUNXO0FBQTJCLE9BSG5DO0FBQ0gsSUFXRSwyQ0FBZSxHQUFmO0FBQWMsUUFBZCxpQkEyQkM7QUFDSCxRQTNCSSxJQUFJLENBQUMsYUFBYSxDQUFDLElBQUksQ0FDckIsSUFBSSxDQUFDLGdCQUFnQixDQUFDLFVBQVUsQ0FBQyxTQUFTLENBQUMsVUFBQSxNQUFNO0FBQUksWUFDbkQsSUFBSSxNQUFNLEVBQUU7QUFDcEIsZ0JBQVUsS0FBSSxDQUFDLFVBQVUsRUFBRSxDQUFDO0FBQzVCLGFBQVM7QUFBQyxpQkFBSztBQUNmLGdCQUFVLEtBQUksQ0FBQyxhQUFhLEVBQUUsQ0FBQztBQUMvQixhQUFTO0FBQ1QsUUFBTSxDQUFDLENBQUMsRUFDRixJQUFJLENBQUMsb0JBQW9CLENBQUMsYUFBYSxDQUFDLFNBQVMsQ0FBQztBQUNsRCxZQUFFLEtBQUksQ0FBQyxhQUFhLEdBQUcsSUFBSSxDQUFDO0FBQ2xDLFlBQVEsK0VBQStFO0FBQ3ZGLFlBQVEsMkJBQTJCO0FBQ25DLFlBQVEsSUFBSSxLQUFJLENBQUMsSUFBSSxFQUFFO0FBQ3ZCLGdCQUFVLEtBQUksQ0FBQyxRQUFRLENBQUMsUUFBUSxDQUFDLEtBQUksQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxFQUFFLFNBQVMsRUFBRSxHQUFHLENBQUMsQ0FBQztBQUN6RSxhQUFTO0FBQ1QsUUFBTSxDQUFDLENBQUM7QUFDUCxRQUFLLDhGQUE4RjtBQUNwRyxRQUFNLGlGQUFpRjtBQUN2RixRQUFNLElBQUksQ0FBQyxjQUFjLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQztBQUNwRCxZQUFFLEtBQUksQ0FBQyxZQUFZLEVBQUUsQ0FBQztBQUM1QixZQUFRLEtBQUksQ0FBQyxhQUFhLEdBQUcsS0FBSyxDQUFDO0FBQ25DLFlBQVEsSUFBSSxLQUFJLENBQUMsSUFBSSxFQUFFO0FBQ3ZCLGdCQUFVLEtBQUksQ0FBQyxRQUFRLENBQUMsUUFBUSxDQUFDLEtBQUksQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxFQUFFLFNBQVMsRUFBRSxHQUFHLENBQUMsQ0FBQztBQUN6RSxhQUFTO0FBQ1QsUUFBTSxDQUFDLENBQUMsQ0FDSCxDQUFDO0FBQ04sSUFBRSxDQUFDO0FBRUgsSUFBRSx1Q0FBVyxHQUFYO0FBQWMsUUFDWixJQUFJLENBQUMsYUFBYSxFQUFFLENBQUM7QUFDekIsUUFBSSxJQUFJLENBQUMsYUFBYSxDQUFDLE9BQU8sQ0FBQyxVQUFBLEdBQUcsSUFBSSxPQUFBLEdBQUcsQ0FBQyxXQUFXLEVBQUUsRUFBakIsQ0FBaUIsQ0FBQyxDQUFDO0FBQ3pELElBQUUsQ0FBQztBQUVILElBQVUseUNBQWEsR0FBckI7QUFBYyxRQUFkLGlCQU9DO0FBQ0gsUUFQSSxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksRUFBRTtBQUNwQixZQUFNLE9BQU87QUFDYixTQUFLO0FBQ0wsUUFBSSxJQUFJLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxPQUFPLENBQUMsVUFBQSxJQUFJLElBQUksT0FBQSxLQUFJLENBQUMsUUFBUSxDQUFDLFdBQVcsQ0FBQyxLQUFJLENBQUMsUUFBUSxDQUFDLElBQUksRUFBRSxJQUFJLENBQUMsRUFBbkQsQ0FBbUQsQ0FBQyxDQUFDO0FBQzdGLFFBQUksSUFBSSxDQUFDLFNBQVMsQ0FBQyxLQUFLLEVBQUUsQ0FBQztBQUMzQixRQUFJLE9BQU8sSUFBSSxDQUFDLElBQUksQ0FBQztBQUNyQixJQUFFLENBQUM7QUFFSCxJQUFFO0FBQ0Y7QUFDRTtBQUNFO0FBQ0U7QUFDRTtBQUVKLE9BREM7QUFDTCxJQUFVLHNDQUFVLEdBQWxCO0FBQWMsUUFBZCxpQkFvQkM7QUFDSCxRQXBCSSw0QkFBNEI7QUFDaEMsUUFBSSxJQUFJLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQyxTQUFTLENBQUMsa0JBQWtCLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDO0FBQ2pFLFFBQUksSUFBSSxDQUFDLGtCQUFrQixDQUFDLFVBQVUsR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLDhDQUE4QztBQUMvRyxRQUFJLElBQUksQ0FBQyxRQUFRLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxFQUFFLHFCQUFxQixDQUFDLENBQUM7QUFDMUUsUUFBSSw2RkFBNkY7QUFDakcsUUFBSSxzR0FBc0c7QUFDMUcsUUFBSSxzQkFBc0I7QUFDMUIsUUFBSSxJQUFJLENBQUMsUUFBUSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsRUFBRSxLQUFLLEVBQUUsS0FBSyxDQUFDLENBQUM7QUFDakUsUUFBSSxJQUFJLENBQUMsUUFBUSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsRUFBRSxNQUFNLEVBQUUsS0FBSyxDQUFDLENBQUM7QUFDbEUsUUFBSSwwRkFBMEY7QUFDOUYsUUFBSSxJQUFJLENBQUMsUUFBUSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsRUFBRSxTQUFTLEVBQUUsR0FBRyxDQUFDLENBQUM7QUFDbkUsUUFBSSxJQUFJLENBQUMsUUFBUSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsRUFBRSxPQUFPLEVBQUUsVUFBQSxLQUFLO0FBQUksWUFDN0QsS0FBSSxDQUFDLGdCQUFnQixDQUFDLFNBQVMsR0FBRyxLQUFLLENBQUM7QUFDOUMsUUFBSSxDQUFDLENBQUMsQ0FBQztBQUNQLFFBQUksSUFBSSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsT0FBTyxDQUFDLFVBQUEsSUFBSTtBQUFJLFlBQ2xDLEtBQUksQ0FBQyxRQUFRLENBQUMsV0FBVyxDQUFDLEtBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxFQUFFLElBQUksQ0FBQyxDQUFDO0FBQzFELFFBQUksQ0FBQyxDQUFDLENBQUM7QUFDUCxRQUFJLHdEQUF3RDtBQUM1RCxRQUFJLElBQUksQ0FBQyxhQUFhLEdBQUcsSUFBSSxDQUFDO0FBQzlCLElBQUUsQ0FBQztBQUVILElBVUUsaURBQXFCLEdBQXJCO0FBQWMsUUFDWixJQUFJLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxJQUFJLElBQUksSUFBSSxDQUFDLElBQUksSUFBSSxJQUFJLENBQUMsYUFBYSxFQUFFO0FBQ3ZFLFlBQU0sMERBQTBEO0FBQ2hFLFlBQU0sSUFBSSxDQUFDLGNBQWMsQ0FBQyxJQUFJLEVBQUUsQ0FBQztBQUNqQyxTQUFLO0FBQ0wsSUFBRSxDQUFDO0FBRUgsSUFBVSx3Q0FBWSxHQUFwQjtBQUFjLFFBQ1osSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLEVBQUU7QUFDcEIsWUFBTSxPQUFPO0FBQ2IsU0FBSztBQUNMLFFBQUksSUFBTSxjQUFjLEdBQUcsSUFBSSxDQUFDLG9CQUFvQixDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQzFGLFFBQUksSUFBSSxDQUFDLFFBQVEsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLEVBQUUsS0FBSyxFQUFLLGNBQWMsQ0FBQyxPQUFPLE9BQUksQ0FBQyxDQUFDO0FBQ3pGLFFBQUksSUFBSSxDQUFDLFFBQVEsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLEVBQUUsTUFBTSxFQUFLLGNBQWMsQ0FBQyxPQUFPLE9BQUksQ0FBQyxDQUFDO0FBQzFGLElBQUUsQ0FBQztBQUNGO0FBQzRELGdCQTNHckIsWUFBWSx1QkFBL0MsTUFBTSxTQUFDLFFBQVE7QUFBUyxnQkFDTixnQkFBZ0I7QUFDckMsZ0JBQW9CLFdBQVc7QUFBSSxnQkFDZixTQUFTO0FBQzdCLGdCQUFnQyx5QkFBeUI7QUFDekQsZ0JBQThCLHVCQUF1QjtBQUNyRCxnQkFBNEIsdUJBQXVCO0FBQ25EO0FBRUUsSUE3QkY7QUFBYSxRQURaLEtBQUssQ0FBQyxtQkFBbUIsQ0FBQztBQUM3QixpREFFRztBQUVILElBQ0U7QUFBYSxRQURaLEtBQUssQ0FBQyxxQkFBcUIsQ0FBQztBQUMvQixzREFFRztBQUVILElBQ0U7QUFBYSxRQURaLEtBQUssQ0FBQyxzQ0FBc0MsQ0FBQztBQUNoRCw4REFFRztBQUVILElBQ0U7QUFBYSxRQURaLEtBQUssQ0FBQyxnQ0FBZ0MsQ0FBQztBQUMxQywwREFFRztBQUVILElBeEJhLGlCQUFpQix3QkFEN0IsU0FBUyxDQUFDLEVBQUUsUUFBUSw3QkFDYixDQXlCSCxXQUFBLE1BQU0sQ0FBQyxRQUFRLENBQUMsQ0FBQTtDQTFCRSxxQkFBcUIsRUFBRSxDQUFDLHpCQTBCekIsT0F6QlQsaUJBQWlCLENBbUk3Qjs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O29CQUNEO0FBQUMsSUFERCx3QkFBQztBQUNBLENBREEsQUFuSUQsSUFtSUM7QUFDRCxTQXBJYSxpQkFBaUI7QUFBSSIsInNvdXJjZXNDb250ZW50IjpbIi8qXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTYtMjAyMCBWTXdhcmUsIEluYy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqIFRoaXMgc29mdHdhcmUgaXMgcmVsZWFzZWQgdW5kZXIgTUlUIGxpY2Vuc2UuXG4gKiBUaGUgZnVsbCBsaWNlbnNlIGluZm9ybWF0aW9uIGNhbiBiZSBmb3VuZCBpbiBMSUNFTlNFIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHByb2plY3QuXG4gKlxuICovXG5pbXBvcnQge1xuICBEaXJlY3RpdmUsXG4gIEVtYmVkZGVkVmlld1JlZixcbiAgSW5qZWN0LFxuICBJbnB1dCxcbiAgT25EZXN0cm95LFxuICBSZW5kZXJlcjIsXG4gIFRlbXBsYXRlUmVmLFxuICBWaWV3Q29udGFpbmVyUmVmLFxuICBBZnRlckNvbnRlbnRDaGVja2VkLFxuICBFdmVudEVtaXR0ZXIsXG59IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgRE9DVU1FTlQgfSBmcm9tICdAYW5ndWxhci9jb21tb24nO1xuaW1wb3J0IHsgU3Vic2NyaXB0aW9uIH0gZnJvbSAncnhqcyc7XG5cbmltcG9ydCB7IENsclBvcG92ZXJUb2dnbGVTZXJ2aWNlIH0gZnJvbSAnLi9wcm92aWRlcnMvcG9wb3Zlci10b2dnbGUuc2VydmljZSc7XG5pbXBvcnQgeyBDbHJQb3BvdmVyRXZlbnRzU2VydmljZSB9IGZyb20gJy4vcHJvdmlkZXJzL3BvcG92ZXItZXZlbnRzLnNlcnZpY2UnO1xuaW1wb3J0IHsgQ2xyUG9wb3ZlclBvc2l0aW9uU2VydmljZSB9IGZyb20gJy4vcHJvdmlkZXJzL3BvcG92ZXItcG9zaXRpb24uc2VydmljZSc7XG5pbXBvcnQgeyBDbHJQb3BvdmVyUG9zaXRpb24gfSBmcm9tICcuL2ludGVyZmFjZXMvcG9wb3Zlci1wb3NpdGlvbi5pbnRlcmZhY2UnO1xuaW1wb3J0IHsgZGVib3VuY2VUaW1lIH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xuXG4vLyBodHRwczovL2dpdGh1Yi5jb20vYW5ndWxhci9hbmd1bGFyL2lzc3Vlcy8yMDM1MSNpc3N1ZWNvbW1lbnQtMzQ0MDA5ODg3XG4vKiogQGR5bmFtaWMgKi9cbkBEaXJlY3RpdmUoeyBzZWxlY3RvcjogJ1tjbHJQb3BvdmVyQ29udGVudF0nIH0pXG5leHBvcnQgY2xhc3MgQ2xyUG9wb3ZlckNvbnRlbnQgaW1wbGVtZW50cyBBZnRlckNvbnRlbnRDaGVja2VkLCBPbkRlc3Ryb3kge1xuICBwcml2YXRlIHZpZXc6IEVtYmVkZGVkVmlld1JlZjx2b2lkPjtcbiAgcHJpdmF0ZSBzdWJzY3JpcHRpb25zOiBTdWJzY3JpcHRpb25bXSA9IFtdO1xuXG4gIEBJbnB1dCgnY2xyUG9wb3ZlckNvbnRlbnQnKVxuICBwdWJsaWMgc2V0IG9wZW4odmFsdWU6IGJvb2xlYW4pIHtcbiAgICB0aGlzLnNtYXJ0T3BlblNlcnZpY2Uub3BlbiA9ICEhdmFsdWU7XG4gIH1cblxuICBASW5wdXQoJ2NsclBvcG92ZXJDb250ZW50QXQnKVxuICBzZXQgY29udGVudEF0KHBvc2l0aW9uOiBDbHJQb3BvdmVyUG9zaXRpb24pIHtcbiAgICB0aGlzLnNtYXJ0UG9zaXRpb25TZXJ2aWNlLnBvc2l0aW9uID0gcG9zaXRpb247XG4gIH1cblxuICBASW5wdXQoJ2NsclBvcG92ZXJDb250ZW50T3V0c2lkZUNsaWNrVG9DbG9zZScpXG4gIHNldCBvdXRzaWRlQ2xpY2tDbG9zZShjbGlja1RvQ2xvc2UpIHtcbiAgICB0aGlzLnNtYXJ0RXZlbnRzU2VydmljZS5vdXRzaWRlQ2xpY2tDbG9zZSA9ICEhY2xpY2tUb0Nsb3NlO1xuICB9XG5cbiAgQElucHV0KCdjbHJQb3BvdmVyQ29udGVudFNjcm9sbFRvQ2xvc2UnKVxuICBzZXQgc2Nyb2xsVG9DbG9zZShzY3JvbGxUb0Nsb3NlKSB7XG4gICAgdGhpcy5zbWFydEV2ZW50c1NlcnZpY2Uuc2Nyb2xsVG9DbG9zZSA9ICEhc2Nyb2xsVG9DbG9zZTtcbiAgfVxuXG4gIGNvbnN0cnVjdG9yKFxuICAgIEBJbmplY3QoRE9DVU1FTlQpIHByaXZhdGUgZG9jdW1lbnQ6IEhUTUxEb2N1bWVudCxcbiAgICBwcml2YXRlIGNvbnRhaW5lcjogVmlld0NvbnRhaW5lclJlZixcbiAgICBwcml2YXRlIHRlbXBsYXRlOiBUZW1wbGF0ZVJlZjxhbnk+LFxuICAgIHByaXZhdGUgcmVuZGVyZXI6IFJlbmRlcmVyMixcbiAgICBwcml2YXRlIHNtYXJ0UG9zaXRpb25TZXJ2aWNlOiBDbHJQb3BvdmVyUG9zaXRpb25TZXJ2aWNlLFxuICAgIHByaXZhdGUgc21hcnRFdmVudHNTZXJ2aWNlOiBDbHJQb3BvdmVyRXZlbnRzU2VydmljZSxcbiAgICBwcml2YXRlIHNtYXJ0T3BlblNlcnZpY2U6IENsclBvcG92ZXJUb2dnbGVTZXJ2aWNlXG4gICkge31cblxuICBuZ0FmdGVyVmlld0luaXQoKSB7XG4gICAgdGhpcy5zdWJzY3JpcHRpb25zLnB1c2goXG4gICAgICB0aGlzLnNtYXJ0T3BlblNlcnZpY2Uub3BlbkNoYW5nZS5zdWJzY3JpYmUoY2hhbmdlID0+IHtcbiAgICAgICAgaWYgKGNoYW5nZSkge1xuICAgICAgICAgIHRoaXMuYWRkQ29udGVudCgpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRoaXMucmVtb3ZlQ29udGVudCgpO1xuICAgICAgICB9XG4gICAgICB9KSxcbiAgICAgIHRoaXMuc21hcnRQb3NpdGlvblNlcnZpY2Uuc2hvdWxkUmVhbGlnbi5zdWJzY3JpYmUoKCkgPT4ge1xuICAgICAgICB0aGlzLnNob3VsZFJlYWxpZ24gPSB0cnVlO1xuICAgICAgICAvLyBBdm9pZCBmbGlja2VyaW5nIG9uIGluaXRpYWxpemF0aW9uLCBjYXVzZWQgYnkgdGhlIGFzeW5jaHJvbm91cyBuYXR1cmUgb2YgdGhlXG4gICAgICAgIC8vIGNoZWNrLWNvbGxlY3RvciBwYXR0ZXJuLlxuICAgICAgICBpZiAodGhpcy52aWV3KSB7XG4gICAgICAgICAgdGhpcy5yZW5kZXJlci5zZXRTdHlsZSh0aGlzLnZpZXcucm9vdE5vZGVzWzBdLCAnb3BhY2l0eScsICcwJyk7XG4gICAgICAgIH1cbiAgICAgIH0pLFxuICAgICAgLy8gSGVyZSB3ZSBjb2xsZWN0IHN1YnNlcXVlbnQgc3luY2hyb25vdXNseSByZWNlaXZlZCBjb250ZW50LWNoZWNrIGV2ZW50cyBhbmQgb25seSB0YWtlIGFjdGlvblxuICAgICAgLy8gYXQgdGhlIGVuZCBvZiB0aGUgY3ljbGUuIFNlZSBiZWxvdyBmb3IgZGV0YWlscyBvbiB0aGUgY2hlY2stY29sbGVjdG9yIHBhdHRlcm4uXG4gICAgICB0aGlzLmNoZWNrQ29sbGVjdG9yLnBpcGUoZGVib3VuY2VUaW1lKDApKS5zdWJzY3JpYmUoKCkgPT4ge1xuICAgICAgICB0aGlzLmFsaWduQ29udGVudCgpO1xuICAgICAgICB0aGlzLnNob3VsZFJlYWxpZ24gPSBmYWxzZTtcbiAgICAgICAgaWYgKHRoaXMudmlldykge1xuICAgICAgICAgIHRoaXMucmVuZGVyZXIuc2V0U3R5bGUodGhpcy52aWV3LnJvb3ROb2Rlc1swXSwgJ29wYWNpdHknLCAnMScpO1xuICAgICAgICB9XG4gICAgICB9KVxuICAgICk7XG4gIH1cblxuICBuZ09uRGVzdHJveSgpIHtcbiAgICB0aGlzLnJlbW92ZUNvbnRlbnQoKTtcbiAgICB0aGlzLnN1YnNjcmlwdGlvbnMuZm9yRWFjaChzdWIgPT4gc3ViLnVuc3Vic2NyaWJlKCkpO1xuICB9XG5cbiAgcHJpdmF0ZSByZW1vdmVDb250ZW50KCk6IHZvaWQge1xuICAgIGlmICghdGhpcy52aWV3KSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHRoaXMudmlldy5yb290Tm9kZXMuZm9yRWFjaChub2RlID0+IHRoaXMucmVuZGVyZXIucmVtb3ZlQ2hpbGQodGhpcy5kb2N1bWVudC5ib2R5LCBub2RlKSk7XG4gICAgdGhpcy5jb250YWluZXIuY2xlYXIoKTtcbiAgICBkZWxldGUgdGhpcy52aWV3O1xuICB9XG5cbiAgLyoqXG4gICAqIFRPRE8obWF0dCk6IGludmVzdGlnYXRlIHdoeSBEZWJ1Z0VsZW1lbnQgcmV0YWlucyBhIHJlZmVyZW5jZSB0byB0aGUgbm9kZXMgYW5kIGNhdXNlcyBhIG1lbW9yeSBsZWFrLlxuICAgKiBBIG5vdGUgYWJvdXQgdGhlIHVzZSBvZiBhcHBlbmRDaGlsZC9yZW1vdmVDaGlsZFxuICAgKiBUaGUgRGVidWdFbGVtZW50IGlzIGtlZXBpbmcgYSByZWZlcmVuY2UgdG8gdGhlIGRldGFjaGVkIG5vZGUgYW5kIGl0cyB1bmNsZWFyIHdoeS5cbiAgICogVGhpcyBkb2VzIHdhcnJhbnQgZnVydGhlciBpbnZlc3RpZ2F0aW9uLiBCdXQsIHNpbmNlIGl0IGRvZXNuJ3QgaGFwcGVuIGluIHByb2R1Y3Rpb24gbW9kZVxuICAgKiBpdCBpcyBhIGxvdyBwcmlvcml0eSBpc3N1ZSBmb3Igbm93LlxuICAgKi9cbiAgcHJpdmF0ZSBhZGRDb250ZW50KCkge1xuICAgIC8vIENyZWF0ZSB0aGUgdmlldyBjb250YWluZXJcbiAgICB0aGlzLnZpZXcgPSB0aGlzLmNvbnRhaW5lci5jcmVhdGVFbWJlZGRlZFZpZXcodGhpcy50ZW1wbGF0ZSk7XG4gICAgdGhpcy5zbWFydEV2ZW50c1NlcnZpY2UuY29udGVudFJlZiA9IHRoaXMudmlldy5yb290Tm9kZXNbMF07IC8vIFNvIHdlIGtub3cgd2hlcmUvd2hhdCB0byBzZXQgY2xvc2UgZm9jdXMgb25cbiAgICB0aGlzLnJlbmRlcmVyLmFkZENsYXNzKHRoaXMudmlldy5yb290Tm9kZXNbMF0sICdjbHItcG9wb3Zlci1jb250ZW50Jyk7XG4gICAgLy8gUmVzZXQgdG8gdGhlIGJlZ2luaW5nIG9mIHRoZSBkb2N1bWVudCB0byBiZSBhdmFpbGFibGUgZm9yIHNpemluZy9wb3NpdGlvbmluZyBjYWxjdWxhdGlvbnMuXG4gICAgLy8gSWYgd2UgYWRkIG5ldyBjb250ZW50IHRvIHRoZSBib3R0b20gaXQgdHJpZ2dlcnMgY2hhbmdlcyBpbiB0aGUgbGF5b3V0IHRoYXQgbWF5IGxlYWQgdG8gZmFsc2UgYW5jaG9yXG4gICAgLy8gY29vcmRpbmF0ZXMgdmFsdWVzLlxuICAgIHRoaXMucmVuZGVyZXIuc2V0U3R5bGUodGhpcy52aWV3LnJvb3ROb2Rlc1swXSwgJ3RvcCcsICcwcHgnKTtcbiAgICB0aGlzLnJlbmRlcmVyLnNldFN0eWxlKHRoaXMudmlldy5yb290Tm9kZXNbMF0sICdsZWZ0JywgJzBweCcpO1xuICAgIC8vIFdlIG5lZWQgdG8gaGlkZSBpdCBkdXJpbmcgdGhlIGNhbGN1bGF0aW9uIHBoYXNlLCB3aGlsZSBpdCdzIG5vdCB5ZXQgZmluYWxseSBwb3NpdGlvbmVkLlxuICAgIHRoaXMucmVuZGVyZXIuc2V0U3R5bGUodGhpcy52aWV3LnJvb3ROb2Rlc1swXSwgJ29wYWNpdHknLCAnMCcpO1xuICAgIHRoaXMucmVuZGVyZXIubGlzdGVuKHRoaXMudmlldy5yb290Tm9kZXNbMF0sICdjbGljaycsIGV2ZW50ID0+IHtcbiAgICAgIHRoaXMuc21hcnRPcGVuU2VydmljZS5vcGVuRXZlbnQgPSBldmVudDtcbiAgICB9KTtcbiAgICB0aGlzLnZpZXcucm9vdE5vZGVzLmZvckVhY2gobm9kZSA9PiB7XG4gICAgICB0aGlzLnJlbmRlcmVyLmFwcGVuZENoaWxkKHRoaXMuZG9jdW1lbnQuYm9keSwgbm9kZSk7XG4gICAgfSk7XG4gICAgLy8gTWFyayBmb3IgcmVhbGluZ21lbnQgb24gdGhlIG5leHQgY29udGVudC1jaGVjayBjeWNsZS5cbiAgICB0aGlzLnNob3VsZFJlYWxpZ24gPSB0cnVlO1xuICB9XG5cbiAgcHJpdmF0ZSBzaG91bGRSZWFsaWduID0gZmFsc2U7XG5cbiAgLy8gQ2hlY2stY29sbGVjdG9yIHBhdHRlcm46XG4gIC8vIEluIG9yZGVyIHRvIGdldCBhY2N1cmF0ZSBjb250ZW50IGhlaWdodC93aWR0aCB2YWx1ZXMsIHdlIGNhbm5vdCBjYWxjdWxhdGUgYWxpZ25tZW50IG9mZnNldHMgdW50aWxcbiAgLy8gYWZ0ZXIgdGhlIHByb2plY3RlZCBjb250ZW50IGhhcyBzdGFiaWxpemVkLlxuICAvLyBBcyBtdWx0aXBsZSBjaGVjayBldmVudHMgbWF5IGhhcHBlbiBpbiB0aGUgc2FtZSByZW5kZXJpbmcgY3ljbGUsIHdlIG5lZWQgdG8gY29sbGVjdCBhbGwgZXZlbnRzXG4gIC8vIGFuZCBvbmx5IGFjdCBhZnRlciB0aGUgY29udGVudCBpcyByZWFsbHkgc3RhYmxlLiBPciB3ZSBtYXkgZ2V0IHdyb25nIGludGVybWVkaWF0ZSBwb3NpdGlvbmluZyB2YWx1ZXMuXG4gIC8vIFdlIHdpbGwgY2hhbm5lbCBzdWJzZXF1ZW50IGNvbnRlbnQgY2hlY2sgZXZlbnRzIHRocm91Z2ggdGhpcyBvYnNlcnZhYmxlLlxuICBwcml2YXRlIGNoZWNrQ29sbGVjdG9yOiBFdmVudEVtaXR0ZXI8dm9pZD4gPSBuZXcgRXZlbnRFbWl0dGVyKCk7XG5cbiAgbmdBZnRlckNvbnRlbnRDaGVja2VkKCk6IHZvaWQge1xuICAgIGlmICh0aGlzLnNtYXJ0T3BlblNlcnZpY2Uub3BlbiAmJiB0aGlzLnZpZXcgJiYgdGhpcy5zaG91bGRSZWFsaWduKSB7XG4gICAgICAvLyBDaGFubmVsIGNvbnRlbnQtY2hlY2sgZXZlbnQgdGhyb3VnaCB0aGUgY2hlY2stY29sbGVjdG9yXG4gICAgICB0aGlzLmNoZWNrQ29sbGVjdG9yLmVtaXQoKTtcbiAgICB9XG4gIH1cblxuICBwcml2YXRlIGFsaWduQ29udGVudCgpIHtcbiAgICBpZiAoIXRoaXMudmlldykge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBjb25zdCBwb3NpdGlvbkNvb3JkcyA9IHRoaXMuc21hcnRQb3NpdGlvblNlcnZpY2UuYWxpZ25Db250ZW50KHRoaXMudmlldy5yb290Tm9kZXNbMF0pO1xuICAgIHRoaXMucmVuZGVyZXIuc2V0U3R5bGUodGhpcy52aWV3LnJvb3ROb2Rlc1swXSwgJ3RvcCcsIGAke3Bvc2l0aW9uQ29vcmRzLnlPZmZzZXR9cHhgKTtcbiAgICB0aGlzLnJlbmRlcmVyLnNldFN0eWxlKHRoaXMudmlldy5yb290Tm9kZXNbMF0sICdsZWZ0JywgYCR7cG9zaXRpb25Db29yZHMueE9mZnNldH1weGApO1xuICB9XG59XG4iXX0=