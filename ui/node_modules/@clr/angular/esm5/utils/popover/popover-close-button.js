/*
 * Copyright (c) 2016-2019 VMware, Inc. All Rights Reserved.
 * This software is released under MIT license.
 * The full license information can be found in LICENSE in the root directory of this project.
 *
 */
import { __decorate } from "tslib";
import { Directive, ElementRef, EventEmitter, Output, HostListener, OnDestroy, AfterViewInit } from '@angular/core';
import { ClrPopoverEventsService } from './providers/popover-events.service';
import { ClrPopoverToggleService } from './providers/popover-toggle.service';
import { filter } from 'rxjs/operators';
import * as ɵngcc0 from '@angular/core';
var ClrPopoverCloseButton = /** @class */ (function () {
    function ClrPopoverCloseButton(elementRef, smartEventsService, smartOpenService) {
        var _this = this;
        this.elementRef = elementRef;
        this.smartEventsService = smartEventsService;
        this.smartOpenService = smartOpenService;
        this.subscriptions = [];
        this.closeChange = new EventEmitter();
        this.subscriptions.push(smartOpenService.openChange.pipe(filter(function (value) { return !value; })).subscribe(function () {
            _this.closeChange.next();
        }));
    }
    ClrPopoverCloseButton.prototype.handleClick = function (event) {
        this.smartOpenService.toggleWithEvent(event);
        this.smartEventsService.setAnchorFocus();
    };
    ClrPopoverCloseButton.prototype.ngAfterViewInit = function () {
        this.smartEventsService.closeButtonRef = this.elementRef;
        this.smartEventsService.setCloseFocus();
    };
    ClrPopoverCloseButton.prototype.ngOnDestroy = function () {
        this.subscriptions.forEach(function (sub) { return sub.unsubscribe(); });
    };
    ClrPopoverCloseButton.ctorParameters = function () { return [
        { type: ElementRef },
        { type: ClrPopoverEventsService },
        { type: ClrPopoverToggleService }
    ]; };
    __decorate([
        Output('clrPopoverOnCloseChange')
    ], ClrPopoverCloseButton.prototype, "closeChange", void 0);
    __decorate([
        HostListener('click', ['$event'])
    ], ClrPopoverCloseButton.prototype, "handleClick", null);
ClrPopoverCloseButton.ɵfac = function ClrPopoverCloseButton_Factory(t) { return new (t || ClrPopoverCloseButton)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ClrPopoverEventsService), ɵngcc0.ɵɵdirectiveInject(ClrPopoverToggleService)); };
ClrPopoverCloseButton.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: ClrPopoverCloseButton, selectors: [["", "clrPopoverCloseButton", ""]], hostVars: 2, hostBindings: function ClrPopoverCloseButton_HostBindings(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵlistener("click", function ClrPopoverCloseButton_click_HostBindingHandler($event) { return ctx.handleClick($event); });
    } if (rf & 2) {
        ɵngcc0.ɵɵclassProp("clr-smart-close-button", true);
    } }, outputs: { closeChange: "clrPopoverOnCloseChange" } });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ClrPopoverCloseButton, [{
        type: Directive,
        args: [{
                selector: '[clrPopoverCloseButton]',
                host: {
                    '[class.clr-smart-close-button]': 'true'
                }
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ClrPopoverEventsService }, { type: ClrPopoverToggleService }]; }, { closeChange: [{
            type: Output,
            args: ['clrPopoverOnCloseChange']
        }], handleClick: [{
            type: HostListener,
            args: ['click', ['$event']]
        }] }); })();
    return ClrPopoverCloseButton;
}());
export { ClrPopoverCloseButton };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG9wb3Zlci1jbG9zZS1idXR0b24uanMiLCJzb3VyY2VzIjpbIm5nOi9AY2xyL2FuZ3VsYXIvdXRpbHMvcG9wb3Zlci9wb3BvdmVyLWNsb3NlLWJ1dHRvbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0EsT0FBTyxFQUFFLFNBQVMsRUFBRSxVQUFVLEVBQUUsWUFBWSxFQUFFLE1BQU0sRUFBRSxZQUFZLEVBQUUsU0FBUyxFQUFFLGFBQWEsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUVwSCxPQUFPLEVBQUUsdUJBQXVCLEVBQUUsTUFBTSxvQ0FBb0MsQ0FBQztBQUM3RSxPQUFPLEVBQUUsdUJBQXVCLEVBQUUsTUFBTSxvQ0FBb0MsQ0FBQztBQUM3RSxPQUFPLEVBQUUsTUFBTSxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7O0FBUXhDO0FBQXlELElBR3ZELCtCQUNVLFVBQXNCLEVBQ3RCLGtCQUEyQyxFQUMzQyxnQkFBeUM7QUFDbEQsUUFKRCxpQkFVQztBQUNILFFBVlksZUFBVSxHQUFWLFVBQVUsQ0FBWTtBQUFDLFFBQ3ZCLHVCQUFrQixHQUFsQixrQkFBa0IsQ0FBeUI7QUFBQyxRQUM1QyxxQkFBZ0IsR0FBaEIsZ0JBQWdCLENBQXlCO0FBQ3JELFFBTlUsa0JBQWEsR0FBbUIsRUFBRSxDQUFDO0FBQzdDLFFBYXFDLGdCQUFXLEdBQXVCLElBQUksWUFBWSxFQUFRLENBQUM7QUFDaEcsUUFSSSxJQUFJLENBQUMsYUFBYSxDQUFDLElBQUksQ0FDckIsZ0JBQWdCLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsVUFBQSxLQUFLLElBQUksT0FBQSxDQUFDLEtBQUssRUFBTixDQUFNLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQztBQUNwRSxZQUFFLEtBQUksQ0FBQyxXQUFXLENBQUMsSUFBSSxFQUFFLENBQUM7QUFDaEMsUUFBTSxDQUFDLENBQUMsQ0FDSCxDQUFDO0FBQ04sSUFBRSxDQUFDO0FBQ0gsSUFJRSwyQ0FBVyxHQUFYLFVBQVksS0FBaUI7QUFDL0IsUUFBSSxJQUFJLENBQUMsZ0JBQWdCLENBQUMsZUFBZSxDQUFDLEtBQUssQ0FBQyxDQUFDO0FBQ2pELFFBQUksSUFBSSxDQUFDLGtCQUFrQixDQUFDLGNBQWMsRUFBRSxDQUFDO0FBQzdDLElBQUUsQ0FBQztBQUVILElBQUUsK0NBQWUsR0FBZjtBQUFjLFFBQ1osSUFBSSxDQUFDLGtCQUFrQixDQUFDLGNBQWMsR0FBRyxJQUFJLENBQUMsVUFBVSxDQUFDO0FBQzdELFFBQUksSUFBSSxDQUFDLGtCQUFrQixDQUFDLGFBQWEsRUFBRSxDQUFDO0FBQzVDLElBQUUsQ0FBQztBQUNGLElBQUMsMkNBQVcsR0FBWDtBQUFjLFFBQ1osSUFBSSxDQUFDLGFBQWEsQ0FBQyxPQUFPLENBQUMsVUFBQSxHQUFHLElBQUksT0FBQSxHQUFHLENBQUMsV0FBVyxFQUFFLEVBQWpCLENBQWlCLENBQUMsQ0FBQztBQUN6RCxJQUFFLENBQUM7QUFDRjtBQUNnRSxnQkEzQnpDLFVBQVU7QUFDaEMsZ0JBQThCLHVCQUF1QjtBQUNyRCxnQkFBNEIsdUJBQXVCO0FBQ25EO0FBQ0ksSUFPK0I7QUFBYSxRQUEvQyxNQUFNLENBQUMseUJBQXlCLENBQUM7QUFBQyw4REFBMkQ7QUFFaEcsSUFDRTtBQUFhLFFBRFosWUFBWSxDQUFDLE9BQU8sRUFBRSxDQUFDLFFBQVEsQ0FBQyxDQUFDO0FBQ3BDLDREQUdHO0lBckJVLHFCQUFxQix3QkFOakMsU0FBUyxDQUFDLGNBQ1QsUUFBUSxFQUFFLHlCQUF5QixjQUNuQyxJQUFJLEVBQUUsa0JBQ0osZ0NBQWdDLEVBQUUsTUFBTSxlQUN6QyxXQUNGLENBQUMsUUFDVyxxQkFBcUIsQ0E4QmpDOzs7Ozs7Ozs7Ozs7Ozs7Ozs7OztvQkFDRDtBQUFDLElBREQsNEJBQUM7QUFDQSxDQURBLEFBOUJELElBOEJDO0FBQ0QsU0EvQmEscUJBQXFCO0FBQUkiLCJzb3VyY2VzQ29udGVudCI6WyIvKlxuICogQ29weXJpZ2h0IChjKSAyMDE2LTIwMTkgVk13YXJlLCBJbmMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKiBUaGlzIHNvZnR3YXJlIGlzIHJlbGVhc2VkIHVuZGVyIE1JVCBsaWNlbnNlLlxuICogVGhlIGZ1bGwgbGljZW5zZSBpbmZvcm1hdGlvbiBjYW4gYmUgZm91bmQgaW4gTElDRU5TRSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBwcm9qZWN0LlxuICpcbiAqL1xuXG5pbXBvcnQgeyBEaXJlY3RpdmUsIEVsZW1lbnRSZWYsIEV2ZW50RW1pdHRlciwgT3V0cHV0LCBIb3N0TGlzdGVuZXIsIE9uRGVzdHJveSwgQWZ0ZXJWaWV3SW5pdCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgU3Vic2NyaXB0aW9uIH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyBDbHJQb3BvdmVyRXZlbnRzU2VydmljZSB9IGZyb20gJy4vcHJvdmlkZXJzL3BvcG92ZXItZXZlbnRzLnNlcnZpY2UnO1xuaW1wb3J0IHsgQ2xyUG9wb3ZlclRvZ2dsZVNlcnZpY2UgfSBmcm9tICcuL3Byb3ZpZGVycy9wb3BvdmVyLXRvZ2dsZS5zZXJ2aWNlJztcbmltcG9ydCB7IGZpbHRlciB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcblxuQERpcmVjdGl2ZSh7XG4gIHNlbGVjdG9yOiAnW2NsclBvcG92ZXJDbG9zZUJ1dHRvbl0nLFxuICBob3N0OiB7XG4gICAgJ1tjbGFzcy5jbHItc21hcnQtY2xvc2UtYnV0dG9uXSc6ICd0cnVlJyxcbiAgfSxcbn0pXG5leHBvcnQgY2xhc3MgQ2xyUG9wb3ZlckNsb3NlQnV0dG9uIGltcGxlbWVudHMgT25EZXN0cm95LCBBZnRlclZpZXdJbml0IHtcbiAgcHJpdmF0ZSBzdWJzY3JpcHRpb25zOiBTdWJzY3JpcHRpb25bXSA9IFtdO1xuXG4gIGNvbnN0cnVjdG9yKFxuICAgIHByaXZhdGUgZWxlbWVudFJlZjogRWxlbWVudFJlZixcbiAgICBwcml2YXRlIHNtYXJ0RXZlbnRzU2VydmljZTogQ2xyUG9wb3ZlckV2ZW50c1NlcnZpY2UsXG4gICAgcHJpdmF0ZSBzbWFydE9wZW5TZXJ2aWNlOiBDbHJQb3BvdmVyVG9nZ2xlU2VydmljZVxuICApIHtcbiAgICB0aGlzLnN1YnNjcmlwdGlvbnMucHVzaChcbiAgICAgIHNtYXJ0T3BlblNlcnZpY2Uub3BlbkNoYW5nZS5waXBlKGZpbHRlcih2YWx1ZSA9PiAhdmFsdWUpKS5zdWJzY3JpYmUoKCkgPT4ge1xuICAgICAgICB0aGlzLmNsb3NlQ2hhbmdlLm5leHQoKTtcbiAgICAgIH0pXG4gICAgKTtcbiAgfVxuXG4gIEBPdXRwdXQoJ2NsclBvcG92ZXJPbkNsb3NlQ2hhbmdlJykgY2xvc2VDaGFuZ2U6IEV2ZW50RW1pdHRlcjx2b2lkPiA9IG5ldyBFdmVudEVtaXR0ZXI8dm9pZD4oKTtcblxuICBASG9zdExpc3RlbmVyKCdjbGljaycsIFsnJGV2ZW50J10pXG4gIGhhbmRsZUNsaWNrKGV2ZW50OiBNb3VzZUV2ZW50KSB7XG4gICAgdGhpcy5zbWFydE9wZW5TZXJ2aWNlLnRvZ2dsZVdpdGhFdmVudChldmVudCk7XG4gICAgdGhpcy5zbWFydEV2ZW50c1NlcnZpY2Uuc2V0QW5jaG9yRm9jdXMoKTtcbiAgfVxuXG4gIG5nQWZ0ZXJWaWV3SW5pdCgpIHtcbiAgICB0aGlzLnNtYXJ0RXZlbnRzU2VydmljZS5jbG9zZUJ1dHRvblJlZiA9IHRoaXMuZWxlbWVudFJlZjtcbiAgICB0aGlzLnNtYXJ0RXZlbnRzU2VydmljZS5zZXRDbG9zZUZvY3VzKCk7XG4gIH1cbiAgbmdPbkRlc3Ryb3koKSB7XG4gICAgdGhpcy5zdWJzY3JpcHRpb25zLmZvckVhY2goc3ViID0+IHN1Yi51bnN1YnNjcmliZSgpKTtcbiAgfVxufVxuIl19