import { __decorate } from "tslib";
/*
 * Copyright (c) 2016-2020 VMware, Inc. All Rights Reserved.
 * This software is released under MIT license.
 * The full license information can be found in LICENSE in the root directory of this project.
 */
import { Component, Input, HostBinding, ElementRef, AfterViewInit } from '@angular/core';
import { isBooleanAttributeSet } from '../../utils/component/is-boolean-attribute-set';
import { ClrAriaLiveService, ClrAriaLivePoliteness } from '../../utils/a11y/aria-live.service';
import * as ɵngcc0 from '@angular/core';

var _c0 = ["*"];
var ClrSpinner = /** @class */ (function () {
    function ClrSpinner(el, ariaLiveService) {
        this.el = el;
        this.ariaLiveService = ariaLiveService;
    }
    ClrSpinner.prototype.ngAfterViewInit = function () {
        this.ariaLiveService.announce(this.el.nativeElement, this.ariaLive);
    };
    Object.defineProperty(ClrSpinner.prototype, "spinnerClass", {
        /**
         * Default class for all spinners. This class is always true
         */
        get: function () {
            return true;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ClrSpinner.prototype, "inlineClass", {
        get: function () {
            return this._inline;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ClrSpinner.prototype, "clrInline", {
        set: function (value) {
            this._inline = isBooleanAttributeSet(value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ClrSpinner.prototype, "inverseClass", {
        get: function () {
            return this._inverse;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ClrSpinner.prototype, "clrInverse", {
        set: function (value) {
            this._inverse = isBooleanAttributeSet(value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ClrSpinner.prototype, "smallClass", {
        get: function () {
            return this._small;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ClrSpinner.prototype, "clrSmall", {
        set: function (value) {
            this._small = isBooleanAttributeSet(value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ClrSpinner.prototype, "mediumClass", {
        get: function () {
            if (this._small) {
                return false;
            }
            return this._medium;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ClrSpinner.prototype, "clrMedium", {
        set: function (value) {
            this._medium = isBooleanAttributeSet(value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ClrSpinner.prototype, "ariaLive", {
        get: function () {
            if (isBooleanAttributeSet(this.assertive)) {
                return ClrAriaLivePoliteness.assertive;
            }
            if (isBooleanAttributeSet(this.off)) {
                return ClrAriaLivePoliteness.off;
            }
            return ClrAriaLivePoliteness.polite;
        },
        enumerable: true,
        configurable: true
    });
    ClrSpinner.ctorParameters = function () { return [
        { type: ElementRef },
        { type: ClrAriaLiveService }
    ]; };
    __decorate([
        HostBinding('class.spinner')
    ], ClrSpinner.prototype, "spinnerClass", null);
    __decorate([
        HostBinding('class.spinner-inline')
    ], ClrSpinner.prototype, "inlineClass", null);
    __decorate([
        Input('clrInline')
    ], ClrSpinner.prototype, "clrInline", null);
    __decorate([
        HostBinding('class.spinner-inverse')
    ], ClrSpinner.prototype, "inverseClass", null);
    __decorate([
        Input('clrInverse')
    ], ClrSpinner.prototype, "clrInverse", null);
    __decorate([
        HostBinding('class.spinner-sm')
    ], ClrSpinner.prototype, "smallClass", null);
    __decorate([
        Input('clrSmall')
    ], ClrSpinner.prototype, "clrSmall", null);
    __decorate([
        HostBinding('class.spinner-md')
    ], ClrSpinner.prototype, "mediumClass", null);
    __decorate([
        Input('clrMedium')
    ], ClrSpinner.prototype, "clrMedium", null);
    __decorate([
        Input('clrAssertive')
    ], ClrSpinner.prototype, "assertive", void 0);
    __decorate([
        Input('clrOff')
    ], ClrSpinner.prototype, "off", void 0);
ClrSpinner.ɵfac = function ClrSpinner_Factory(t) { return new (t || ClrSpinner)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ClrAriaLiveService)); };
ClrSpinner.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: ClrSpinner, selectors: [["clr-spinner"]], hostVars: 11, hostBindings: function ClrSpinner_HostBindings(rf, ctx) { if (rf & 2) {
        ɵngcc0.ɵɵattribute("aria-busy", true);
        ɵngcc0.ɵɵclassProp("spinner", ctx.spinnerClass)("spinner-inline", ctx.inlineClass)("spinner-inverse", ctx.inverseClass)("spinner-sm", ctx.smallClass)("spinner-md", ctx.mediumClass);
    } }, inputs: { clrInline: "clrInline", clrInverse: "clrInverse", clrSmall: "clrSmall", clrMedium: "clrMedium", assertive: ["clrAssertive", "assertive"], off: ["clrOff", "off"] }, features: [ɵngcc0.ɵɵProvidersFeature([ClrAriaLiveService])], ngContentSelectors: _c0, decls: 1, vars: 0, template: function ClrSpinner_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵprojection(0);
    } }, encapsulation: 2 });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ClrSpinner, [{
        type: Component,
        args: [{
                selector: 'clr-spinner',
                providers: [ClrAriaLiveService],
                template: "\n    <ng-content></ng-content>\n  ",
                host: {
                    '[attr.aria-busy]': 'true'
                }
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ClrAriaLiveService }]; }, { spinnerClass: [{
            type: HostBinding,
            args: ['class.spinner']
        }], inlineClass: [{
            type: HostBinding,
            args: ['class.spinner-inline']
        }], clrInline: [{
            type: Input,
            args: ['clrInline']
        }], inverseClass: [{
            type: HostBinding,
            args: ['class.spinner-inverse']
        }], clrInverse: [{
            type: Input,
            args: ['clrInverse']
        }], smallClass: [{
            type: HostBinding,
            args: ['class.spinner-sm']
        }], clrSmall: [{
            type: Input,
            args: ['clrSmall']
        }], mediumClass: [{
            type: HostBinding,
            args: ['class.spinner-md']
        }], clrMedium: [{
            type: Input,
            args: ['clrMedium']
        }], assertive: [{
            type: Input,
            args: ['clrAssertive']
        }], off: [{
            type: Input,
            args: ['clrOff']
        }] }); })();
    return ClrSpinner;
}());
export { ClrSpinner };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,