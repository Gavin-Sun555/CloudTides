import { __decorate, __param } from "tslib";
/*
 * Copyright (c) 2016-2020 VMware, Inc. All Rights Reserved.
 * This software is released under MIT license.
 * The full license information can be found in LICENSE in the root directory of this project.
 */
import { Component, EventEmitter, HostBinding, Inject, Input, Optional, Output, SkipSelf } from '@angular/core';
import { ClrCommonStringsService } from '../../utils/i18n/common-strings.service';
import { UNIQUE_ID, UNIQUE_ID_PROVIDER } from '../../utils/id-generator/id-generator.service';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@angular/common';
import * as ɵngcc2 from '../../utils/animations/expandable-animation/expandable-animation';
import * as ɵngcc3 from '../../icon/icon';

function ClrStackBlock_clr_icon_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelement(0, "clr-icon", 7);
} if (rf & 2) {
    var ctx_r0 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵattribute("dir", ctx_r0.caretDirection);
} }
function ClrStackBlock_span_2_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "span", 8);
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    var ctx_r1 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate(ctx_r1.commonStrings.keys.stackViewChanged);
} }
var _c0 = [[["clr-stack-label"]], "*", [["clr-stack-block"]]];
var _c1 = ["clr-stack-label", "*", "clr-stack-block"];
var ClrStackBlock = /** @class */ (function () {
    /*
     * This would be more efficient with @ContentChildren, with the parent ClrStackBlock
     * querying for children StackBlocks, but this feature is not available when downgrading
     * the component for Angular 1.
     */
    function ClrStackBlock(parent, uniqueId, commonStrings) {
        this.parent = parent;
        this.uniqueId = uniqueId;
        this.commonStrings = commonStrings;
        this.expanded = false;
        this.expandedChange = new EventEmitter(false);
        this.expandable = false;
        this.focused = false;
        this._changedChildren = 0;
        this._fullyInitialized = false;
        this._changed = false;
        if (parent) {
            parent.addChild();
        }
    }
    Object.defineProperty(ClrStackBlock.prototype, "getChangedValue", {
        get: function () {
            return this._changed || (this._changedChildren > 0 && !this.expanded);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ClrStackBlock.prototype, "setChangedValue", {
        set: function (value) {
            this._changed = value;
            if (this.parent && this._fullyInitialized) {
                if (value) {
                    this.parent._changedChildren++;
                }
                else {
                    this.parent._changedChildren--;
                }
            }
        },
        enumerable: true,
        configurable: true
    });
    ClrStackBlock.prototype.ngOnInit = function () {
        // in order to access the parent ClrStackBlock's properties,
        // the child ClrStackBlock has to be fully initialized at first.
        this._fullyInitialized = true;
    };
    ClrStackBlock.prototype.addChild = function () {
        this.expandable = true;
    };
    ClrStackBlock.prototype.toggleExpand = function () {
        if (this.expandable) {
            this.expanded = !this.expanded;
            this.expandedChange.emit(this.expanded);
        }
    };
    Object.defineProperty(ClrStackBlock.prototype, "caretDirection", {
        get: function () {
            return this.expanded ? 'down' : 'right';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ClrStackBlock.prototype, "role", {
        get: function () {
            return this.expandable ? 'button' : null;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ClrStackBlock.prototype, "tabIndex", {
        get: function () {
            return this.expandable ? '0' : null;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ClrStackBlock.prototype, "onStackLabelFocus", {
        get: function () {
            return this.expandable && !this.expanded && this.focused;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ClrStackBlock.prototype, "ariaExpanded", {
        get: function () {
            if (!this.expandable) {
                return null;
            }
            else {
                return this.expanded ? 'true' : 'false';
            }
        },
        enumerable: true,
        configurable: true
    });
    ClrStackBlock.prototype.getStackChildrenId = function () {
        return this.expanded ? "clr-stack-children-" + this.uniqueId : null;
    };
    ClrStackBlock.ctorParameters = function () { return [
        { type: ClrStackBlock, decorators: [{ type: SkipSelf }, { type: Optional }] },
        { type: String, decorators: [{ type: Inject, args: [UNIQUE_ID,] }] },
        { type: ClrCommonStringsService }
    ]; };
    __decorate([
        HostBinding('class.stack-block-expanded'),
        Input('clrSbExpanded')
    ], ClrStackBlock.prototype, "expanded", void 0);
    __decorate([
        Output('clrSbExpandedChange')
    ], ClrStackBlock.prototype, "expandedChange", void 0);
    __decorate([
        HostBinding('class.stack-block-expandable'),
        Input('clrSbExpandable')
    ], ClrStackBlock.prototype, "expandable", void 0);
    __decorate([
        HostBinding('class.stack-block-changed')
    ], ClrStackBlock.prototype, "getChangedValue", null);
    __decorate([
        Input('clrSbNotifyChange')
    ], ClrStackBlock.prototype, "setChangedValue", null);
    __decorate([
        Input('clrStackViewLevel')
    ], ClrStackBlock.prototype, "ariaLevel", void 0);
    __decorate([
        Input('clrStackViewSetsize')
    ], ClrStackBlock.prototype, "ariaSetsize", void 0);
    __decorate([
        Input('clrStackViewPosinset')
    ], ClrStackBlock.prototype, "ariaPosinset", void 0);
    __decorate([
        HostBinding('class.on-focus')
    ], ClrStackBlock.prototype, "onStackLabelFocus", null);
    ClrStackBlock = __decorate([ __param(0, SkipSelf()),
        __param(0, Optional()),
        __param(1, Inject(UNIQUE_ID))
    ], ClrStackBlock);
ClrStackBlock.ɵfac = function ClrStackBlock_Factory(t) { return new (t || ClrStackBlock)(ɵngcc0.ɵɵdirectiveInject(ClrStackBlock, 12), ɵngcc0.ɵɵdirectiveInject(UNIQUE_ID), ɵngcc0.ɵɵdirectiveInject(ClrCommonStringsService)); };
ClrStackBlock.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: ClrStackBlock, selectors: [["clr-stack-block"]], hostVars: 10, hostBindings: function ClrStackBlock_HostBindings(rf, ctx) { if (rf & 2) {
        ɵngcc0.ɵɵclassProp("stack-block", true)("stack-block-expanded", ctx.expanded)("stack-block-expandable", ctx.expandable)("stack-block-changed", ctx.getChangedValue)("on-focus", ctx.onStackLabelFocus);
    } }, inputs: { expanded: ["clrSbExpanded", "expanded"], expandable: ["clrSbExpandable", "expandable"], setChangedValue: ["clrSbNotifyChange", "setChangedValue"], ariaLevel: ["clrStackViewLevel", "ariaLevel"], ariaSetsize: ["clrStackViewSetsize", "ariaSetsize"], ariaPosinset: ["clrStackViewPosinset", "ariaPosinset"] }, outputs: { expandedChange: "clrSbExpandedChange" }, features: [ɵngcc0.ɵɵProvidersFeature([UNIQUE_ID_PROVIDER])], ngContentSelectors: _c1, decls: 10, vars: 14, consts: [[1, "stack-block-label", 3, "id", "click", "keyup.enter", "keyup.space", "focus", "blur"], ["shape", "caret", "class", "stack-block-caret", 4, "ngIf"], ["class", "clr-sr-only", 4, "ngIf"], [1, "stack-view-key"], [1, "stack-block-content"], [1, "stack-children", 3, "clrExpandTrigger"], ["role", "region"], ["shape", "caret", 1, "stack-block-caret"], [1, "clr-sr-only"]], template: function ClrStackBlock_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef(_c0);
        ɵngcc0.ɵɵelementStart(0, "div", 0);
        ɵngcc0.ɵɵlistener("click", function ClrStackBlock_Template_div_click_0_listener() { return ctx.toggleExpand(); })("keyup.enter", function ClrStackBlock_Template_div_keyup_enter_0_listener() { return ctx.toggleExpand(); })("keyup.space", function ClrStackBlock_Template_div_keyup_space_0_listener() { return ctx.toggleExpand(); })("focus", function ClrStackBlock_Template_div_focus_0_listener() { return ctx.focused = true; })("blur", function ClrStackBlock_Template_div_blur_0_listener() { return ctx.focused = false; });
        ɵngcc0.ɵɵtemplate(1, ClrStackBlock_clr_icon_1_Template, 1, 1, "clr-icon", 1);
        ɵngcc0.ɵɵtemplate(2, ClrStackBlock_span_2_Template, 2, 1, "span", 2);
        ɵngcc0.ɵɵelementStart(3, "div", 3);
        ɵngcc0.ɵɵprojection(4);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(5, "div", 4);
        ɵngcc0.ɵɵprojection(6, 1);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(7, "clr-expandable-animation", 5);
        ɵngcc0.ɵɵelementStart(8, "div", 6);
        ɵngcc0.ɵɵprojection(9, 2);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵproperty("id", ctx.uniqueId);
        ɵngcc0.ɵɵattribute("role", ctx.role)("tabindex", ctx.tabIndex)("aria-expanded", ctx.ariaExpanded)("aria-controls", ctx.getStackChildrenId())("aria-posinset", ctx.ariaPosinset)("aria-level", ctx.ariaLevel)("aria-setsize", ctx.ariaSetsize);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.expandable);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.getChangedValue);
        ɵngcc0.ɵɵadvance(5);
        ɵngcc0.ɵɵproperty("clrExpandTrigger", ctx.expanded);
        ɵngcc0.ɵɵattribute("id", ctx.getStackChildrenId());
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵstyleProp("height", ctx.expanded ? "auto" : 0);
    } }, directives: [ɵngcc1.NgIf, ɵngcc2.ClrExpandableAnimation, ɵngcc3.ClrIconCustomTag], styles: ["[_nghost-%COMP%] {\n        display: block;\n      }"] });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ClrStackBlock, [{
        type: Component,
        args: [{
                selector: 'clr-stack-block',
                template: "\n    <div class=\"stack-block-label\"\n        (click)=\"toggleExpand()\"\n        (keyup.enter)=\"toggleExpand()\"\n        (keyup.space)=\"toggleExpand()\"\n        (focus)=\"focused = true\"\n        (blur)=\"focused = false\"\n        [id]=\"uniqueId\"\n        [attr.role]=\"role\"\n        [attr.tabindex]=\"tabIndex\"\n        [attr.aria-expanded]=\"ariaExpanded\"\n        [attr.aria-controls]=\"getStackChildrenId()\"\n        [attr.aria-posinset]=\"ariaPosinset\"\n        [attr.aria-level]=\"ariaLevel\"\n        [attr.aria-setsize]=\"ariaSetsize\"\n        >\n      <clr-icon shape=\"caret\"\n                class=\"stack-block-caret\"\n                *ngIf=\"expandable\"\n                [attr.dir]=\"caretDirection\"></clr-icon>\n      <span class=\"clr-sr-only\" *ngIf=\"getChangedValue\">{{commonStrings.keys.stackViewChanged}}</span>\n      <div class=\"stack-view-key\">\n        <!-- This structure changed to fix #3567 and the a11y request was to move away from dl's -->\n        <!-- I added the key class to update css targets for the original component style -->\n        <ng-content select=\"clr-stack-label\"></ng-content>\n      </div>\n      <div class=\"stack-block-content\">\n        <ng-content></ng-content>\n      </div>\n    </div>\n\n    <clr-expandable-animation [clrExpandTrigger]=\"expanded\" class=\"stack-children\" [attr.id]=\"getStackChildrenId()\">\n      <div [style.height]=\"expanded ? 'auto' : 0\" role=\"region\">\n        <ng-content select=\"clr-stack-block\"></ng-content>\n      </div>\n    </clr-expandable-animation>\n  ",
                // Make sure the host has the proper class for styling purposes
                host: { '[class.stack-block]': 'true' },
                providers: [UNIQUE_ID_PROVIDER],
                styles: ["\n      :host {\n        display: block;\n      }\n    "]
            }]
    }], function () { return [{ type: ClrStackBlock, decorators: [{
                type: SkipSelf
            }, {
                type: Optional
            }] }, { type: String, decorators: [{
                type: Inject,
                args: [UNIQUE_ID]
            }] }, { type: ClrCommonStringsService }]; }, { expanded: [{
            type: HostBinding,
            args: ['class.stack-block-expanded']
        }, {
            type: Input,
            args: ['clrSbExpanded']
        }], expandedChange: [{
            type: Output,
            args: ['clrSbExpandedChange']
        }], expandable: [{
            type: HostBinding,
            args: ['class.stack-block-expandable']
        }, {
            type: Input,
            args: ['clrSbExpandable']
        }], getChangedValue: [{
            type: HostBinding,
            args: ['class.stack-block-changed']
        }], setChangedValue: [{
            type: Input,
            args: ['clrSbNotifyChange']
        }], onStackLabelFocus: [{
            type: HostBinding,
            args: ['class.on-focus']
        }], ariaLevel: [{
            type: Input,
            args: ['clrStackViewLevel']
        }], ariaSetsize: [{
            type: Input,
            args: ['clrStackViewSetsize']
        }], ariaPosinset: [{
            type: Input,
            args: ['clrStackViewPosinset']
        }] }); })();
    return ClrStackBlock;
}());
export { ClrStackBlock };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,