import { __decorate } from "tslib";
/*
 * Copyright (c) 2016-2019 VMware, Inc. All Rights Reserved.
 * This software is released under MIT license.
 * The full license information can be found in LICENSE in the root directory of this project.
 */
import { Component, ContentChildren, Injector, OnInit, QueryList, ViewContainerRef } from '@angular/core';
import { ClrSignpost } from '../../popover/signpost/signpost';
import { HostWrapper } from '../../utils/host-wrapping/host-wrapper';
import { WrappedCell } from './wrapped-cell';
import * as ɵngcc0 from '@angular/core';

var _c0 = ["*"];
var ClrDatagridCell = /** @class */ (function () {
    function ClrDatagridCell(vcr) {
        this.vcr = vcr;
    }
    ClrDatagridCell.prototype.ngOnInit = function () {
        this.wrappedInjector = new HostWrapper(WrappedCell, this.vcr);
    };
    Object.defineProperty(ClrDatagridCell.prototype, "_view", {
        get: function () {
            return this.wrappedInjector.get(WrappedCell, this.vcr).cellView;
        },
        enumerable: true,
        configurable: true
    });
    ClrDatagridCell.ctorParameters = function () { return [
        { type: ViewContainerRef }
    ]; };
    __decorate([
        ContentChildren(ClrSignpost)
    ], ClrDatagridCell.prototype, "signpost", void 0);
ClrDatagridCell.ɵfac = function ClrDatagridCell_Factory(t) { return new (t || ClrDatagridCell)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef)); };
ClrDatagridCell.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: ClrDatagridCell, selectors: [["clr-dg-cell"]], contentQueries: function ClrDatagridCell_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {
        ɵngcc0.ɵɵcontentQuery(dirIndex, ClrSignpost, false);
    } if (rf & 2) {
        var _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.signpost = _t);
    } }, hostAttrs: ["role", "gridcell"], hostVars: 4, hostBindings: function ClrDatagridCell_HostBindings(rf, ctx) { if (rf & 2) {
        ɵngcc0.ɵɵclassProp("datagrid-cell", true)("datagrid-signpost-trigger", ctx.signpost.length > 0);
    } }, ngContentSelectors: _c0, decls: 1, vars: 0, template: function ClrDatagridCell_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵprojection(0);
    } }, encapsulation: 2 });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ClrDatagridCell, [{
        type: Component,
        args: [{
                selector: 'clr-dg-cell',
                template: "\n        <ng-content></ng-content>\n    ",
                host: {
                    '[class.datagrid-cell]': 'true',
                    '[class.datagrid-signpost-trigger]': 'signpost.length > 0',
                    role: 'gridcell'
                }
            }]
    }], function () { return [{ type: ɵngcc0.ViewContainerRef }]; }, { signpost: [{
            type: ContentChildren,
            args: [ClrSignpost]
        }] }); })();
    return ClrDatagridCell;
}());
export { ClrDatagridCell };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGF0YWdyaWQtY2VsbC5qcyIsInNvdXJjZXMiOlsibmc6L0BjbHIvYW5ndWxhci9kYXRhL2RhdGFncmlkL2RhdGFncmlkLWNlbGwudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNILE9BQU8sRUFBRSxTQUFTLEVBQUUsZUFBZSxFQUFFLFFBQVEsRUFBRSxNQUFNLEVBQUUsU0FBUyxFQUFFLGdCQUFnQixFQUFFLE1BQU0sZUFBZSxDQUFDO0FBRTFHLE9BQU8sRUFBRSxXQUFXLEVBQUUsTUFBTSxpQ0FBaUMsQ0FBQztBQUM5RCxPQUFPLEVBQUUsV0FBVyxFQUFFLE1BQU0sd0NBQXdDLENBQUM7QUFDckUsT0FBTyxFQUFFLFdBQVcsRUFBRSxNQUFNLGdCQUFnQixDQUFDOzs7O0FBYTdDO0FBQ0UsSUFVQSx5QkFBb0IsR0FBcUI7QUFBSSxRQUF6QixRQUFHLEdBQUgsR0FBRyxDQUFrQjtBQUFDLElBQUUsQ0FBQztBQUMvQyxJQUdFLGtDQUFRLEdBQVI7QUFDRCxRQUFHLElBQUksQ0FBQyxlQUFlLEdBQUcsSUFBSSxXQUFXLENBQUMsV0FBVyxFQUFFLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQztBQUNsRSxJQUFFLENBQUM7QUFFSCxJQUFFLHNCQUFXLGtDQUFLO0FBQUksYUFBcEI7QUFBYyxZQUNaLE9BQU8sSUFBSSxDQUFDLGVBQWUsQ0FBQyxHQUFHLENBQUMsV0FBVyxFQUFFLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxRQUFRLENBQUM7QUFDcEUsUUFBRSxDQUFDO0FBQ0Y7QUFDd0I7QUFBMkIsT0FGakQ7QUFDSDtBQUMwRCxnQkFaL0IsZ0JBQWdCO0FBQUc7QUFFdkMsSUFKeUI7QUFBYSxRQUExQyxlQUFlLENBQUMsV0FBVyxDQUFDO0FBQUMscURBQWlDO0lBVHBELGVBQWUsd0JBWDNCLFNBQVMsQ0FBQyxjQUNULFFBQVEsRUFBRSxhQUFhLGNBQ3ZCLFFBQVEsRUFBRTtPQUVQLGNBQ0gsSUFBSSxFQUFFLGtCQUNKLHVCQUF1QixFQUFFLE1BQU0sa0JBQy9CLG1DQUFtQyxFQUFFLHFCQUFxQixrQkFDMUQsSUFBSSxFQUFFLFVBQVU7T0FDakIsVUFDRixDQUFDLFFBQ1csZUFBZSxDQXNCM0I7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztvQkFDRDtBQUFDLElBREQsc0JBQUM7QUFDQSxDQURBLEFBdEJELElBc0JDO0FBQ0QsU0F2QmEsZUFBZTtBQUFJIiwic291cmNlc0NvbnRlbnQiOlsiLypcbiAqIENvcHlyaWdodCAoYykgMjAxNi0yMDE5IFZNd2FyZSwgSW5jLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICogVGhpcyBzb2Z0d2FyZSBpcyByZWxlYXNlZCB1bmRlciBNSVQgbGljZW5zZS5cbiAqIFRoZSBmdWxsIGxpY2Vuc2UgaW5mb3JtYXRpb24gY2FuIGJlIGZvdW5kIGluIExJQ0VOU0UgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgcHJvamVjdC5cbiAqL1xuaW1wb3J0IHsgQ29tcG9uZW50LCBDb250ZW50Q2hpbGRyZW4sIEluamVjdG9yLCBPbkluaXQsIFF1ZXJ5TGlzdCwgVmlld0NvbnRhaW5lclJlZiB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG5pbXBvcnQgeyBDbHJTaWducG9zdCB9IGZyb20gJy4uLy4uL3BvcG92ZXIvc2lnbnBvc3Qvc2lnbnBvc3QnO1xuaW1wb3J0IHsgSG9zdFdyYXBwZXIgfSBmcm9tICcuLi8uLi91dGlscy9ob3N0LXdyYXBwaW5nL2hvc3Qtd3JhcHBlcic7XG5pbXBvcnQgeyBXcmFwcGVkQ2VsbCB9IGZyb20gJy4vd3JhcHBlZC1jZWxsJztcblxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAnY2xyLWRnLWNlbGwnLFxuICB0ZW1wbGF0ZTogYFxuICAgICAgICA8bmctY29udGVudD48L25nLWNvbnRlbnQ+XG4gICAgYCxcbiAgaG9zdDoge1xuICAgICdbY2xhc3MuZGF0YWdyaWQtY2VsbF0nOiAndHJ1ZScsXG4gICAgJ1tjbGFzcy5kYXRhZ3JpZC1zaWducG9zdC10cmlnZ2VyXSc6ICdzaWducG9zdC5sZW5ndGggPiAwJyxcbiAgICByb2xlOiAnZ3JpZGNlbGwnLFxuICB9LFxufSlcbmV4cG9ydCBjbGFzcyBDbHJEYXRhZ3JpZENlbGwgaW1wbGVtZW50cyBPbkluaXQge1xuICAvKioqKioqKioqXG4gICAqIEBwcm9wZXJ0eSBzaWducG9zdFxuICAgKlxuICAgKiBAZGVzY3JpcHRpb25cbiAgICogQENvbnRlbnRDaGlsZCBpcyB1c2VkIHRvIGRldGVjdCB0aGUgcHJlc2VuY2Ugb2YgYSBTaWducG9zdCBpbiB0aGUgcHJvamVjdGVkIGNvbnRlbnQuXG4gICAqIE9uIHRoZSBob3N0LCB3ZSBzZXQgdGhlIC5kYXRhZ3JpZC1zaWducG9zdC10cmlnZ2VyIGNsYXNzIG9uIHRoZSBjZWxsIHdoZW4gc2lnbnBvc3QubGVuZ3RoIGlzIGdyZWF0ZXIgdGhhbiAwLlxuICAgKlxuICAgKi9cbiAgQENvbnRlbnRDaGlsZHJlbihDbHJTaWducG9zdCkgc2lnbnBvc3Q6IFF1ZXJ5TGlzdDxDbHJTaWducG9zdD47XG5cbiAgY29uc3RydWN0b3IocHJpdmF0ZSB2Y3I6IFZpZXdDb250YWluZXJSZWYpIHt9XG5cbiAgcHJpdmF0ZSB3cmFwcGVkSW5qZWN0b3I6IEluamVjdG9yO1xuXG4gIG5nT25Jbml0KCkge1xuICAgIHRoaXMud3JhcHBlZEluamVjdG9yID0gbmV3IEhvc3RXcmFwcGVyKFdyYXBwZWRDZWxsLCB0aGlzLnZjcik7XG4gIH1cblxuICBwdWJsaWMgZ2V0IF92aWV3KCkge1xuICAgIHJldHVybiB0aGlzLndyYXBwZWRJbmplY3Rvci5nZXQoV3JhcHBlZENlbGwsIHRoaXMudmNyKS5jZWxsVmlldztcbiAgfVxufVxuIl19