import { __decorate, __param } from "tslib";
/*
 * Copyright (c) 2016-2018 VMware, Inc. All Rights Reserved.
 * This software is released under MIT license.
 * The full license information can be found in LICENSE in the root directory of this project.
 */
import { Directive, Input, Optional } from '@angular/core';
import { Items } from './providers/items';
import * as ɵngcc0 from '@angular/core';
var ClrDatagridItemsTrackBy = /** @class */ (function () {
    function ClrDatagridItemsTrackBy(_items) {
        this._items = _items;
    }
    Object.defineProperty(ClrDatagridItemsTrackBy.prototype, "trackBy", {
        set: function (value) {
            if (this._items) {
                this._items.trackBy = value;
            }
        },
        enumerable: true,
        configurable: true
    });
    ClrDatagridItemsTrackBy.ctorParameters = function () { return [
        { type: Items, decorators: [{ type: Optional }] }
    ]; };
    __decorate([
        Input('ngForTrackBy')
    ], ClrDatagridItemsTrackBy.prototype, "trackBy", null);
    ClrDatagridItemsTrackBy = __decorate([ __param(0, Optional())
    ], ClrDatagridItemsTrackBy);
ClrDatagridItemsTrackBy.ɵfac = function ClrDatagridItemsTrackBy_Factory(t) { return new (t || ClrDatagridItemsTrackBy)(ɵngcc0.ɵɵdirectiveInject(Items, 8)); };
ClrDatagridItemsTrackBy.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: ClrDatagridItemsTrackBy, selectors: [["", "ngForTrackBy", ""]], inputs: { trackBy: ["ngForTrackBy", "trackBy"] } });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ClrDatagridItemsTrackBy, [{
        type: Directive,
        args: [{
                selector: '[ngForTrackBy]'
            }]
    }], function () { return [{ type: Items, decorators: [{
                type: Optional
            }] }]; }, { trackBy: [{
            type: Input,
            args: ['ngForTrackBy']
        }] }); })();
    return ClrDatagridItemsTrackBy;
}());
export { ClrDatagridItemsTrackBy };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGF0YWdyaWQtaXRlbXMtdHJhY2tieS5qcyIsInNvdXJjZXMiOlsibmc6L0BjbHIvYW5ndWxhci9kYXRhL2RhdGFncmlkL2RhdGFncmlkLWl0ZW1zLXRyYWNrYnkudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNILE9BQU8sRUFBRSxTQUFTLEVBQUUsS0FBSyxFQUFFLFFBQVEsRUFBbUIsTUFBTSxlQUFlLENBQUM7QUFFNUUsT0FBTyxFQUFFLEtBQUssRUFBRSxNQUFNLG1CQUFtQixDQUFDOztBQUsxQztBQUNXLElBQVQsaUNBQWdDLE1BQWdCO0FBQUksUUFBcEIsV0FBTSxHQUFOLE1BQU0sQ0FBVTtBQUFDLElBQUUsQ0FBQztBQUN0RCxJQUVFLHNCQUFJLDRDQUFPO0FBQUksYUFBZixVQUFZLEtBQXlCO0FBQ3ZDLFlBQUksSUFBSSxJQUFJLENBQUMsTUFBTSxFQUFFO0FBQ3JCLGdCQUFNLElBQUksQ0FBQyxNQUFNLENBQUMsT0FBTyxHQUFHLEtBQUssQ0FBQztBQUNsQyxhQUFLO0FBQ0wsUUFBRSxDQUFDO0FBQ0Y7QUFDd0I7QUFBMkIsT0FGakQ7QUFDSDtBQUNrRSxnQkFUeEIsS0FBSyx1QkFBaEMsUUFBUTtBQUFNO0FBQVUsSUFHckM7QUFBYSxRQURaLEtBQUssQ0FBQyxjQUFjLENBQUM7QUFDeEIsMERBSUc7QUFDRixJQVRZLHVCQUF1Qix3QkFIbkMsU0FBUyxDQUFDLG5CQUdILENBQ08sV0FBQSxRQUFRLEVBQUUsQ0FBQTtTQUh2QixRQUFRLEVBQUUsbkJBR2MsT0FEYix1QkFBdUIsQ0FTbkM7RUFYMkIsV0FDM0IsQ0FBQzs7Ozs7Ozs7Ozs7O29CQVdGO0FBQUMsSUFERCw4QkFBQztBQUNBLENBREEsQUFURCxJQVNDO0FBQ0QsU0FWYSx1QkFBdUI7QUFBSSIsInNvdXJjZXNDb250ZW50IjpbIi8qXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTYtMjAxOCBWTXdhcmUsIEluYy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqIFRoaXMgc29mdHdhcmUgaXMgcmVsZWFzZWQgdW5kZXIgTUlUIGxpY2Vuc2UuXG4gKiBUaGUgZnVsbCBsaWNlbnNlIGluZm9ybWF0aW9uIGNhbiBiZSBmb3VuZCBpbiBMSUNFTlNFIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHByb2plY3QuXG4gKi9cbmltcG9ydCB7IERpcmVjdGl2ZSwgSW5wdXQsIE9wdGlvbmFsLCBUcmFja0J5RnVuY3Rpb24gfSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuaW1wb3J0IHsgSXRlbXMgfSBmcm9tICcuL3Byb3ZpZGVycy9pdGVtcyc7XG5cbkBEaXJlY3RpdmUoe1xuICBzZWxlY3RvcjogJ1tuZ0ZvclRyYWNrQnldJyxcbn0pXG5leHBvcnQgY2xhc3MgQ2xyRGF0YWdyaWRJdGVtc1RyYWNrQnk8VCA9IGFueT4ge1xuICBjb25zdHJ1Y3RvcihAT3B0aW9uYWwoKSBwcml2YXRlIF9pdGVtczogSXRlbXM8VD4pIHt9XG5cbiAgQElucHV0KCduZ0ZvclRyYWNrQnknKVxuICBzZXQgdHJhY2tCeSh2YWx1ZTogVHJhY2tCeUZ1bmN0aW9uPFQ+KSB7XG4gICAgaWYgKHRoaXMuX2l0ZW1zKSB7XG4gICAgICB0aGlzLl9pdGVtcy50cmFja0J5ID0gdmFsdWU7XG4gICAgfVxuICB9XG59XG4iXX0=