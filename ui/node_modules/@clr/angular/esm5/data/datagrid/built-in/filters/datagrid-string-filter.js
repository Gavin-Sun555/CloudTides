import { __decorate, __extends } from "tslib";
/*
 * Copyright (c) 2016-2020 VMware, Inc. All Rights Reserved.
 * This software is released under MIT license.
 * The full license information can be found in LICENSE in the root directory of this project.
 */
import { Component, EventEmitter, Input, Output, ViewChild } from '@angular/core';
import { ClrDatagridFilter } from '../../datagrid-filter';
import { CustomFilter } from '../../providers/custom-filter';
import { FiltersProvider, RegisteredFilter } from '../../providers/filters';
import { DomAdapter } from '../../../../utils/dom-adapter/dom-adapter';
import { DatagridFilterRegistrar } from '../../utils/datagrid-filter-registrar';
import { DatagridStringFilterImpl } from './datagrid-string-filter-impl';
import { ClrPopoverToggleService } from '../../../../utils/popover/providers/popover-toggle.service';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '../../datagrid-filter';
import * as ɵngcc2 from '@angular/forms';

var _c0 = ["input"];
var DatagridStringFilter = /** @class */ (function (_super) {
    __extends(DatagridStringFilter, _super);
    function DatagridStringFilter(filters, domAdapter, smartToggleService) {
        var _this = _super.call(this, filters) || this;
        _this.domAdapter = domAdapter;
        _this.smartToggleService = smartToggleService;
        _this.subs = [];
        /**
         * Indicates if the filter dropdown is open
         */
        _this.open = false;
        _this.filterValueChange = new EventEmitter();
        return _this;
    }
    DatagridStringFilter_1 = DatagridStringFilter;
    Object.defineProperty(DatagridStringFilter.prototype, "customStringFilter", {
        /**
         * Customizable filter logic based on a search text
         */
        set: function (value) {
            if (value instanceof RegisteredFilter) {
                this.setFilter(value);
            }
            else {
                this.setFilter(new DatagridStringFilterImpl(value));
            }
            if (this.initFilterValue) {
                this.value = this.initFilterValue;
                // This initFilterValue should be used only once after the filter registration
                // So deleting this property value to prevent it from being used again
                // if this customStringFilter property is set again
                delete this.initFilterValue;
            }
        },
        enumerable: true,
        configurable: true
    });
    DatagridStringFilter.prototype.ngAfterViewInit = function () {
        var _this = this;
        this.subs.push(this.smartToggleService.openChange.subscribe(function (openChange) {
            _this.open = openChange;
            // The timeout in used because when this executes, the input isn't displayed.
            setTimeout(function () {
                _this.domAdapter.focus(_this.input.nativeElement);
            });
        }));
    };
    DatagridStringFilter.prototype.ngOnDestroy = function () {
        _super.prototype.ngOnDestroy.call(this);
        this.subs.forEach(function (sub) { return sub.unsubscribe(); });
    };
    Object.defineProperty(DatagridStringFilter.prototype, "value", {
        /**
         * Common setter for the input value
         */
        get: function () {
            return this.filter.value;
        },
        set: function (value) {
            if (this.filter) {
                if (!value) {
                    value = '';
                }
                if (value !== this.filter.value) {
                    this.filter.value = value;
                    this.filterValueChange.emit(value);
                }
            }
            else {
                this.initFilterValue = value;
            }
        },
        enumerable: true,
        configurable: true
    });
    var DatagridStringFilter_1;
    DatagridStringFilter.ctorParameters = function () { return [
        { type: FiltersProvider },
        { type: DomAdapter },
        { type: ClrPopoverToggleService }
    ]; };
    __decorate([
        Input('clrDgStringFilter')
    ], DatagridStringFilter.prototype, "customStringFilter", null);
    __decorate([
        ViewChild('input')
    ], DatagridStringFilter.prototype, "input", void 0);
    __decorate([
        ViewChild(ClrDatagridFilter)
    ], DatagridStringFilter.prototype, "filterContainer", void 0);
    __decorate([
        Input('clrFilterValue')
    ], DatagridStringFilter.prototype, "value", null);
    __decorate([
        Output('clrFilterValueChange')
    ], DatagridStringFilter.prototype, "filterValueChange", void 0);
DatagridStringFilter.ɵfac = function DatagridStringFilter_Factory(t) { return new (t || DatagridStringFilter)(ɵngcc0.ɵɵdirectiveInject(FiltersProvider), ɵngcc0.ɵɵdirectiveInject(DomAdapter), ɵngcc0.ɵɵdirectiveInject(ClrPopoverToggleService)); };
DatagridStringFilter.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: DatagridStringFilter, selectors: [["clr-dg-string-filter"]], viewQuery: function DatagridStringFilter_Query(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵviewQuery(_c0, true);
        ɵngcc0.ɵɵviewQuery(ClrDatagridFilter, true);
    } if (rf & 2) {
        var _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.input = _t.first);
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.filterContainer = _t.first);
    } }, inputs: { customStringFilter: ["clrDgStringFilter", "customStringFilter"], value: ["clrFilterValue", "value"] }, outputs: { filterValueChange: "clrFilterValueChange" }, features: [ɵngcc0.ɵɵProvidersFeature([{ provide: CustomFilter, useExisting: DatagridStringFilter_1 }]), ɵngcc0.ɵɵInheritDefinitionFeature], decls: 3, vars: 3, consts: [[3, "clrDgFilter", "clrDgFilterOpen", "clrDgFilterOpenChange"], ["type", "text", "name", "search", 1, "clr-input", 3, "ngModel", "ngModelChange"], ["input", ""]], template: function DatagridStringFilter_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "clr-dg-filter", 0);
        ɵngcc0.ɵɵlistener("clrDgFilterOpenChange", function DatagridStringFilter_Template_clr_dg_filter_clrDgFilterOpenChange_0_listener($event) { return ctx.open = $event; });
        ɵngcc0.ɵɵelementStart(1, "input", 1, 2);
        ɵngcc0.ɵɵlistener("ngModelChange", function DatagridStringFilter_Template_input_ngModelChange_1_listener($event) { return ctx.value = $event; });
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵproperty("clrDgFilter", ctx.registered)("clrDgFilterOpen", ctx.open);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngModel", ctx.value);
    } }, directives: [ɵngcc1.ClrDatagridFilter, ɵngcc2.DefaultValueAccessor, ɵngcc2.NgControlStatus, ɵngcc2.NgModel], encapsulation: 2 });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(DatagridStringFilter, [{
        type: Component,
        args: [{
                selector: 'clr-dg-string-filter',
                providers: [{ provide: CustomFilter, useExisting: DatagridStringFilter_1 }],
                template: "\n        <clr-dg-filter [clrDgFilter]=\"registered\" [(clrDgFilterOpen)]=\"open\">\n            <input #input type=\"text\" name=\"search\" [(ngModel)]=\"value\" class=\"clr-input\" />\n        </clr-dg-filter>\n    "
            }]
    }], function () { return [{ type: FiltersProvider }, { type: DomAdapter }, { type: ClrPopoverToggleService }]; }, { customStringFilter: [{
            type: Input,
            args: ['clrDgStringFilter']
        }], value: [{
            type: Input,
            args: ['clrFilterValue']
        }], input: [{
            type: ViewChild,
            args: ['input']
        }], filterContainer: [{
            type: ViewChild,
            args: [ClrDatagridFilter]
        }], filterValueChange: [{
            type: Output,
            args: ['clrFilterValueChange']
        }] }); })();
    return DatagridStringFilter;
}(DatagridFilterRegistrar));
export { DatagridStringFilter };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,