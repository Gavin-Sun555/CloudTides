import { __decorate, __param } from "tslib";
/*
 * Copyright (c) 2016-2018 VMware, Inc. All Rights Reserved.
 * This software is released under MIT license.
 * The full license information can be found in LICENSE in the root directory of this project.
 */
import { Directive, Optional } from '@angular/core';
import { ExpandableRowsCount } from './providers/global-expandable-rows';
/*
 * I don't think this deserves to be in IfExpanded itself,
 * so I'm adding a second directive on the same selector for now just for the datagrid
 */
import * as ɵngcc0 from '@angular/core';
var DatagridDetailRegisterer = /** @class */ (function () {
    function DatagridDetailRegisterer(expandableRowsCount) {
        this.expandableRowsCount = expandableRowsCount;
        if (this.expandableRowsCount) {
            this.expandableRowsCount.register();
        }
    }
    DatagridDetailRegisterer.prototype.ngOnDestroy = function () {
        if (this.expandableRowsCount) {
            this.expandableRowsCount.unregister();
        }
    };
    DatagridDetailRegisterer.ctorParameters = function () { return [
        { type: ExpandableRowsCount, decorators: [{ type: Optional }] }
    ]; };
    DatagridDetailRegisterer = __decorate([ __param(0, Optional())
    ], DatagridDetailRegisterer);
DatagridDetailRegisterer.ɵfac = function DatagridDetailRegisterer_Factory(t) { return new (t || DatagridDetailRegisterer)(ɵngcc0.ɵɵdirectiveInject(ExpandableRowsCount, 8)); };
DatagridDetailRegisterer.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: DatagridDetailRegisterer, selectors: [["", "clrIfExpanded", ""]] });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(DatagridDetailRegisterer, [{
        type: Directive,
        args: [{ selector: '[clrIfExpanded]' }]
    }], function () { return [{ type: ExpandableRowsCount, decorators: [{
                type: Optional
            }] }]; }, null); })();
    return DatagridDetailRegisterer;
}());
export { DatagridDetailRegisterer };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGF0YWdyaWQtZGV0YWlsLXJlZ2lzdGVyZXIuanMiLCJzb3VyY2VzIjpbIm5nOi9AY2xyL2FuZ3VsYXIvZGF0YS9kYXRhZ3JpZC9kYXRhZ3JpZC1kZXRhaWwtcmVnaXN0ZXJlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0gsT0FBTyxFQUFFLFNBQVMsRUFBRSxRQUFRLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDcEQsT0FBTyxFQUFFLG1CQUFtQixFQUFFLE1BQU0sb0NBQW9DLENBQUM7QUFFekU7QUFDQTtBQUNBO0FBQ0EsR0FBRzs7QUFFSDtBQUNvQixJQUFsQixrQ0FBZ0MsbUJBQXdDO0FBQzFFLFFBRGtDLHdCQUFtQixHQUFuQixtQkFBbUIsQ0FBcUI7QUFBQyxRQUN2RSxJQUFJLElBQUksQ0FBQyxtQkFBbUIsRUFBRTtBQUNsQyxZQUFNLElBQUksQ0FBQyxtQkFBbUIsQ0FBQyxRQUFRLEVBQUUsQ0FBQztBQUMxQyxTQUFLO0FBQ0wsSUFBRSxDQUFDO0FBQ0gsSUFDRSw4Q0FBVyxHQUFYO0FBQWMsUUFDWixJQUFJLElBQUksQ0FBQyxtQkFBbUIsRUFBRTtBQUNsQyxZQUFNLElBQUksQ0FBQyxtQkFBbUIsQ0FBQyxVQUFVLEVBQUUsQ0FBQztBQUM1QyxTQUFLO0FBQ0wsSUFBRSxDQUFDO0FBQ0Y7QUFDbUUsZ0JBWmIsbUJBQW1CLHVCQUEzRCxRQUFRO0FBQU07QUFBVSxJQUQxQix3QkFBd0Isd0JBRHBDLFNBQVMsQ0FBQyxFQUFFLHJCQUNMLENBQ08sV0FBQSxRQUFRLEVBQUUsQ0FBQTtLQUZKLEVBQUUsaUJBQWlCLEVBQUUsQ0FBQywzQkFFakIsT0FEYix3QkFBd0IsQ0FZcEM7Ozs7Ozs7O2tDQUNEO0FBQUMsSUFERCwrQkFBQztBQUNBLENBREEsQUFaRCxJQVlDO0FBQ0QsU0FiYSx3QkFBd0I7QUFDcEMiLCJzb3VyY2VzQ29udGVudCI6WyIvKlxuICogQ29weXJpZ2h0IChjKSAyMDE2LTIwMTggVk13YXJlLCBJbmMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKiBUaGlzIHNvZnR3YXJlIGlzIHJlbGVhc2VkIHVuZGVyIE1JVCBsaWNlbnNlLlxuICogVGhlIGZ1bGwgbGljZW5zZSBpbmZvcm1hdGlvbiBjYW4gYmUgZm91bmQgaW4gTElDRU5TRSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBwcm9qZWN0LlxuICovXG5pbXBvcnQgeyBEaXJlY3RpdmUsIE9wdGlvbmFsIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBFeHBhbmRhYmxlUm93c0NvdW50IH0gZnJvbSAnLi9wcm92aWRlcnMvZ2xvYmFsLWV4cGFuZGFibGUtcm93cyc7XG5cbi8qXG4gKiBJIGRvbid0IHRoaW5rIHRoaXMgZGVzZXJ2ZXMgdG8gYmUgaW4gSWZFeHBhbmRlZCBpdHNlbGYsXG4gKiBzbyBJJ20gYWRkaW5nIGEgc2Vjb25kIGRpcmVjdGl2ZSBvbiB0aGUgc2FtZSBzZWxlY3RvciBmb3Igbm93IGp1c3QgZm9yIHRoZSBkYXRhZ3JpZFxuICovXG5ARGlyZWN0aXZlKHsgc2VsZWN0b3I6ICdbY2xySWZFeHBhbmRlZF0nIH0pXG5leHBvcnQgY2xhc3MgRGF0YWdyaWREZXRhaWxSZWdpc3RlcmVyIHtcbiAgY29uc3RydWN0b3IoQE9wdGlvbmFsKCkgcHJpdmF0ZSBleHBhbmRhYmxlUm93c0NvdW50OiBFeHBhbmRhYmxlUm93c0NvdW50KSB7XG4gICAgaWYgKHRoaXMuZXhwYW5kYWJsZVJvd3NDb3VudCkge1xuICAgICAgdGhpcy5leHBhbmRhYmxlUm93c0NvdW50LnJlZ2lzdGVyKCk7XG4gICAgfVxuICB9XG5cbiAgbmdPbkRlc3Ryb3koKSB7XG4gICAgaWYgKHRoaXMuZXhwYW5kYWJsZVJvd3NDb3VudCkge1xuICAgICAgdGhpcy5leHBhbmRhYmxlUm93c0NvdW50LnVucmVnaXN0ZXIoKTtcbiAgICB9XG4gIH1cbn1cbiJdfQ==