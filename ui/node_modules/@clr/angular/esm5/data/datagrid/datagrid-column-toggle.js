import { __decorate, __param } from "tslib";
/*
 * Copyright (c) 2016-2020 VMware, Inc. All Rights Reserved.
 * This software is released under MIT license.
 * The full license information can be found in LICENSE in the root directory of this project.
 */
import { Component, Inject, ContentChild, ElementRef, NgZone, PLATFORM_ID, ViewChild } from '@angular/core';
import { UNIQUE_ID, UNIQUE_ID_PROVIDER } from '../../utils/id-generator/id-generator.service';
import { ClrAxis } from '../../utils/popover/enums/axis.enum';
import { ClrAlignment } from '../../utils/popover/enums/alignment.enum';
import { ClrSide } from '../../utils/popover/enums/side.enum';
import { ClrPopoverEventsService } from '../../utils/popover/providers/popover-events.service';
import { ClrPopoverPositionService } from '../../utils/popover/providers/popover-position.service';
import { ClrPopoverToggleService } from '../../utils/popover/providers/popover-toggle.service';
import { ClrCommonStringsService } from '../../utils/i18n/common-strings.service';
import { ColumnsService } from './providers/columns.service';
import { DatagridColumnChanges } from './enums/column-changes.enum';
import { isPlatformBrowser } from '@angular/common';
import { ClrDatagridColumnToggleTitle } from './datagrid-column-toggle-title';
import { ClrDatagridColumnToggleButton } from './datagrid-column-toggle-button';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '../../utils/popover/popover-anchor';
import * as ɵngcc2 from '../../utils/popover/popover-open-close-button';
import * as ɵngcc3 from '../../icon/icon';
import * as ɵngcc4 from '../../utils/popover/popover-content';
import * as ɵngcc5 from '../../utils/focus-trap/focus-trap.directive';
import * as ɵngcc6 from '@angular/common';
import * as ɵngcc7 from '../../utils/popover/popover-close-button';
import * as ɵngcc8 from './datagrid-items-trackby';
import * as ɵngcc9 from '../../forms/checkbox/checkbox-wrapper';
import * as ɵngcc10 from '@angular/forms';
import * as ɵngcc11 from '../../forms/checkbox/checkbox';
import * as ɵngcc12 from '../../forms/common/label';
import * as ɵngcc13 from './datagrid-column-toggle-button';

var _c0 = ["menuDescription"];
var _c1 = ["allSelected"];
function ClrDatagridColumnToggle_div_2_ng_container_8_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainerStart(0);
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵelementContainerEnd();
} if (rf & 2) {
    var ctx_r3 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate(ctx_r3.commonStrings.keys.showColumns);
} }
function ClrDatagridColumnToggle_div_2_li_13_ng_template_4_Template(rf, ctx) { }
function ClrDatagridColumnToggle_div_2_li_13_Template(rf, ctx) { if (rf & 1) {
    var _r9 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "li");
    ɵngcc0.ɵɵelementStart(1, "clr-checkbox-wrapper");
    ɵngcc0.ɵɵelementStart(2, "input", 15);
    ɵngcc0.ɵɵlistener("ngModelChange", function ClrDatagridColumnToggle_div_2_li_13_Template_input_ngModelChange_2_listener($event) { ɵngcc0.ɵɵrestoreView(_r9); var columnState_r6 = ctx.$implicit; var ctx_r8 = ɵngcc0.ɵɵnextContext(2); return ctx_r8.toggleColumnState(columnState_r6, !$event); });
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(3, "label");
    ɵngcc0.ɵɵtemplate(4, ClrDatagridColumnToggle_div_2_li_13_ng_template_4_Template, 0, 0, "ng-template", 16);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    var columnState_r6 = ctx.$implicit;
    var ctx_r4 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("disabled", ctx_r4.hasOnlyOneVisibleColumn && !columnState_r6.hidden)("ngModel", !columnState_r6.hidden);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("ngTemplateOutlet", columnState_r6.titleTemplateRef);
} }
function ClrDatagridColumnToggle_div_2_clr_dg_column_toggle_button_16_Template(rf, ctx) { if (rf & 1) {
    var _r11 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "clr-dg-column-toggle-button", 17);
    ɵngcc0.ɵɵlistener("clrAllSelected", function ClrDatagridColumnToggle_div_2_clr_dg_column_toggle_button_16_Template_clr_dg_column_toggle_button_clrAllSelected_0_listener() { ɵngcc0.ɵɵrestoreView(_r11); var ctx_r10 = ɵngcc0.ɵɵnextContext(2); return ctx_r10.allColumnsSelected(); });
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    var ctx_r5 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", ctx_r5.commonStrings.keys.selectAll, " ");
} }
function ClrDatagridColumnToggle_div_2_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div", 3);
    ɵngcc0.ɵɵelementStart(1, "div", 4);
    ɵngcc0.ɵɵelementStart(2, "div", 5, 6);
    ɵngcc0.ɵɵtext(4);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(5, "div", 5, 7);
    ɵngcc0.ɵɵtext(7);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵtemplate(8, ClrDatagridColumnToggle_div_2_ng_container_8_Template, 2, 1, "ng-container", 8);
    ɵngcc0.ɵɵprojection(9);
    ɵngcc0.ɵɵelementStart(10, "button", 9);
    ɵngcc0.ɵɵelement(11, "clr-icon", 10);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(12, "ul", 11);
    ɵngcc0.ɵɵtemplate(13, ClrDatagridColumnToggle_div_2_li_13_Template, 5, 3, "li", 12);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(14, "div", 13);
    ɵngcc0.ɵɵprojection(15, 1);
    ɵngcc0.ɵɵtemplate(16, ClrDatagridColumnToggle_div_2_clr_dg_column_toggle_button_16_Template, 2, 1, "clr-dg-column-toggle-button", 14);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    var ctx_r0 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("id", ctx_r0.popoverId);
    ɵngcc0.ɵɵadvance(4);
    ɵngcc0.ɵɵtextInterpolate(ctx_r0.commonStrings.keys.showColumnsMenuDescription);
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵtextInterpolate(ctx_r0.commonStrings.keys.allColumnsSelected);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", !ctx_r0.customToggleTitle);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵattribute("aria-label", ctx_r0.commonStrings.keys.close);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵattribute("title", ctx_r0.commonStrings.keys.close);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("ngForOf", ctx_r0.hideableColumnStates)("ngForTrackBy", ctx_r0.trackByFn);
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵproperty("ngIf", !ctx_r0.customToggleButton);
} }
var _c2 = [[["clr-dg-column-toggle-title"]], [["clr-dg-column-toggle-button"]]];
var _c3 = ["clr-dg-column-toggle-title", "clr-dg-column-toggle-button"];
var ClrDatagridColumnToggle = /** @class */ (function () {
    function ClrDatagridColumnToggle(commonStrings, columnsService, columnSwitchId, platformId, zone, popoverId) {
        this.commonStrings = commonStrings;
        this.columnsService = columnsService;
        this.columnSwitchId = columnSwitchId;
        this.platformId = platformId;
        this.zone = zone;
        this.popoverId = popoverId;
        // Smart Popover
        this.smartPosition = {
            axis: ClrAxis.VERTICAL,
            side: ClrSide.BEFORE,
            anchor: ClrAlignment.START,
            content: ClrAlignment.START,
        };
    }
    Object.defineProperty(ClrDatagridColumnToggle.prototype, "allColumnsVisible", {
        get: function () {
            return this._allColumnsVisible;
        },
        set: function (value) {
            this._allColumnsVisible = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ClrDatagridColumnToggle.prototype, "hideableColumnStates", {
        get: function () {
            var hideables = this.columnsService.columns.filter(function (column) { return column.value.hideable; });
            return hideables.map(function (column) { return column.value; });
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ClrDatagridColumnToggle.prototype, "hasOnlyOneVisibleColumn", {
        get: function () {
            var nbNonHideableColumns = this.columnsService.columns.length - this.hideableColumnStates.length;
            // this should only return true when there is no non-hideable columns.
            return (nbNonHideableColumns === 0 && this.hideableColumnStates.filter(function (columnState) { return !columnState.hidden; }).length === 1);
        },
        enumerable: true,
        configurable: true
    });
    ClrDatagridColumnToggle.prototype.toggleColumnState = function (columnState, event) {
        var columnToToggle = this.columnsService.columns.filter(function (column) { return column.value === columnState; })[0];
        this.columnsService.emitStateChange(columnToToggle, {
            hidden: event,
            changes: [DatagridColumnChanges.HIDDEN],
        });
    };
    ClrDatagridColumnToggle.prototype.toggleSwitchPanel = function () {
        var _this = this;
        this.openState = !this.openState;
        if (this.openState && isPlatformBrowser(this.platformId) && this.menuDescriptionElement) {
            this.zone.runOutsideAngular(function () {
                setTimeout(function () {
                    _this.menuDescriptionElement.nativeElement.focus();
                });
            });
        }
    };
    ClrDatagridColumnToggle.prototype.allColumnsSelected = function () {
        this.allSelectedElement.nativeElement.focus();
    };
    // Without tracking the checkboxes get rerendered on model update, which leads
    // to loss of focus after checkbox toggle.
    ClrDatagridColumnToggle.prototype.trackByFn = function (index) {
        return index;
    };
    ClrDatagridColumnToggle.ctorParameters = function () { return [
        { type: ClrCommonStringsService },
        { type: ColumnsService },
        { type: String, decorators: [{ type: Inject, args: [UNIQUE_ID,] }] },
        { type: Object, decorators: [{ type: Inject, args: [PLATFORM_ID,] }] },
        { type: NgZone },
        { type: String, decorators: [{ type: Inject, args: [UNIQUE_ID,] }] }
    ]; };
    __decorate([
        ContentChild(ClrDatagridColumnToggleTitle)
    ], ClrDatagridColumnToggle.prototype, "customToggleTitle", void 0);
    __decorate([
        ContentChild(ClrDatagridColumnToggleButton)
    ], ClrDatagridColumnToggle.prototype, "customToggleButton", void 0);
    __decorate([
        ViewChild('menuDescription', { read: ElementRef })
    ], ClrDatagridColumnToggle.prototype, "menuDescriptionElement", void 0);
    __decorate([
        ViewChild('allSelected', { read: ElementRef })
    ], ClrDatagridColumnToggle.prototype, "allSelectedElement", void 0);
    ClrDatagridColumnToggle = __decorate([ __param(2, Inject(UNIQUE_ID)),
        __param(3, Inject(PLATFORM_ID)),
        __param(5, Inject(UNIQUE_ID))
    ], ClrDatagridColumnToggle);
ClrDatagridColumnToggle.ɵfac = function ClrDatagridColumnToggle_Factory(t) { return new (t || ClrDatagridColumnToggle)(ɵngcc0.ɵɵdirectiveInject(ClrCommonStringsService), ɵngcc0.ɵɵdirectiveInject(ColumnsService), ɵngcc0.ɵɵdirectiveInject(UNIQUE_ID), ɵngcc0.ɵɵdirectiveInject(PLATFORM_ID), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(UNIQUE_ID)); };
ClrDatagridColumnToggle.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: ClrDatagridColumnToggle, selectors: [["clr-dg-column-toggle"]], contentQueries: function ClrDatagridColumnToggle_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {
        ɵngcc0.ɵɵcontentQuery(dirIndex, ClrDatagridColumnToggleTitle, true);
        ɵngcc0.ɵɵcontentQuery(dirIndex, ClrDatagridColumnToggleButton, true);
    } if (rf & 2) {
        var _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.customToggleTitle = _t.first);
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.customToggleButton = _t.first);
    } }, viewQuery: function ClrDatagridColumnToggle_Query(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵviewQuery(_c0, true, ElementRef);
        ɵngcc0.ɵɵviewQuery(_c1, true, ElementRef);
    } if (rf & 2) {
        var _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.menuDescriptionElement = _t.first);
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.allSelectedElement = _t.first);
    } }, hostVars: 4, hostBindings: function ClrDatagridColumnToggle_HostBindings(rf, ctx) { if (rf & 2) {
        ɵngcc0.ɵɵclassProp("column-switch-wrapper", true)("active", ctx.openState);
    } }, features: [ɵngcc0.ɵɵProvidersFeature([UNIQUE_ID_PROVIDER, ClrPopoverEventsService, ClrPopoverPositionService, ClrPopoverToggleService])], ngContentSelectors: _c3, decls: 3, vars: 7, consts: [["role", "button", "type", "button", "clrPopoverAnchor", "", "clrPopoverOpenCloseButton", "", 1, "btn", "btn-sm", "btn-link", "column-toggle--action"], ["shape", "view-columns"], ["class", "column-switch", "role", "dialog", "clrFocusTrap", "", 3, "id", 4, "clrPopoverContent", "clrPopoverContentAt", "clrPopoverContentOutsideClickToClose", "clrPopoverContentScrollToClose"], ["role", "dialog", "clrFocusTrap", "", 1, "column-switch", 3, "id"], [1, "switch-header"], ["tabindex", "-1", 1, "clr-sr-only"], ["menuDescription", ""], ["allSelected", ""], [4, "ngIf"], ["clrPopoverCloseButton", "", "type", "button", 1, "btn", "btn-sm", "btn-link", "toggle-switch-close-button"], ["shape", "close"], [1, "switch-content", "list-unstyled"], [4, "ngFor", "ngForOf", "ngForTrackBy"], [1, "switch-footer"], [3, "clrAllSelected", 4, "ngIf"], ["clrCheckbox", "", "type", "checkbox", 3, "disabled", "ngModel", "ngModelChange"], [3, "ngTemplateOutlet"], [3, "clrAllSelected"]], template: function ClrDatagridColumnToggle_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef(_c2);
        ɵngcc0.ɵɵelementStart(0, "button", 0);
        ɵngcc0.ɵɵelement(1, "clr-icon", 1);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵtemplate(2, ClrDatagridColumnToggle_div_2_Template, 17, 9, "div", 2);
    } if (rf & 2) {
        ɵngcc0.ɵɵattribute("aria-controls", ctx.popoverId)("aria-owns", ctx.popoverId);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵattribute("title", ctx.commonStrings.keys.pickColumns);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("clrPopoverContent", ctx.openState)("clrPopoverContentAt", ctx.smartPosition)("clrPopoverContentOutsideClickToClose", true)("clrPopoverContentScrollToClose", true);
    } }, directives: [ɵngcc1.ClrPopoverAnchor, ɵngcc2.ClrPopoverOpenCloseButton, ɵngcc3.ClrIconCustomTag, ɵngcc4.ClrPopoverContent, ɵngcc5.FocusTrapDirective, ɵngcc6.NgIf, ɵngcc7.ClrPopoverCloseButton, ɵngcc6.NgForOf, ɵngcc8.ClrDatagridItemsTrackBy, ɵngcc9.ClrCheckboxWrapper, ɵngcc10.CheckboxControlValueAccessor, ɵngcc11.ClrCheckbox, ɵngcc10.NgControlStatus, ɵngcc10.NgModel, ɵngcc12.ClrLabel, ɵngcc6.NgTemplateOutlet, ɵngcc13.ClrDatagridColumnToggleButton], encapsulation: 2 });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ClrDatagridColumnToggle, [{
        type: Component,
        args: [{
                selector: 'clr-dg-column-toggle',
                template: "    \n      <button\n              role=\"button\"\n              type=\"button\"\n              class=\"btn btn-sm btn-link column-toggle--action\"\n              clrPopoverAnchor\n              clrPopoverOpenCloseButton\n              [attr.aria-controls]=\"popoverId\"\n              [attr.aria-owns]=\"popoverId\">\n          <clr-icon shape=\"view-columns\" [attr.title]=\"commonStrings.keys.pickColumns\"></clr-icon>\n      </button>\n      <div class=\"column-switch\"\n           role=\"dialog\"\n           [id]=\"popoverId\"\n           clrFocusTrap\n           *clrPopoverContent=\"openState at smartPosition; outsideClickToClose: true; scrollToClose: true\">\n          <div class=\"switch-header\">\n              <div class=\"clr-sr-only\" tabindex=\"-1\" #menuDescription>{{commonStrings.keys.showColumnsMenuDescription}}</div>\n              <div class=\"clr-sr-only\" tabindex=\"-1\" #allSelected>{{commonStrings.keys.allColumnsSelected}}</div>\n              <ng-container *ngIf=\"!customToggleTitle\">{{commonStrings.keys.showColumns}}</ng-container>\n              <ng-content select=\"clr-dg-column-toggle-title\"></ng-content>\n              <button class=\"btn btn-sm btn-link toggle-switch-close-button\"\n                      clrPopoverCloseButton\n                      type=\"button\"\n                      [attr.aria-label]=\"commonStrings.keys.close\">\n                  <clr-icon shape=\"close\" \n                            [attr.title]=\"commonStrings.keys.close\"></clr-icon>\n              </button>\n          </div>\n          <ul class=\"switch-content list-unstyled\">\n              <li *ngFor=\"let columnState of hideableColumnStates;trackBy: trackByFn\">\n                  <clr-checkbox-wrapper>\n                      <input clrCheckbox type=\"checkbox\"\n                             [disabled]=\"hasOnlyOneVisibleColumn && !columnState.hidden\"\n                             [ngModel]=\"!columnState.hidden\"\n                             (ngModelChange)=\"toggleColumnState(columnState, !$event)\">\n                      <label>\n                          <ng-template [ngTemplateOutlet]=\"columnState.titleTemplateRef\"></ng-template>\n                      </label>\n                  </clr-checkbox-wrapper>\n              </li>\n          </ul>\n          <div class=\"switch-footer\">\n              <ng-content select=\"clr-dg-column-toggle-button\"></ng-content>\n              <clr-dg-column-toggle-button *ngIf=\"!customToggleButton\" (clrAllSelected)=\"allColumnsSelected()\">\n                  {{commonStrings.keys.selectAll}}\n              </clr-dg-column-toggle-button>\n          </div>\n      </div>\n  ",
                host: { '[class.column-switch-wrapper]': 'true', '[class.active]': 'openState' },
                providers: [UNIQUE_ID_PROVIDER, ClrPopoverEventsService, ClrPopoverPositionService, ClrPopoverToggleService]
            }]
    }], function () { return [{ type: ClrCommonStringsService }, { type: ColumnsService }, { type: String, decorators: [{
                type: Inject,
                args: [UNIQUE_ID]
            }] }, { type: Object, decorators: [{
                type: Inject,
                args: [PLATFORM_ID]
            }] }, { type: ɵngcc0.NgZone }, { type: String, decorators: [{
                type: Inject,
                args: [UNIQUE_ID]
            }] }]; }, { customToggleTitle: [{
            type: ContentChild,
            args: [ClrDatagridColumnToggleTitle]
        }], customToggleButton: [{
            type: ContentChild,
            args: [ClrDatagridColumnToggleButton]
        }], menuDescriptionElement: [{
            type: ViewChild,
            args: ['menuDescription', { read: ElementRef }]
        }], allSelectedElement: [{
            type: ViewChild,
            args: ['allSelected', { read: ElementRef }]
        }] }); })();
    return ClrDatagridColumnToggle;
}());
export { ClrDatagridColumnToggle };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,