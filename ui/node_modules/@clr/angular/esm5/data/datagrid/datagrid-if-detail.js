/*
 * Copyright (c) 2016-2019 VMware, Inc. All Rights Reserved.
 * This software is released under MIT license.
 * The full license information can be found in LICENSE in the root directory of this project.
 */
import { __decorate } from "tslib";
import { Directive, EventEmitter, Input, OnDestroy, OnInit, Output, TemplateRef, ViewContainerRef, } from '@angular/core';
import { DetailService } from './providers/detail.service';
import * as ɵngcc0 from '@angular/core';
var ClrIfDetail = /** @class */ (function () {
    function ClrIfDetail(templateRef, viewContainer, detailService) {
        this.templateRef = templateRef;
        this.viewContainer = viewContainer;
        this.detailService = detailService;
        this.subscriptions = [];
        this.skip = false; // This keeps us from resetting the input and calling the toggle twice
        this.stateChange = new EventEmitter(null);
        this.detailService.enabled = true;
    }
    Object.defineProperty(ClrIfDetail.prototype, "state", {
        set: function (model) {
            if (!this.skip) {
                this.detailService.toggle(model);
            }
            this.skip = false;
        },
        enumerable: true,
        configurable: true
    });
    ClrIfDetail.prototype.ngOnInit = function () {
        var _this = this;
        this.subscriptions.push(this.detailService.stateChange.subscribe(function (state) {
            if (state === true) {
                _this.togglePanel(true);
            }
            else {
                _this.togglePanel(false);
            }
        }));
    };
    ClrIfDetail.prototype.togglePanel = function (showPanel) {
        var stateChangeParams = null;
        this.viewContainer.clear();
        if (showPanel === true) {
            this.viewContainer.createEmbeddedView(this.templateRef, { $implicit: this.detailService.state });
            this.skip = true;
            stateChangeParams = this.detailService.state;
        }
        this.stateChange.emit(stateChangeParams);
    };
    ClrIfDetail.prototype.ngOnDestroy = function () {
        this.subscriptions.forEach(function (sub) { return sub.unsubscribe(); });
    };
    ClrIfDetail.ctorParameters = function () { return [
        { type: TemplateRef },
        { type: ViewContainerRef },
        { type: DetailService }
    ]; };
    __decorate([
        Input('clrIfDetail')
    ], ClrIfDetail.prototype, "state", null);
    __decorate([
        Output('clrIfDetailChange')
    ], ClrIfDetail.prototype, "stateChange", void 0);
ClrIfDetail.ɵfac = function ClrIfDetail_Factory(t) { return new (t || ClrIfDetail)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.TemplateRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef), ɵngcc0.ɵɵdirectiveInject(DetailService)); };
ClrIfDetail.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: ClrIfDetail, selectors: [["", "clrIfDetail", ""]], inputs: { state: ["clrIfDetail", "state"] }, outputs: { stateChange: "clrIfDetailChange" } });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ClrIfDetail, [{
        type: Directive,
        args: [{
                selector: '[clrIfDetail]'
            }]
    }], function () { return [{ type: ɵngcc0.TemplateRef }, { type: ɵngcc0.ViewContainerRef }, { type: DetailService }]; }, { stateChange: [{
            type: Output,
            args: ['clrIfDetailChange']
        }], state: [{
            type: Input,
            args: ['clrIfDetail']
        }] }); })();
    return ClrIfDetail;
}());
export { ClrIfDetail };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGF0YWdyaWQtaWYtZGV0YWlsLmpzIiwic291cmNlcyI6WyJuZzovQGNsci9hbmd1bGFyL2RhdGEvZGF0YWdyaWQvZGF0YWdyaWQtaWYtZGV0YWlsLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0EsT0FBTyxFQUNMLFNBQVMsRUFDVCxZQUFZLEVBQ1osS0FBSyxFQUNMLFNBQVMsRUFDVCxNQUFNLEVBQ04sTUFBTSxFQUNOLFdBQVcsRUFDWCxnQkFBZ0IsR0FDakIsTUFBTSxlQUFlLENBQUM7QUFFdkIsT0FBTyxFQUFFLGFBQWEsRUFBRSxNQUFNLDRCQUE0QixDQUFDOztBQUszRDtBQUErQyxJQWM3QyxxQkFDVSxXQUE2QixFQUM3QixhQUErQixFQUMvQixhQUE0QjtBQUNyQyxRQUhTLGdCQUFXLEdBQVgsV0FBVyxDQUFrQjtBQUFDLFFBQzlCLGtCQUFhLEdBQWIsYUFBYSxDQUFrQjtBQUFDLFFBQ2hDLGtCQUFhLEdBQWIsYUFBYSxDQUFlO0FBQ3hDLFFBakJVLGtCQUFhLEdBQW1CLEVBQUUsQ0FBQztBQUM3QyxRQUFVLFNBQUksR0FBRyxLQUFLLENBQUMsQ0FBQyxzRUFBc0U7QUFDOUYsUUFTc0MsZ0JBQVcsR0FBRyxJQUFJLFlBQVksQ0FBTSxJQUFJLENBQUMsQ0FBQztBQUNoRixRQU1JLElBQUksQ0FBQyxhQUFhLENBQUMsT0FBTyxHQUFHLElBQUksQ0FBQztBQUN0QyxJQUFFLENBQUM7QUFDSCxJQWhCRSxzQkFBSSw4QkFBSztBQUFJLGFBQWIsVUFBVSxLQUFLO0FBQ2pCLFlBQUksSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLEVBQUU7QUFDcEIsZ0JBQU0sSUFBSSxDQUFDLGFBQWEsQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUM7QUFDdkMsYUFBSztBQUNMLFlBQUksSUFBSSxDQUFDLElBQUksR0FBRyxLQUFLLENBQUM7QUFDdEIsUUFBRSxDQUFDO0FBRUg7QUFBMEI7QUFBMkIsT0FGbEQ7QUFDSCxJQVdFLDhCQUFRLEdBQVI7QUFDRCxRQURDLGlCQVVDO0FBQ0gsUUFWSSxJQUFJLENBQUMsYUFBYSxDQUFDLElBQUksQ0FDckIsSUFBSSxDQUFDLGFBQWEsQ0FBQyxXQUFXLENBQUMsU0FBUyxDQUFDLFVBQUEsS0FBSztBQUFJLFlBQ2hELElBQUksS0FBSyxLQUFLLElBQUksRUFBRTtBQUM1QixnQkFBVSxLQUFJLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxDQUFDO0FBQ2pDLGFBQVM7QUFBQyxpQkFBSztBQUNmLGdCQUFVLEtBQUksQ0FBQyxXQUFXLENBQUMsS0FBSyxDQUFDLENBQUM7QUFDbEMsYUFBUztBQUNULFFBQU0sQ0FBQyxDQUFDLENBQ0gsQ0FBQztBQUNOLElBQUUsQ0FBQztBQUVILElBQVUsaUNBQVcsR0FBbkIsVUFBb0IsU0FBa0I7QUFDeEMsUUFBSSxJQUFJLGlCQUFpQixHQUFHLElBQUksQ0FBQztBQUNqQyxRQUFJLElBQUksQ0FBQyxhQUFhLENBQUMsS0FBSyxFQUFFLENBQUM7QUFDL0IsUUFBSSxJQUFJLFNBQVMsS0FBSyxJQUFJLEVBQUU7QUFDNUIsWUFBTSxJQUFJLENBQUMsYUFBYSxDQUFDLGtCQUFrQixDQUFDLElBQUksQ0FBQyxXQUFXLEVBQUUsRUFBRSxTQUFTLEVBQUUsSUFBSSxDQUFDLGFBQWEsQ0FBQyxLQUFLLEVBQUUsQ0FBQyxDQUFDO0FBQ3ZHLFlBQU0sSUFBSSxDQUFDLElBQUksR0FBRyxJQUFJLENBQUM7QUFDdkIsWUFBTSxpQkFBaUIsR0FBRyxJQUFJLENBQUMsYUFBYSxDQUFDLEtBQUssQ0FBQztBQUNuRCxTQUFLO0FBQ0wsUUFDSSxJQUFJLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDO0FBQzdDLElBQUUsQ0FBQztBQUVILElBQUUsaUNBQVcsR0FBWDtBQUFjLFFBQ1osSUFBSSxDQUFDLGFBQWEsQ0FBQyxPQUFPLENBQUMsVUFBQSxHQUFHLElBQUksT0FBQSxHQUFHLENBQUMsV0FBVyxFQUFFLEVBQWpCLENBQWlCLENBQUMsQ0FBQztBQUN6RCxJQUFFLENBQUM7QUFDRjtBQUNzRCxnQkFuQzlCLFdBQVc7QUFBSSxnQkFDYixnQkFBZ0I7QUFDekMsZ0JBQXlCLGFBQWE7QUFDdEM7QUFDSSxJQWRKO0FBQWEsUUFEWixLQUFLLENBQUMsYUFBYSxDQUFDO0FBQ3ZCLDRDQUtHO0FBRUgsSUFBK0I7QUFBYSxRQUF6QyxNQUFNLENBQUMsbUJBQW1CLENBQUM7QUFBQyxvREFBaUQ7SUFabkUsV0FBVyx3QkFIdkIsU0FBUyxDQUFDLGNBQ1QsUUFBUSxFQUFFLGVBQWUsV0FDMUIsQ0FBQyxRQUNXLFdBQVcsQ0FpRHZCOzs7Ozs7Ozs7Ozs7O29CQUNEO0FBQUMsSUFERCxrQkFBQztBQUNBLENBREEsQUFqREQsSUFpREM7QUFDRCxTQWxEYSxXQUFXO0FBQUkiLCJzb3VyY2VzQ29udGVudCI6WyIvKlxuICogQ29weXJpZ2h0IChjKSAyMDE2LTIwMTkgVk13YXJlLCBJbmMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKiBUaGlzIHNvZnR3YXJlIGlzIHJlbGVhc2VkIHVuZGVyIE1JVCBsaWNlbnNlLlxuICogVGhlIGZ1bGwgbGljZW5zZSBpbmZvcm1hdGlvbiBjYW4gYmUgZm91bmQgaW4gTElDRU5TRSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBwcm9qZWN0LlxuICovXG5cbmltcG9ydCB7XG4gIERpcmVjdGl2ZSxcbiAgRXZlbnRFbWl0dGVyLFxuICBJbnB1dCxcbiAgT25EZXN0cm95LFxuICBPbkluaXQsXG4gIE91dHB1dCxcbiAgVGVtcGxhdGVSZWYsXG4gIFZpZXdDb250YWluZXJSZWYsXG59IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgU3Vic2NyaXB0aW9uIH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyBEZXRhaWxTZXJ2aWNlIH0gZnJvbSAnLi9wcm92aWRlcnMvZGV0YWlsLnNlcnZpY2UnO1xuXG5ARGlyZWN0aXZlKHtcbiAgc2VsZWN0b3I6ICdbY2xySWZEZXRhaWxdJyxcbn0pXG5leHBvcnQgY2xhc3MgQ2xySWZEZXRhaWwgaW1wbGVtZW50cyBPbkluaXQsIE9uRGVzdHJveSB7XG4gIHByaXZhdGUgc3Vic2NyaXB0aW9uczogU3Vic2NyaXB0aW9uW10gPSBbXTtcbiAgcHJpdmF0ZSBza2lwID0gZmFsc2U7IC8vIFRoaXMga2VlcHMgdXMgZnJvbSByZXNldHRpbmcgdGhlIGlucHV0IGFuZCBjYWxsaW5nIHRoZSB0b2dnbGUgdHdpY2VcblxuICBASW5wdXQoJ2NscklmRGV0YWlsJylcbiAgc2V0IHN0YXRlKG1vZGVsKSB7XG4gICAgaWYgKCF0aGlzLnNraXApIHtcbiAgICAgIHRoaXMuZGV0YWlsU2VydmljZS50b2dnbGUobW9kZWwpO1xuICAgIH1cbiAgICB0aGlzLnNraXAgPSBmYWxzZTtcbiAgfVxuXG4gIEBPdXRwdXQoJ2NscklmRGV0YWlsQ2hhbmdlJykgcHVibGljIHN0YXRlQ2hhbmdlID0gbmV3IEV2ZW50RW1pdHRlcjxhbnk+KG51bGwpO1xuXG4gIGNvbnN0cnVjdG9yKFxuICAgIHByaXZhdGUgdGVtcGxhdGVSZWY6IFRlbXBsYXRlUmVmPGFueT4sXG4gICAgcHJpdmF0ZSB2aWV3Q29udGFpbmVyOiBWaWV3Q29udGFpbmVyUmVmLFxuICAgIHByaXZhdGUgZGV0YWlsU2VydmljZTogRGV0YWlsU2VydmljZVxuICApIHtcbiAgICB0aGlzLmRldGFpbFNlcnZpY2UuZW5hYmxlZCA9IHRydWU7XG4gIH1cblxuICBuZ09uSW5pdCgpIHtcbiAgICB0aGlzLnN1YnNjcmlwdGlvbnMucHVzaChcbiAgICAgIHRoaXMuZGV0YWlsU2VydmljZS5zdGF0ZUNoYW5nZS5zdWJzY3JpYmUoc3RhdGUgPT4ge1xuICAgICAgICBpZiAoc3RhdGUgPT09IHRydWUpIHtcbiAgICAgICAgICB0aGlzLnRvZ2dsZVBhbmVsKHRydWUpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRoaXMudG9nZ2xlUGFuZWwoZmFsc2UpO1xuICAgICAgICB9XG4gICAgICB9KVxuICAgICk7XG4gIH1cblxuICBwcml2YXRlIHRvZ2dsZVBhbmVsKHNob3dQYW5lbDogYm9vbGVhbikge1xuICAgIGxldCBzdGF0ZUNoYW5nZVBhcmFtcyA9IG51bGw7XG4gICAgdGhpcy52aWV3Q29udGFpbmVyLmNsZWFyKCk7XG4gICAgaWYgKHNob3dQYW5lbCA9PT0gdHJ1ZSkge1xuICAgICAgdGhpcy52aWV3Q29udGFpbmVyLmNyZWF0ZUVtYmVkZGVkVmlldyh0aGlzLnRlbXBsYXRlUmVmLCB7ICRpbXBsaWNpdDogdGhpcy5kZXRhaWxTZXJ2aWNlLnN0YXRlIH0pO1xuICAgICAgdGhpcy5za2lwID0gdHJ1ZTtcbiAgICAgIHN0YXRlQ2hhbmdlUGFyYW1zID0gdGhpcy5kZXRhaWxTZXJ2aWNlLnN0YXRlO1xuICAgIH1cblxuICAgIHRoaXMuc3RhdGVDaGFuZ2UuZW1pdChzdGF0ZUNoYW5nZVBhcmFtcyk7XG4gIH1cblxuICBuZ09uRGVzdHJveSgpIHtcbiAgICB0aGlzLnN1YnNjcmlwdGlvbnMuZm9yRWFjaChzdWIgPT4gc3ViLnVuc3Vic2NyaWJlKCkpO1xuICB9XG59XG4iXX0=