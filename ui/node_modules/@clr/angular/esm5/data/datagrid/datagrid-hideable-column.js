import { __decorate, __param } from "tslib";
/*
 * Copyright (c) 2016-2019 VMware, Inc. All Rights Reserved.
 * This software is released under MIT license.
 * The full license information can be found in LICENSE in the root directory of this project.
 */
import { Directive, EventEmitter, Inject, Input, OnDestroy, Optional, Output, TemplateRef, ViewContainerRef, } from '@angular/core';
import { BehaviorSubject, Subscription } from 'rxjs';
import { ColumnsService } from './providers/columns.service';
import { DatagridColumnChanges } from './enums/column-changes.enum';
import { COLUMN_STATE } from './providers/column-state.provider';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from 'rxjs';
var ClrDatagridHideableColumn = /** @class */ (function () {
    function ClrDatagridHideableColumn(titleTemplateRef, viewContainerRef, columnsService, columnState) {
        this.titleTemplateRef = titleTemplateRef;
        this.viewContainerRef = viewContainerRef;
        this.columnsService = columnsService;
        this.columnState = columnState;
        this.hiddenChange = new EventEmitter();
        this.subscriptions = [];
        this.viewContainerRef.createEmbeddedView(this.titleTemplateRef);
        if (!this.columnState) {
            throw new Error('The *clrDgHideableColumn directive can only be used inside of a clr-dg-column component.');
        }
    }
    Object.defineProperty(ClrDatagridHideableColumn.prototype, "clrDgHideableColumn", {
        /**
         *
         * @description
         * Setter fn for the @Input with the same name as this structural directive.
         * It allows the user to pre-configure the column's hide/show state. { hidden: true }
         * It's more verbose but has more Clarity.
         *
         *
         * @example
         * *clrDgHideableColumn
         * *clrDgHideableColumn={hidden: false}
         * *clrDgHideableColumn={hidden: true}
         *
         */
        set: function (value) {
            this.clrDgHidden = value && value.hidden ? value.hidden : false;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ClrDatagridHideableColumn.prototype, "clrDgHidden", {
        set: function (hidden) {
            this._hidden = hidden ? hidden : false;
            this.columnsService.emitStateChange(this.columnState, {
                hidden: this._hidden,
                changes: [DatagridColumnChanges.HIDDEN],
            });
        },
        enumerable: true,
        configurable: true
    });
    ClrDatagridHideableColumn.prototype.ngOnInit = function () {
        var _this = this;
        this.columnsService.emitStateChange(this.columnState, {
            hideable: true,
            titleTemplateRef: this.titleTemplateRef,
            hidden: this._hidden,
            changes: [DatagridColumnChanges.HIDDEN],
        });
        this.subscriptions.push(this.columnState.subscribe(function (state) {
            if (state.changes && state.changes.indexOf(DatagridColumnChanges.HIDDEN) > -1) {
                _this.hiddenChange.emit(state.hidden); // Can emit through @Output when desugared syntax is used
            }
        }));
    };
    ClrDatagridHideableColumn.prototype.ngOnDestroy = function () {
        this.subscriptions.forEach(function (sub) { return sub.unsubscribe(); });
    };
    ClrDatagridHideableColumn.ctorParameters = function () { return [
        { type: TemplateRef },
        { type: ViewContainerRef },
        { type: ColumnsService },
        { type: BehaviorSubject, decorators: [{ type: Optional }, { type: Inject, args: [COLUMN_STATE,] }] }
    ]; };
    __decorate([
        Input('clrDgHideableColumn')
    ], ClrDatagridHideableColumn.prototype, "clrDgHideableColumn", null);
    __decorate([
        Input('clrDgHidden')
    ], ClrDatagridHideableColumn.prototype, "clrDgHidden", null);
    __decorate([
        Output('clrDgHiddenChange')
    ], ClrDatagridHideableColumn.prototype, "hiddenChange", void 0);
    ClrDatagridHideableColumn = __decorate([ __param(3, Optional()),
        __param(3, Inject(COLUMN_STATE))
    ], ClrDatagridHideableColumn);
ClrDatagridHideableColumn.ɵfac = function ClrDatagridHideableColumn_Factory(t) { return new (t || ClrDatagridHideableColumn)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.TemplateRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef), ɵngcc0.ɵɵdirectiveInject(ColumnsService), ɵngcc0.ɵɵdirectiveInject(COLUMN_STATE, 8)); };
ClrDatagridHideableColumn.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: ClrDatagridHideableColumn, selectors: [["", "clrDgHideableColumn", ""]], inputs: { clrDgHideableColumn: "clrDgHideableColumn", clrDgHidden: "clrDgHidden" }, outputs: { hiddenChange: "clrDgHiddenChange" } });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ClrDatagridHideableColumn, [{
        type: Directive,
        args: [{ selector: '[clrDgHideableColumn]' }]
    }], function () { return [{ type: ɵngcc0.TemplateRef }, { type: ɵngcc0.ViewContainerRef }, { type: ColumnsService }, { type: ɵngcc1.BehaviorSubject, decorators: [{
                type: Optional
            }, {
                type: Inject,
                args: [COLUMN_STATE]
            }] }]; }, { hiddenChange: [{
            type: Output,
            args: ['clrDgHiddenChange']
        }], clrDgHideableColumn: [{
            type: Input,
            args: ['clrDgHideableColumn']
        }], clrDgHidden: [{
            type: Input,
            args: ['clrDgHidden']
        }] }); })();
    return ClrDatagridHideableColumn;
}());
export { ClrDatagridHideableColumn };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,