import { __decorate, __extends, __param } from "tslib";
/*
 * Copyright (c) 2016-2018 VMware, Inc. All Rights Reserved.
 * This software is released under MIT license.
 * The full license information can be found in LICENSE in the root directory of this project.
 */
import { ChangeDetectorRef, Directive, Optional } from '@angular/core';
import { OompaLoompa } from '../../../utils/chocolate/oompa-loompa';
import { RowActionService } from '../providers/row-action-service';
import { DatagridWillyWonka } from './datagrid-willy-wonka';
import * as ɵngcc0 from '@angular/core';
var ActionableOompaLoompa = /** @class */ (function (_super) {
    __extends(ActionableOompaLoompa, _super);
    function ActionableOompaLoompa(cdr, willyWonka, rowActions) {
        var _this = this;
        if (!willyWonka) {
            throw new Error('clr-dg-row should only be used inside of a clr-datagrid');
        }
        _this = _super.call(this, cdr, willyWonka) || this;
        _this.rowActions = rowActions;
        return _this;
    }
    Object.defineProperty(ActionableOompaLoompa.prototype, "flavor", {
        get: function () {
            return this.rowActions.hasActionableRow;
        },
        enumerable: true,
        configurable: true
    });
    ActionableOompaLoompa.ctorParameters = function () { return [
        { type: ChangeDetectorRef },
        { type: DatagridWillyWonka, decorators: [{ type: Optional }] },
        { type: RowActionService }
    ]; };
    ActionableOompaLoompa = __decorate([ __param(1, Optional())
    ], ActionableOompaLoompa);
ActionableOompaLoompa.ɵfac = function ActionableOompaLoompa_Factory(t) { return new (t || ActionableOompaLoompa)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(DatagridWillyWonka, 8), ɵngcc0.ɵɵdirectiveInject(RowActionService)); };
ActionableOompaLoompa.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: ActionableOompaLoompa, selectors: [["clr-datagrid"], ["clr-dg-row"]], features: [ɵngcc0.ɵɵInheritDefinitionFeature] });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ActionableOompaLoompa, [{
        type: Directive,
        args: [{ selector: 'clr-datagrid, clr-dg-row' }]
    }], function () { return [{ type: ɵngcc0.ChangeDetectorRef }, { type: DatagridWillyWonka, decorators: [{
                type: Optional
            }] }, { type: RowActionService }]; }, null); })();
    return ActionableOompaLoompa;
}(OompaLoompa));
export { ActionableOompaLoompa };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWN0aW9uYWJsZS1vb21wYS1sb29tcGEuanMiLCJzb3VyY2VzIjpbIm5nOi9AY2xyL2FuZ3VsYXIvZGF0YS9kYXRhZ3JpZC9jaG9jb2xhdGUvYWN0aW9uYWJsZS1vb21wYS1sb29tcGEudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNILE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxTQUFTLEVBQUUsUUFBUSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ3ZFLE9BQU8sRUFBRSxXQUFXLEVBQUUsTUFBTSx1Q0FBdUMsQ0FBQztBQUNwRSxPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSxpQ0FBaUMsQ0FBQztBQUNuRSxPQUFPLEVBQUUsa0JBQWtCLEVBQUUsTUFBTSx3QkFBd0IsQ0FBQzs7QUFHNUQ7QUFDTSxJQURxQyx5Q0FBVztBQUFDLElBR3JELCtCQUFZLEdBQXNCLEVBQWMsVUFBOEIsRUFBRSxVQUE0QjtBQUM5RyxRQURFLGlCQU1DO0FBQ0gsUUFOSSxJQUFJLENBQUMsVUFBVSxFQUFFO0FBQ3JCLFlBQU0sTUFBTSxJQUFJLEtBQUssQ0FBQyx5REFBeUQsQ0FBQyxDQUFDO0FBQ2pGLFNBQUs7QUFDTCxRQUFJLFFBQUEsa0JBQU0sR0FBRyxFQUFFLFVBQVUsQ0FBQyxTQUFDO0FBQzNCLFFBQUksS0FBSSxDQUFDLFVBQVUsR0FBRyxVQUFVLENBQUM7QUFDakM7QUFHQSxJQUhFLENBQUM7QUFDSCxJQUNFLHNCQUFJLHlDQUFNO0FBQUksYUFBZDtBQUFjLFlBQ1osT0FBTyxJQUFJLENBQUMsVUFBVSxDQUFDLGdCQUFnQixDQUFDO0FBQzVDLFFBQUUsQ0FBQztBQUNGO0FBQ3dCO0FBQTJCLE9BRmpEO0FBQ0g7QUFDZ0UsZ0JBWjdDLGlCQUFpQjtBQUFJLGdCQUFzQixrQkFBa0IsdUJBQXpDLFFBQVE7QUFBTyxnQkFBd0MsZ0JBQWdCO0FBQUc7QUFDeEcsSUFKSSxxQkFBcUIsd0JBRGpDLFNBQVMsQ0FBQyxFQUFFLHJCQUNMLENBRytCLFdBQUEsUUFBUSxFQUFFLENBQUE7S0FKNUIsRUFBRSxQQUkyQixPQUhyQyxxQkFBcUIsQ0FjakM7RUFmZ0QsRUFBRSxDQUFDOzs7Ozs7OzhEQWdCcEQ7QUFBQyxJQURELDRCQUFDO0FBQ0EsQ0FEQSxBQWRELENBQTJDLFdBQVcsR0FjckQ7QUFDRCxTQWZhLHFCQUFxQjtBQUFJIiwic291cmNlc0NvbnRlbnQiOlsiLypcbiAqIENvcHlyaWdodCAoYykgMjAxNi0yMDE4IFZNd2FyZSwgSW5jLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICogVGhpcyBzb2Z0d2FyZSBpcyByZWxlYXNlZCB1bmRlciBNSVQgbGljZW5zZS5cbiAqIFRoZSBmdWxsIGxpY2Vuc2UgaW5mb3JtYXRpb24gY2FuIGJlIGZvdW5kIGluIExJQ0VOU0UgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgcHJvamVjdC5cbiAqL1xuaW1wb3J0IHsgQ2hhbmdlRGV0ZWN0b3JSZWYsIERpcmVjdGl2ZSwgT3B0aW9uYWwgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IE9vbXBhTG9vbXBhIH0gZnJvbSAnLi4vLi4vLi4vdXRpbHMvY2hvY29sYXRlL29vbXBhLWxvb21wYSc7XG5pbXBvcnQgeyBSb3dBY3Rpb25TZXJ2aWNlIH0gZnJvbSAnLi4vcHJvdmlkZXJzL3Jvdy1hY3Rpb24tc2VydmljZSc7XG5pbXBvcnQgeyBEYXRhZ3JpZFdpbGx5V29ua2EgfSBmcm9tICcuL2RhdGFncmlkLXdpbGx5LXdvbmthJztcblxuQERpcmVjdGl2ZSh7IHNlbGVjdG9yOiAnY2xyLWRhdGFncmlkLCBjbHItZGctcm93JyB9KVxuZXhwb3J0IGNsYXNzIEFjdGlvbmFibGVPb21wYUxvb21wYSBleHRlbmRzIE9vbXBhTG9vbXBhIHtcbiAgcHJpdmF0ZSByb3dBY3Rpb25zOiBSb3dBY3Rpb25TZXJ2aWNlO1xuXG4gIGNvbnN0cnVjdG9yKGNkcjogQ2hhbmdlRGV0ZWN0b3JSZWYsIEBPcHRpb25hbCgpIHdpbGx5V29ua2E6IERhdGFncmlkV2lsbHlXb25rYSwgcm93QWN0aW9uczogUm93QWN0aW9uU2VydmljZSkge1xuICAgIGlmICghd2lsbHlXb25rYSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdjbHItZGctcm93IHNob3VsZCBvbmx5IGJlIHVzZWQgaW5zaWRlIG9mIGEgY2xyLWRhdGFncmlkJyk7XG4gICAgfVxuICAgIHN1cGVyKGNkciwgd2lsbHlXb25rYSk7XG4gICAgdGhpcy5yb3dBY3Rpb25zID0gcm93QWN0aW9ucztcbiAgfVxuXG4gIGdldCBmbGF2b3IoKSB7XG4gICAgcmV0dXJuIHRoaXMucm93QWN0aW9ucy5oYXNBY3Rpb25hYmxlUm93O1xuICB9XG59XG4iXX0=