import { __decorate } from "tslib";
/*
 * Copyright (c) 2016-2019 VMware, Inc. All Rights Reserved.
 * This software is released under MIT license.
 * The full license information can be found in LICENSE in the root directory of this project.
 */
import { Component, EventEmitter, Output } from '@angular/core';
import { ColumnsService } from './providers/columns.service';
import { DatagridColumnChanges } from './enums/column-changes.enum';
import * as ɵngcc0 from '@angular/core';

var _c0 = ["*"];
var ClrDatagridColumnToggleButton = /** @class */ (function () {
    function ClrDatagridColumnToggleButton(columnsService) {
        this.columnsService = columnsService;
        this.allSelected = new EventEmitter();
    }
    Object.defineProperty(ClrDatagridColumnToggleButton.prototype, "clrAllSelected", {
        get: function () {
            return this.allSelected.asObservable();
        },
        enumerable: true,
        configurable: true
    });
    ClrDatagridColumnToggleButton.prototype.hideableColumns = function () {
        return this.columnsService.columns.filter(function (column) { return column.value.hideable; });
    };
    Object.defineProperty(ClrDatagridColumnToggleButton.prototype, "allHideablesVisible", {
        get: function () {
            return this.hideableColumns().filter(function (column) { return column.value.hidden; }).length === 0;
        },
        enumerable: true,
        configurable: true
    });
    ClrDatagridColumnToggleButton.prototype.selectAll = function () {
        var _this = this;
        this.hideableColumns().forEach(function (hideableColumn) {
            return _this.columnsService.emitStateChange(hideableColumn, {
                hidden: false,
                changes: [DatagridColumnChanges.HIDDEN],
            });
        });
        this.allSelected.next(true);
    };
    ClrDatagridColumnToggleButton.ctorParameters = function () { return [
        { type: ColumnsService }
    ]; };
    __decorate([
        Output('clrAllSelected')
    ], ClrDatagridColumnToggleButton.prototype, "clrAllSelected", null);
ClrDatagridColumnToggleButton.ɵfac = function ClrDatagridColumnToggleButton_Factory(t) { return new (t || ClrDatagridColumnToggleButton)(ɵngcc0.ɵɵdirectiveInject(ColumnsService)); };
ClrDatagridColumnToggleButton.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: ClrDatagridColumnToggleButton, selectors: [["clr-dg-column-toggle-button"]], outputs: { clrAllSelected: "clrAllSelected" }, ngContentSelectors: _c0, decls: 2, vars: 1, consts: [["type", "button", 1, "btn", "btn-sm", "btn-link", "switch-button", 3, "disabled", "click"]], template: function ClrDatagridColumnToggleButton_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵelementStart(0, "button", 0);
        ɵngcc0.ɵɵlistener("click", function ClrDatagridColumnToggleButton_Template_button_click_0_listener() { return ctx.selectAll(); });
        ɵngcc0.ɵɵprojection(1);
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵproperty("disabled", ctx.allHideablesVisible);
    } }, encapsulation: 2 });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ClrDatagridColumnToggleButton, [{
        type: Component,
        args: [{
                selector: 'clr-dg-column-toggle-button',
                template: "\n    <button class=\"btn btn-sm btn-link switch-button\"\n            (click)=\"selectAll()\"\n            [disabled]=\"allHideablesVisible\"\n            type=\"button\">\n      <ng-content></ng-content>\n    </button>\n  "
            }]
    }], function () { return [{ type: ColumnsService }]; }, { clrAllSelected: [{
            type: Output,
            args: ['clrAllSelected']
        }] }); })();
    return ClrDatagridColumnToggleButton;
}());
export { ClrDatagridColumnToggleButton };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGF0YWdyaWQtY29sdW1uLXRvZ2dsZS1idXR0b24uanMiLCJzb3VyY2VzIjpbIm5nOi9AY2xyL2FuZ3VsYXIvZGF0YS9kYXRhZ3JpZC9kYXRhZ3JpZC1jb2x1bW4tdG9nZ2xlLWJ1dHRvbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0gsT0FBTyxFQUFFLFNBQVMsRUFBRSxZQUFZLEVBQUUsTUFBTSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ2hFLE9BQU8sRUFBRSxjQUFjLEVBQUUsTUFBTSw2QkFBNkIsQ0FBQztBQUc3RCxPQUFPLEVBQUUscUJBQXFCLEVBQUUsTUFBTSw2QkFBNkIsQ0FBQzs7OztBQWNwRTtBQUNvQixJQUFsQix1Q0FBb0IsY0FBOEI7QUFBSSxRQUFsQyxtQkFBYyxHQUFkLGNBQWMsQ0FBZ0I7QUFBQyxRQUUzQyxnQkFBVyxHQUFxQixJQUFJLFlBQVksRUFBRSxDQUFDO0FBQzdELElBSHVELENBQUM7QUFDeEQsSUFJRSxzQkFBSSx5REFBYztBQUFJLGFBQXRCO0FBQWMsWUFDWixPQUFPLElBQUksQ0FBQyxXQUFXLENBQUMsWUFBWSxFQUFFLENBQUM7QUFDM0MsUUFBRSxDQUFDO0FBRUg7QUFBMEI7QUFBMkIsT0FGbEQ7QUFDSCxJQUNVLHVEQUFlLEdBQXZCO0FBQWMsUUFDWixPQUFPLElBQUksQ0FBQyxjQUFjLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxVQUFBLE1BQU0sSUFBSSxPQUFBLE1BQU0sQ0FBQyxLQUFLLENBQUMsUUFBUSxFQUFyQixDQUFxQixDQUFDLENBQUM7QUFDL0UsSUFBRSxDQUFDO0FBRUgsSUFBRSxzQkFBSSw4REFBbUI7QUFBSSxhQUEzQjtBQUFjLFlBQ1osT0FBTyxJQUFJLENBQUMsZUFBZSxFQUFFLENBQUMsTUFBTSxDQUFDLFVBQUEsTUFBTSxJQUFJLE9BQUEsTUFBTSxDQUFDLEtBQUssQ0FBQyxNQUFNLEVBQW5CLENBQW1CLENBQUMsQ0FBQyxNQUFNLEtBQUssQ0FBQyxDQUFDO0FBQ3JGLFFBQUUsQ0FBQztBQUVIO0FBQ1U7QUFBMkIsT0FIbEM7QUFDSCxJQUNFLGlEQUFTLEdBQVQ7QUFDRixRQURFLGlCQVFDO0FBQ0gsUUFSSSxJQUFJLENBQUMsZUFBZSxFQUFFLENBQUMsT0FBTyxDQUFDLFVBQUEsY0FBYztBQUNqRCxZQUFNLE9BQUEsS0FBSSxDQUFDLGNBQWMsQ0FBQyxlQUFlLENBQUMsY0FBYyxFQUFFO0FBQzFELGdCQUFRLE1BQU0sRUFBRSxLQUFLO0FBQ3JCLGdCQUFRLE9BQU8sRUFBRSxDQUFDLHFCQUFxQixDQUFDLE1BQU0sQ0FBQztBQUMvQyxhQUFPLENBQUM7QUFDUCxRQUpLLENBR0UsQ0FDSCxDQUFDO0FBQ04sUUFBSSxJQUFJLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztBQUNoQyxJQUFFLENBQUM7QUFDRjtBQUN3RSxnQkEzQm5DLGNBQWM7QUFBRztBQUVoRCxJQUdMO0FBQWEsUUFEWixNQUFNLENBQUMsZ0JBQWdCLENBQUM7QUFDM0IsdUVBRUc7SUFSVSw2QkFBNkIsd0JBWnpDLFNBQVMsQ0FBQyxjQUNULFFBQVEsRUFBRSw2QkFBNkIsY0FDdkMsUUFBUSxFQUFFOzJMQU9ULFVBQ0YsQ0FBQyxTQUNGLDJDQUEyQyxRQUM5Qiw2QkFBNkIsQ0EyQnpDOzs7Ozs7Ozs7Ozs7Ozs7Ozs7b0JBQ0Q7QUFBQyxJQURELG9DQUFDO0FBQ0EsQ0FEQSxBQTNCRCxJQTJCQztBQUNELFNBNUJhLDZCQUE2QjtBQUN6QyIsInNvdXJjZXNDb250ZW50IjpbIi8qXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTYtMjAxOSBWTXdhcmUsIEluYy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqIFRoaXMgc29mdHdhcmUgaXMgcmVsZWFzZWQgdW5kZXIgTUlUIGxpY2Vuc2UuXG4gKiBUaGUgZnVsbCBsaWNlbnNlIGluZm9ybWF0aW9uIGNhbiBiZSBmb3VuZCBpbiBMSUNFTlNFIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHByb2plY3QuXG4gKi9cbmltcG9ydCB7IENvbXBvbmVudCwgRXZlbnRFbWl0dGVyLCBPdXRwdXQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IENvbHVtbnNTZXJ2aWNlIH0gZnJvbSAnLi9wcm92aWRlcnMvY29sdW1ucy5zZXJ2aWNlJztcbmltcG9ydCB7IENvbHVtblN0YXRlIH0gZnJvbSAnLi9pbnRlcmZhY2VzL2NvbHVtbi1zdGF0ZS5pbnRlcmZhY2UnO1xuaW1wb3J0IHsgQmVoYXZpb3JTdWJqZWN0LCBPYnNlcnZhYmxlLCBTdWJqZWN0IH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyBEYXRhZ3JpZENvbHVtbkNoYW5nZXMgfSBmcm9tICcuL2VudW1zL2NvbHVtbi1jaGFuZ2VzLmVudW0nO1xuXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICdjbHItZGctY29sdW1uLXRvZ2dsZS1idXR0b24nLFxuICB0ZW1wbGF0ZTogYFxuICAgIDxidXR0b24gY2xhc3M9XCJidG4gYnRuLXNtIGJ0bi1saW5rIHN3aXRjaC1idXR0b25cIlxuICAgICAgICAgICAgKGNsaWNrKT1cInNlbGVjdEFsbCgpXCJcbiAgICAgICAgICAgIFtkaXNhYmxlZF09XCJhbGxIaWRlYWJsZXNWaXNpYmxlXCJcbiAgICAgICAgICAgIHR5cGU9XCJidXR0b25cIj5cbiAgICAgIDxuZy1jb250ZW50PjwvbmctY29udGVudD5cbiAgICA8L2J1dHRvbj5cbiAgYCxcbn0pXG4vKiogQGRlcHJlY2F0ZWQgc2luY2UgMi4wLCByZW1vdmUgaW4gMy4wICovXG5leHBvcnQgY2xhc3MgQ2xyRGF0YWdyaWRDb2x1bW5Ub2dnbGVCdXR0b24ge1xuICBjb25zdHJ1Y3Rvcihwcml2YXRlIGNvbHVtbnNTZXJ2aWNlOiBDb2x1bW5zU2VydmljZSkge31cblxuICBwcml2YXRlIGFsbFNlbGVjdGVkOiBTdWJqZWN0PGJvb2xlYW4+ID0gbmV3IEV2ZW50RW1pdHRlcigpO1xuXG4gIEBPdXRwdXQoJ2NsckFsbFNlbGVjdGVkJylcbiAgZ2V0IGNsckFsbFNlbGVjdGVkKCk6IE9ic2VydmFibGU8Ym9vbGVhbj4ge1xuICAgIHJldHVybiB0aGlzLmFsbFNlbGVjdGVkLmFzT2JzZXJ2YWJsZSgpO1xuICB9XG5cbiAgcHJpdmF0ZSBoaWRlYWJsZUNvbHVtbnMoKTogQmVoYXZpb3JTdWJqZWN0PENvbHVtblN0YXRlPltdIHtcbiAgICByZXR1cm4gdGhpcy5jb2x1bW5zU2VydmljZS5jb2x1bW5zLmZpbHRlcihjb2x1bW4gPT4gY29sdW1uLnZhbHVlLmhpZGVhYmxlKTtcbiAgfVxuXG4gIGdldCBhbGxIaWRlYWJsZXNWaXNpYmxlKCkge1xuICAgIHJldHVybiB0aGlzLmhpZGVhYmxlQ29sdW1ucygpLmZpbHRlcihjb2x1bW4gPT4gY29sdW1uLnZhbHVlLmhpZGRlbikubGVuZ3RoID09PSAwO1xuICB9XG5cbiAgc2VsZWN0QWxsKCkge1xuICAgIHRoaXMuaGlkZWFibGVDb2x1bW5zKCkuZm9yRWFjaChoaWRlYWJsZUNvbHVtbiA9PlxuICAgICAgdGhpcy5jb2x1bW5zU2VydmljZS5lbWl0U3RhdGVDaGFuZ2UoaGlkZWFibGVDb2x1bW4sIHtcbiAgICAgICAgaGlkZGVuOiBmYWxzZSxcbiAgICAgICAgY2hhbmdlczogW0RhdGFncmlkQ29sdW1uQ2hhbmdlcy5ISURERU5dLFxuICAgICAgfSlcbiAgICApO1xuICAgIHRoaXMuYWxsU2VsZWN0ZWQubmV4dCh0cnVlKTtcbiAgfVxufVxuIl19