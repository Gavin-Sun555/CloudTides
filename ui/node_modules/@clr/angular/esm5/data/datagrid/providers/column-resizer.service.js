import { __decorate } from "tslib";
/*
 * Copyright (c) 2016-2018 VMware, Inc. All Rights Reserved.
 * This software is released under MIT license.
 * The full license information can be found in LICENSE in the root directory of this project.
 */
import { ElementRef, Injectable } from '@angular/core';
import { DomAdapter } from '../../../utils/dom-adapter/dom-adapter';
import { DatagridRenderOrganizer } from '../render/render-organizer';
import * as ɵngcc0 from '@angular/core';
var MIN_COLUMN_WIDTH = 96;
// This service allows DatagridHeaderRenderer and ClrDatagridColumnSeparator
// to share column resize data with each other.
var ColumnResizerService = /** @class */ (function () {
    function ColumnResizerService(el, domAdapter, organizer) {
        this.el = el;
        this.domAdapter = domAdapter;
        this.organizer = organizer;
        this._resizedBy = 0;
    }
    Object.defineProperty(ColumnResizerService.prototype, "resizedBy", {
        get: function () {
            return this._resizedBy;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ColumnResizerService.prototype, "minColumnWidth", {
        get: function () {
            return this.domAdapter.minWidth(this.el.nativeElement) || MIN_COLUMN_WIDTH;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ColumnResizerService.prototype, "maxResizeRange", {
        get: function () {
            return this.widthBeforeResize - this.minColumnWidth;
        },
        enumerable: true,
        configurable: true
    });
    ColumnResizerService.prototype.startResize = function () {
        this._resizedBy = 0;
        this.isWithinMaxResizeRange = true;
        this.widthBeforeResize = this.domAdapter.clientRect(this.el.nativeElement).width;
    };
    ColumnResizerService.prototype.endResize = function () {
        this.organizer.resize();
    };
    Object.defineProperty(ColumnResizerService.prototype, "widthAfterResize", {
        get: function () {
            return this.widthBeforeResize + this._resizedBy;
        },
        enumerable: true,
        configurable: true
    });
    ColumnResizerService.prototype.calculateResize = function (event) {
        var moveX = event.dragPosition.moveX;
        // returns the resize amount within the allowed range
        if (moveX < -this.maxResizeRange) {
            this._resizedBy = -this.maxResizeRange;
            this.isWithinMaxResizeRange = false;
        }
        else {
            this._resizedBy = moveX;
            this.isWithinMaxResizeRange = true;
        }
    };
    ColumnResizerService.ctorParameters = function () { return [
        { type: ElementRef },
        { type: DomAdapter },
        { type: DatagridRenderOrganizer }
    ]; };
ColumnResizerService.ɵfac = function ColumnResizerService_Factory(t) { return new (t || ColumnResizerService)(ɵngcc0.ɵɵinject(ɵngcc0.ElementRef), ɵngcc0.ɵɵinject(DomAdapter), ɵngcc0.ɵɵinject(DatagridRenderOrganizer)); };
ColumnResizerService.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: ColumnResizerService, factory: function (t) { return ColumnResizerService.ɵfac(t); } });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ColumnResizerService, [{
        type: Injectable
    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: DomAdapter }, { type: DatagridRenderOrganizer }]; }, null); })();
    return ColumnResizerService;
}());
export { ColumnResizerService };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29sdW1uLXJlc2l6ZXIuc2VydmljZS5qcyIsInNvdXJjZXMiOlsibmc6L0BjbHIvYW5ndWxhci9kYXRhL2RhdGFncmlkL3Byb3ZpZGVycy9jb2x1bW4tcmVzaXplci5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSCxPQUFPLEVBQUUsVUFBVSxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUV2RCxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sd0NBQXdDLENBQUM7QUFFcEUsT0FBTyxFQUFFLHVCQUF1QixFQUFFLE1BQU0sNEJBQTRCLENBQUM7O0FBRXJFLElBQU0sZ0JBQWdCLEdBQUcsRUFBRSxDQUFDO0FBRTVCLDRFQUE0RTtBQUM1RSwrQ0FBK0M7QUFHL0M7QUFDb0IsSUFBbEIsOEJBQW9CLEVBQWMsRUFBVSxVQUFzQixFQUFVLFNBQWtDO0FBQUksUUFBOUYsT0FBRSxHQUFGLEVBQUUsQ0FBWTtBQUFDLFFBQVMsZUFBVSxHQUFWLFVBQVUsQ0FBWTtBQUFDLFFBQVMsY0FBUyxHQUFULFNBQVMsQ0FBeUI7QUFBQyxRQUl2RyxlQUFVLEdBQVcsQ0FBQyxDQUFDO0FBQ2pDLElBTG1ILENBQUM7QUFDcEgsSUFLRSxzQkFBVywyQ0FBUztBQUFJLGFBQXhCO0FBQWMsWUFDWixPQUFPLElBQUksQ0FBQyxVQUFVLENBQUM7QUFDM0IsUUFBRSxDQUFDO0FBRUg7QUFBMEI7QUFBMkIsT0FGbEQ7QUFDSCxJQUlFLHNCQUFXLGdEQUFjO0FBQUksYUFBN0I7QUFBYyxZQUNaLE9BQU8sSUFBSSxDQUFDLFVBQVUsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxhQUFhLENBQUMsSUFBSSxnQkFBZ0IsQ0FBQztBQUMvRSxRQUFFLENBQUM7QUFFSDtBQUEwQjtBQUNMLE9BSGxCO0FBQ0gsSUFDRSxzQkFBVyxnREFBYztBQUFJLGFBQTdCO0FBQWMsWUFDWixPQUFPLElBQUksQ0FBQyxpQkFBaUIsR0FBRyxJQUFJLENBQUMsY0FBYyxDQUFDO0FBQ3hELFFBQUUsQ0FBQztBQUVIO0FBQTBCO0FBQ0osT0FIbkI7QUFDSCxJQUNTLDBDQUFXLEdBQWxCO0FBQWMsUUFDWixJQUFJLENBQUMsVUFBVSxHQUFHLENBQUMsQ0FBQztBQUN4QixRQUFJLElBQUksQ0FBQyxzQkFBc0IsR0FBRyxJQUFJLENBQUM7QUFDdkMsUUFBSSxJQUFJLENBQUMsaUJBQWlCLEdBQUcsSUFBSSxDQUFDLFVBQVUsQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxhQUFhLENBQUMsQ0FBQyxLQUFLLENBQUM7QUFDckYsSUFBRSxDQUFDO0FBRUgsSUFBUyx3Q0FBUyxHQUFoQjtBQUFjLFFBQ1osSUFBSSxDQUFDLFNBQVMsQ0FBQyxNQUFNLEVBQUUsQ0FBQztBQUM1QixJQUFFLENBQUM7QUFFSCxJQUFFLHNCQUFXLGtEQUFnQjtBQUFJLGFBQS9CO0FBQWMsWUFDWixPQUFPLElBQUksQ0FBQyxpQkFBaUIsR0FBRyxJQUFJLENBQUMsVUFBVSxDQUFDO0FBQ3BELFFBQUUsQ0FBQztBQUVIO0FBQTBCO0FBQTJCLE9BRmxEO0FBQ0gsSUFDUyw4Q0FBZSxHQUF0QixVQUF1QixLQUF3QjtBQUFJLFFBQ2pELElBQU0sS0FBSyxHQUFHLEtBQUssQ0FBQyxZQUFZLENBQUMsS0FBSyxDQUFDO0FBQzNDLFFBQUkscURBQXFEO0FBQ3pELFFBQUksSUFBSSxLQUFLLEdBQUcsQ0FBQyxJQUFJLENBQUMsY0FBYyxFQUFFO0FBQ3RDLFlBQU0sSUFBSSxDQUFDLFVBQVUsR0FBRyxDQUFDLElBQUksQ0FBQyxjQUFjLENBQUM7QUFDN0MsWUFBTSxJQUFJLENBQUMsc0JBQXNCLEdBQUcsS0FBSyxDQUFDO0FBQzFDLFNBQUs7QUFBQyxhQUFLO0FBQ1gsWUFBTSxJQUFJLENBQUMsVUFBVSxHQUFHLEtBQUssQ0FBQztBQUM5QixZQUFNLElBQUksQ0FBQyxzQkFBc0IsR0FBRyxJQUFJLENBQUM7QUFDekMsU0FBSztBQUNMLElBQUUsQ0FBQztBQUNGO0FBQytELGdCQS9DdEMsVUFBVTtBQUFJLGdCQUFrQixVQUFVO0FBQUksZ0JBQWlCLHVCQUF1QjtBQUFHO0lBRHRHLG9CQUFvQix3QkFEaEMsVUFBVSxFQUFFLFFBQ0Esb0JBQW9CLENBK0NoQzs7OztvSUFDRDtBQUFDLElBREQsMkJBQUM7QUFDQSxDQURBLEFBL0NELElBK0NDO0FBQ0QsU0FoRGEsb0JBQW9CO0FBQ2hDIiwic291cmNlc0NvbnRlbnQiOlsiLypcbiAqIENvcHlyaWdodCAoYykgMjAxNi0yMDE4IFZNd2FyZSwgSW5jLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICogVGhpcyBzb2Z0d2FyZSBpcyByZWxlYXNlZCB1bmRlciBNSVQgbGljZW5zZS5cbiAqIFRoZSBmdWxsIGxpY2Vuc2UgaW5mb3JtYXRpb24gY2FuIGJlIGZvdW5kIGluIExJQ0VOU0UgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgcHJvamVjdC5cbiAqL1xuaW1wb3J0IHsgRWxlbWVudFJlZiwgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG5pbXBvcnQgeyBEb21BZGFwdGVyIH0gZnJvbSAnLi4vLi4vLi4vdXRpbHMvZG9tLWFkYXB0ZXIvZG9tLWFkYXB0ZXInO1xuaW1wb3J0IHsgQ2xyRHJhZ0V2ZW50IH0gZnJvbSAnLi4vLi4vLi4vdXRpbHMvZHJhZy1hbmQtZHJvcC9kcmFnLWV2ZW50JztcbmltcG9ydCB7IERhdGFncmlkUmVuZGVyT3JnYW5pemVyIH0gZnJvbSAnLi4vcmVuZGVyL3JlbmRlci1vcmdhbml6ZXInO1xuXG5jb25zdCBNSU5fQ09MVU1OX1dJRFRIID0gOTY7XG5cbi8vIFRoaXMgc2VydmljZSBhbGxvd3MgRGF0YWdyaWRIZWFkZXJSZW5kZXJlciBhbmQgQ2xyRGF0YWdyaWRDb2x1bW5TZXBhcmF0b3Jcbi8vIHRvIHNoYXJlIGNvbHVtbiByZXNpemUgZGF0YSB3aXRoIGVhY2ggb3RoZXIuXG5cbkBJbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBDb2x1bW5SZXNpemVyU2VydmljZSB7XG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgZWw6IEVsZW1lbnRSZWYsIHByaXZhdGUgZG9tQWRhcHRlcjogRG9tQWRhcHRlciwgcHJpdmF0ZSBvcmdhbml6ZXI6IERhdGFncmlkUmVuZGVyT3JnYW5pemVyKSB7fVxuXG4gIHByaXZhdGUgd2lkdGhCZWZvcmVSZXNpemU6IG51bWJlcjtcblxuICBwcml2YXRlIF9yZXNpemVkQnk6IG51bWJlciA9IDA7XG5cbiAgcHVibGljIGdldCByZXNpemVkQnkoKSB7XG4gICAgcmV0dXJuIHRoaXMuX3Jlc2l6ZWRCeTtcbiAgfVxuXG4gIC8vIGlzIGl0IHdpdGhpbiB0aGUgbWF4aW11bSByZXNpemUgcmFuZ2UgdG8gdGhlIGxlZnRcbiAgcHVibGljIGlzV2l0aGluTWF4UmVzaXplUmFuZ2U6IGJvb2xlYW47XG5cbiAgcHVibGljIGdldCBtaW5Db2x1bW5XaWR0aCgpIHtcbiAgICByZXR1cm4gdGhpcy5kb21BZGFwdGVyLm1pbldpZHRoKHRoaXMuZWwubmF0aXZlRWxlbWVudCkgfHwgTUlOX0NPTFVNTl9XSURUSDtcbiAgfVxuXG4gIHB1YmxpYyBnZXQgbWF4UmVzaXplUmFuZ2UoKSB7XG4gICAgcmV0dXJuIHRoaXMud2lkdGhCZWZvcmVSZXNpemUgLSB0aGlzLm1pbkNvbHVtbldpZHRoO1xuICB9XG5cbiAgcHVibGljIHN0YXJ0UmVzaXplKCk6IHZvaWQge1xuICAgIHRoaXMuX3Jlc2l6ZWRCeSA9IDA7XG4gICAgdGhpcy5pc1dpdGhpbk1heFJlc2l6ZVJhbmdlID0gdHJ1ZTtcbiAgICB0aGlzLndpZHRoQmVmb3JlUmVzaXplID0gdGhpcy5kb21BZGFwdGVyLmNsaWVudFJlY3QodGhpcy5lbC5uYXRpdmVFbGVtZW50KS53aWR0aDtcbiAgfVxuXG4gIHB1YmxpYyBlbmRSZXNpemUoKTogdm9pZCB7XG4gICAgdGhpcy5vcmdhbml6ZXIucmVzaXplKCk7XG4gIH1cblxuICBwdWJsaWMgZ2V0IHdpZHRoQWZ0ZXJSZXNpemUoKTogbnVtYmVyIHtcbiAgICByZXR1cm4gdGhpcy53aWR0aEJlZm9yZVJlc2l6ZSArIHRoaXMuX3Jlc2l6ZWRCeTtcbiAgfVxuXG4gIHB1YmxpYyBjYWxjdWxhdGVSZXNpemUoZXZlbnQ6IENsckRyYWdFdmVudDxhbnk+KTogdm9pZCB7XG4gICAgY29uc3QgbW92ZVggPSBldmVudC5kcmFnUG9zaXRpb24ubW92ZVg7XG4gICAgLy8gcmV0dXJucyB0aGUgcmVzaXplIGFtb3VudCB3aXRoaW4gdGhlIGFsbG93ZWQgcmFuZ2VcbiAgICBpZiAobW92ZVggPCAtdGhpcy5tYXhSZXNpemVSYW5nZSkge1xuICAgICAgdGhpcy5fcmVzaXplZEJ5ID0gLXRoaXMubWF4UmVzaXplUmFuZ2U7XG4gICAgICB0aGlzLmlzV2l0aGluTWF4UmVzaXplUmFuZ2UgPSBmYWxzZTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5fcmVzaXplZEJ5ID0gbW92ZVg7XG4gICAgICB0aGlzLmlzV2l0aGluTWF4UmVzaXplUmFuZ2UgPSB0cnVlO1xuICAgIH1cbiAgfVxufVxuIl19