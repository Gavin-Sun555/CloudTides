/*
 * Copyright (c) 2016-2019 VMware, Inc. All Rights Reserved.
 * This software is released under MIT license.
 * The full license information can be found in LICENSE in the root directory of this project.
 */
import { __decorate } from "tslib";
import { Injectable } from '@angular/core';
import { BehaviorSubject } from 'rxjs';
import * as ɵngcc0 from '@angular/core';
var DetailService = /** @class */ (function () {
    function DetailService() {
        this.toggleState = false;
        this._state = new BehaviorSubject(this.toggleState);
        this._enabled = false;
    }
    Object.defineProperty(DetailService.prototype, "enabled", {
        get: function () {
            return this._enabled;
        },
        set: function (state) {
            this._enabled = state;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DetailService.prototype, "stateChange", {
        get: function () {
            return this._state.asObservable();
        },
        enumerable: true,
        configurable: true
    });
    DetailService.prototype.close = function () {
        this.toggleState = false;
        this._state.next(this.toggleState);
        if (this.button) {
            this.button.focus();
            this.button = null;
        }
    };
    DetailService.prototype.open = function (item, button) {
        this.cache = item;
        this.button = button;
        this.toggleState = true;
        this._state.next(this.toggleState);
    };
    DetailService.prototype.toggle = function (item, button) {
        if (this.isRowOpen(item) || !item) {
            this.close();
        }
        else {
            this.open(item, button);
        }
    };
    Object.defineProperty(DetailService.prototype, "state", {
        get: function () {
            return this.cache;
        },
        enumerable: true,
        configurable: true
    });
    DetailService.prototype.isRowOpen = function (item) {
        return !!(this.toggleState && this.cache === item);
    };
    Object.defineProperty(DetailService.prototype, "isOpen", {
        get: function () {
            return this.toggleState === true;
        },
        enumerable: true,
        configurable: true
    });
DetailService.ɵfac = function DetailService_Factory(t) { return new (t || DetailService)(); };
DetailService.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: DetailService, factory: function (t) { return DetailService.ɵfac(t); } });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(DetailService, [{
        type: Injectable
    }], function () { return []; }, null); })();
    return DetailService;
}());
export { DetailService };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGV0YWlsLnNlcnZpY2UuanMiLCJzb3VyY2VzIjpbIm5nOi9AY2xyL2FuZ3VsYXIvZGF0YS9kYXRhZ3JpZC9wcm92aWRlcnMvZGV0YWlsLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzNDLE9BQU8sRUFBRSxlQUFlLEVBQWMsTUFBTSxNQUFNLENBQUM7O0FBR25EO0FBQ29CLElBRHBCO0FBQTJCLFFBQ2pCLGdCQUFXLEdBQUcsS0FBSyxDQUFDO0FBQzlCLFFBQVUsV0FBTSxHQUFvQyxJQUFJLGVBQWUsQ0FBVSxJQUFJLENBQUMsV0FBVyxDQUFDLENBQUM7QUFDbkcsUUFDVSxhQUFRLEdBQUcsS0FBSyxDQUFDO0FBQzNCLElBa0RBLENBQUM7QUFDRCxJQWhERSxzQkFBSSxrQ0FBTztBQUFJLGFBQWY7QUFBYyxZQUNaLE9BQU8sSUFBSSxDQUFDLFFBQVEsQ0FBQztBQUN6QixRQUFFLENBQUM7QUFFSCxhQUFFLFVBQVksS0FBYztBQUM1QixZQUFJLElBQUksQ0FBQyxRQUFRLEdBQUcsS0FBSyxDQUFDO0FBQzFCLFFBQUUsQ0FBQztBQUVIO0FBQTBCO0FBQTJCLE9BTmxEO0FBQ0gsSUFLRSxzQkFBVyxzQ0FBVztBQUFJLGFBQTFCO0FBQWMsWUFDWixPQUFPLElBQUksQ0FBQyxNQUFNLENBQUMsWUFBWSxFQUFFLENBQUM7QUFDdEMsUUFBRSxDQUFDO0FBRUg7QUFDYztBQUNILE9BSlI7QUFDSCxJQUNFLDZCQUFLLEdBQUw7QUFDRSxRQUFBLElBQUksQ0FBQyxXQUFXLEdBQUcsS0FBSyxDQUFDO0FBQzdCLFFBQUksSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxDQUFDO0FBQ3ZDLFFBQUksSUFBSSxJQUFJLENBQUMsTUFBTSxFQUFFO0FBQ3JCLFlBQU0sSUFBSSxDQUFDLE1BQU0sQ0FBQyxLQUFLLEVBQUUsQ0FBQztBQUMxQixZQUFNLElBQUksQ0FBQyxNQUFNLEdBQUcsSUFBSSxDQUFDO0FBQ3pCLFNBQUs7QUFDTCxJQUFFLENBQUM7QUFFSCxJQUFFLDRCQUFJLEdBQUosVUFBSyxJQUFTLEVBQUUsTUFBMEI7QUFDNUMsUUFBSSxJQUFJLENBQUMsS0FBSyxHQUFHLElBQUksQ0FBQztBQUN0QixRQUFJLElBQUksQ0FBQyxNQUFNLEdBQUcsTUFBTSxDQUFDO0FBQ3pCLFFBQUksSUFBSSxDQUFDLFdBQVcsR0FBRyxJQUFJLENBQUM7QUFDNUIsUUFBSSxJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLENBQUM7QUFDdkMsSUFBRSxDQUFDO0FBRUgsSUFBRSw4QkFBTSxHQUFOLFVBQU8sSUFBUyxFQUFFLE1BQTBCO0FBQzlDLFFBQUksSUFBSSxJQUFJLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxFQUFFO0FBQ3ZDLFlBQU0sSUFBSSxDQUFDLEtBQUssRUFBRSxDQUFDO0FBQ25CLFNBQUs7QUFBQyxhQUFLO0FBQ1gsWUFBTSxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksRUFBRSxNQUFNLENBQUMsQ0FBQztBQUM5QixTQUFLO0FBQ0wsSUFBRSxDQUFDO0FBRUgsSUFBRSxzQkFBSSxnQ0FBSztBQUFJLGFBQWI7QUFDRixZQUFJLE9BQU8sSUFBSSxDQUFDLEtBQUssQ0FBQztBQUN0QixRQUFFLENBQUM7QUFFSDtBQUNDO0FBQTJCLE9BSHpCO0FBQ0gsSUFDRSxpQ0FBUyxHQUFULFVBQVUsSUFBUztBQUNyQixRQUFJLE9BQU8sQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLFdBQVcsSUFBSSxJQUFJLENBQUMsS0FBSyxLQUFLLElBQUksQ0FBQyxDQUFDO0FBQ3ZELElBQUUsQ0FBQztBQUVILElBQUUsc0JBQUksaUNBQU07QUFBSSxhQUFkO0FBQWMsWUFDWixPQUFPLElBQUksQ0FBQyxXQUFXLEtBQUssSUFBSSxDQUFDO0FBQ3JDLFFBQUUsQ0FBQztBQUNGO0FBQ3dCO0FBQTJCLE9BRmpEO0lBdERVLGFBQWEsd0JBRHpCLFVBQVUsRUFBRSxRQUNBLGFBQWEsQ0F1RHpCOzs7O2dEQUNEO0FBQUMsSUFERCxvQkFBQztBQUNBLENBREEsQUF2REQsSUF1REM7QUFDRCxTQXhEYSxhQUFhO0FBQ3pCIiwic291cmNlc0NvbnRlbnQiOlsiLypcbiAqIENvcHlyaWdodCAoYykgMjAxNi0yMDE5IFZNd2FyZSwgSW5jLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICogVGhpcyBzb2Z0d2FyZSBpcyByZWxlYXNlZCB1bmRlciBNSVQgbGljZW5zZS5cbiAqIFRoZSBmdWxsIGxpY2Vuc2UgaW5mb3JtYXRpb24gY2FuIGJlIGZvdW5kIGluIExJQ0VOU0UgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgcHJvamVjdC5cbiAqL1xuXG5pbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBCZWhhdmlvclN1YmplY3QsIE9ic2VydmFibGUgfSBmcm9tICdyeGpzJztcblxuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIERldGFpbFNlcnZpY2Uge1xuICBwcml2YXRlIHRvZ2dsZVN0YXRlID0gZmFsc2U7XG4gIHByaXZhdGUgX3N0YXRlOiBCZWhhdmlvclN1YmplY3Q8Ym9vbGVhbiB8IG51bGw+ID0gbmV3IEJlaGF2aW9yU3ViamVjdDxib29sZWFuPih0aGlzLnRvZ2dsZVN0YXRlKTtcbiAgcHJpdmF0ZSBjYWNoZTogYW55O1xuICBwcml2YXRlIF9lbmFibGVkID0gZmFsc2U7XG4gIHByaXZhdGUgYnV0dG9uOiBIVE1MQnV0dG9uRWxlbWVudDtcbiAgcHVibGljIGlkOiBzdHJpbmc7XG5cbiAgZ2V0IGVuYWJsZWQoKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIHRoaXMuX2VuYWJsZWQ7XG4gIH1cblxuICBzZXQgZW5hYmxlZChzdGF0ZTogYm9vbGVhbikge1xuICAgIHRoaXMuX2VuYWJsZWQgPSBzdGF0ZTtcbiAgfVxuXG4gIHB1YmxpYyBnZXQgc3RhdGVDaGFuZ2UoKTogT2JzZXJ2YWJsZTxib29sZWFuIHwgbnVsbD4ge1xuICAgIHJldHVybiB0aGlzLl9zdGF0ZS5hc09ic2VydmFibGUoKTtcbiAgfVxuXG4gIGNsb3NlKCkge1xuICAgIHRoaXMudG9nZ2xlU3RhdGUgPSBmYWxzZTtcbiAgICB0aGlzLl9zdGF0ZS5uZXh0KHRoaXMudG9nZ2xlU3RhdGUpO1xuICAgIGlmICh0aGlzLmJ1dHRvbikge1xuICAgICAgdGhpcy5idXR0b24uZm9jdXMoKTtcbiAgICAgIHRoaXMuYnV0dG9uID0gbnVsbDtcbiAgICB9XG4gIH1cblxuICBvcGVuKGl0ZW06IGFueSwgYnV0dG9uPzogSFRNTEJ1dHRvbkVsZW1lbnQpIHtcbiAgICB0aGlzLmNhY2hlID0gaXRlbTtcbiAgICB0aGlzLmJ1dHRvbiA9IGJ1dHRvbjtcbiAgICB0aGlzLnRvZ2dsZVN0YXRlID0gdHJ1ZTtcbiAgICB0aGlzLl9zdGF0ZS5uZXh0KHRoaXMudG9nZ2xlU3RhdGUpO1xuICB9XG5cbiAgdG9nZ2xlKGl0ZW06IGFueSwgYnV0dG9uPzogSFRNTEJ1dHRvbkVsZW1lbnQpIHtcbiAgICBpZiAodGhpcy5pc1Jvd09wZW4oaXRlbSkgfHwgIWl0ZW0pIHtcbiAgICAgIHRoaXMuY2xvc2UoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5vcGVuKGl0ZW0sIGJ1dHRvbik7XG4gICAgfVxuICB9XG5cbiAgZ2V0IHN0YXRlKCkge1xuICAgIHJldHVybiB0aGlzLmNhY2hlO1xuICB9XG5cbiAgaXNSb3dPcGVuKGl0ZW06IGFueSkge1xuICAgIHJldHVybiAhISh0aGlzLnRvZ2dsZVN0YXRlICYmIHRoaXMuY2FjaGUgPT09IGl0ZW0pO1xuICB9XG5cbiAgZ2V0IGlzT3BlbigpIHtcbiAgICByZXR1cm4gdGhpcy50b2dnbGVTdGF0ZSA9PT0gdHJ1ZTtcbiAgfVxufVxuIl19