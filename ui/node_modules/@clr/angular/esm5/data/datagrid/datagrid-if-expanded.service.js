/*
 * Copyright (c) 2016-2020 VMware, Inc. All Rights Reserved.
 * This software is released under MIT license.
 * The full license information can be found in LICENSE in the root directory of this project.
 */
import { __decorate, __extends } from "tslib";
import { Injectable } from '@angular/core';
import { BehaviorSubject, Subject } from 'rxjs';
import { IfExpandService } from '../../utils/conditional/if-expanded.service';
import { ClrLoadingState } from '../../utils/loading/loading';
import * as ɵngcc0 from '@angular/core';
var nbRow = 0;
var DatagridIfExpandService = /** @class */ (function (_super) {
    __extends(DatagridIfExpandService, _super);
    function DatagridIfExpandService() {
        var _this = _super.call(this) || this;
        _this.expandableId = '';
        _this._replace = new BehaviorSubject(false);
        _this._animate = new Subject();
        nbRow++;
        _this.expandableId = 'clr-dg-expandable-row-' + nbRow;
        return _this;
    }
    Object.defineProperty(DatagridIfExpandService.prototype, "expanded", {
        // due to the es5 spec if the set is overridden on base class the getter must also be overridden
        get: function () {
            return this._expanded;
        },
        set: function (value) {
            value = !!value;
            if (value !== this._expanded) {
                this._expanded = value;
                this._animate.next();
                this._expandChange.next(value);
            }
        },
        enumerable: true,
        configurable: true
    });
    DatagridIfExpandService.prototype.loadingStateChange = function (state) {
        _super.prototype.loadingStateChange.call(this, state);
        if (state !== ClrLoadingState.LOADING) {
            this._animate.next();
        }
    };
    Object.defineProperty(DatagridIfExpandService.prototype, "replace", {
        get: function () {
            return this._replace.asObservable();
        },
        enumerable: true,
        configurable: true
    });
    DatagridIfExpandService.prototype.setReplace = function (replaceValue) {
        this._replace.next(replaceValue);
    };
    Object.defineProperty(DatagridIfExpandService.prototype, "animate", {
        get: function () {
            return this._animate.asObservable();
        },
        enumerable: true,
        configurable: true
    });
DatagridIfExpandService.ɵfac = function DatagridIfExpandService_Factory(t) { return new (t || DatagridIfExpandService)(); };
DatagridIfExpandService.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: DatagridIfExpandService, factory: function (t) { return DatagridIfExpandService.ɵfac(t); } });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(DatagridIfExpandService, [{
        type: Injectable
    }], function () { return []; }, null); })();
    return DatagridIfExpandService;
}(IfExpandService));
export { DatagridIfExpandService };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGF0YWdyaWQtaWYtZXhwYW5kZWQuc2VydmljZS5qcyIsInNvdXJjZXMiOlsibmc6L0BjbHIvYW5ndWxhci9kYXRhL2RhdGFncmlkL2RhdGFncmlkLWlmLWV4cGFuZGVkLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzNDLE9BQU8sRUFBRSxlQUFlLEVBQWMsT0FBTyxFQUFFLE1BQU0sTUFBTSxDQUFDO0FBRTVELE9BQU8sRUFBRSxlQUFlLEVBQUUsTUFBTSw2Q0FBNkMsQ0FBQztBQUM5RSxPQUFPLEVBQUUsZUFBZSxFQUFFLE1BQU0sNkJBQTZCLENBQUM7O0FBRTlELElBQUksS0FBSyxHQUFHLENBQUMsQ0FBQztBQUdkO0FBQ0UsSUFEMkMsMkNBQWU7QUFBQyxJQUczRDtBQUVNLFFBRk4sWUFDRSxpQkFBTyxTQUdSO0FBQ0gsUUFQRSxrQkFBWSxHQUFHLEVBQUUsQ0FBQztBQUNwQixRQTRCVSxjQUFRLEdBQTZCLElBQUksZUFBZSxDQUFDLEtBQUssQ0FBQyxDQUFDO0FBQzFFLFFBUVUsY0FBUSxHQUFxQixJQUFJLE9BQU8sRUFBVyxDQUFDO0FBQzlELFFBbkNJLEtBQUssRUFBRSxDQUFDO0FBQ1osUUFBSSxLQUFJLENBQUMsWUFBWSxHQUFHLHdCQUF3QixHQUFHLEtBQUssQ0FBQztBQUN6RDtBQUVpQixJQUZmLENBQUM7QUFDSCxJQUVFLHNCQUFJLDZDQUFRO0FBQUksUUFEaEIsZ0dBQWdHO0FBQ2xHLGFBQUU7QUFBYyxZQUNaLE9BQU8sSUFBSSxDQUFDLFNBQVMsQ0FBQztBQUMxQixRQUFFLENBQUM7QUFFSCxhQUFFLFVBQWEsS0FBYztBQUM3QixZQUFJLEtBQUssR0FBRyxDQUFDLENBQUMsS0FBSyxDQUFDO0FBQ3BCLFlBQUksSUFBSSxLQUFLLEtBQUssSUFBSSxDQUFDLFNBQVMsRUFBRTtBQUNsQyxnQkFBTSxJQUFJLENBQUMsU0FBUyxHQUFHLEtBQUssQ0FBQztBQUM3QixnQkFBTSxJQUFJLENBQUMsUUFBUSxDQUFDLElBQUksRUFBRSxDQUFDO0FBQzNCLGdCQUFNLElBQUksQ0FBQyxhQUFhLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO0FBQ3JDLGFBQUs7QUFDTCxRQUFFLENBQUM7QUFFSDtBQUEwQjtBQUNwQixPQVpIO0FBQ0gsSUFVRSxvREFBa0IsR0FBbEIsVUFBbUIsS0FBc0I7QUFDM0MsUUFBSSxpQkFBTSxrQkFBa0IsWUFBQyxLQUFLLENBQUMsQ0FBQztBQUNwQyxRQUFJLElBQUksS0FBSyxLQUFLLGVBQWUsQ0FBQyxPQUFPLEVBQUU7QUFDM0MsWUFBTSxJQUFJLENBQUMsUUFBUSxDQUFDLElBQUksRUFBRSxDQUFDO0FBQzNCLFNBQUs7QUFDTCxJQUFFLENBQUM7QUFFSCxJQUNFLHNCQUFJLDRDQUFPO0FBQUksYUFBZjtBQUFjLFlBQ1osT0FBTyxJQUFJLENBQUMsUUFBUSxDQUFDLFlBQVksRUFBRSxDQUFDO0FBQ3hDLFFBQUUsQ0FBQztBQUVIO0FBQTBCO0FBQ1gsT0FIWjtBQUNILElBQ0UsNENBQVUsR0FBVixVQUFXLFlBQXFCO0FBQ2xDLFFBQUksSUFBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDLENBQUM7QUFDckMsSUFBRSxDQUFDO0FBRUgsSUFDRSxzQkFBSSw0Q0FBTztBQUFJLGFBQWY7QUFBYyxZQUNaLE9BQU8sSUFBSSxDQUFDLFFBQVEsQ0FBQyxZQUFZLEVBQUUsQ0FBQztBQUN4QyxRQUFFLENBQUM7QUFDRjtBQUN3QjtBQUEyQixPQUZqRDtJQTFDVSx1QkFBdUIsd0JBRG5DLFVBQVUsRUFBRSxRQUNBLHVCQUF1QixDQTJDbkM7Ozs7Z0RBQ0Q7QUFBQyxJQURELDhCQUFDO0FBQ0EsQ0FEQSxBQTNDRCxDQUE2QyxlQUFlLEdBMkMzRDtBQUNELFNBNUNhLHVCQUF1QjtBQUFJIiwic291cmNlc0NvbnRlbnQiOlsiLypcbiAqIENvcHlyaWdodCAoYykgMjAxNi0yMDIwIFZNd2FyZSwgSW5jLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICogVGhpcyBzb2Z0d2FyZSBpcyByZWxlYXNlZCB1bmRlciBNSVQgbGljZW5zZS5cbiAqIFRoZSBmdWxsIGxpY2Vuc2UgaW5mb3JtYXRpb24gY2FuIGJlIGZvdW5kIGluIExJQ0VOU0UgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgcHJvamVjdC5cbiAqL1xuXG5pbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBCZWhhdmlvclN1YmplY3QsIE9ic2VydmFibGUsIFN1YmplY3QgfSBmcm9tICdyeGpzJztcblxuaW1wb3J0IHsgSWZFeHBhbmRTZXJ2aWNlIH0gZnJvbSAnLi4vLi4vdXRpbHMvY29uZGl0aW9uYWwvaWYtZXhwYW5kZWQuc2VydmljZSc7XG5pbXBvcnQgeyBDbHJMb2FkaW5nU3RhdGUgfSBmcm9tICcuLi8uLi91dGlscy9sb2FkaW5nL2xvYWRpbmcnO1xuXG5sZXQgbmJSb3cgPSAwO1xuXG5ASW5qZWN0YWJsZSgpXG5leHBvcnQgY2xhc3MgRGF0YWdyaWRJZkV4cGFuZFNlcnZpY2UgZXh0ZW5kcyBJZkV4cGFuZFNlcnZpY2Uge1xuICBleHBhbmRhYmxlSWQgPSAnJztcblxuICBjb25zdHJ1Y3RvcigpIHtcbiAgICBzdXBlcigpO1xuICAgIG5iUm93Kys7XG4gICAgdGhpcy5leHBhbmRhYmxlSWQgPSAnY2xyLWRnLWV4cGFuZGFibGUtcm93LScgKyBuYlJvdztcbiAgfVxuXG4gIC8vIGR1ZSB0byB0aGUgZXM1IHNwZWMgaWYgdGhlIHNldCBpcyBvdmVycmlkZGVuIG9uIGJhc2UgY2xhc3MgdGhlIGdldHRlciBtdXN0IGFsc28gYmUgb3ZlcnJpZGRlblxuICBnZXQgZXhwYW5kZWQoKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIHRoaXMuX2V4cGFuZGVkO1xuICB9XG5cbiAgc2V0IGV4cGFuZGVkKHZhbHVlOiBib29sZWFuKSB7XG4gICAgdmFsdWUgPSAhIXZhbHVlO1xuICAgIGlmICh2YWx1ZSAhPT0gdGhpcy5fZXhwYW5kZWQpIHtcbiAgICAgIHRoaXMuX2V4cGFuZGVkID0gdmFsdWU7XG4gICAgICB0aGlzLl9hbmltYXRlLm5leHQoKTtcbiAgICAgIHRoaXMuX2V4cGFuZENoYW5nZS5uZXh0KHZhbHVlKTtcbiAgICB9XG4gIH1cblxuICBsb2FkaW5nU3RhdGVDaGFuZ2Uoc3RhdGU6IENsckxvYWRpbmdTdGF0ZSkge1xuICAgIHN1cGVyLmxvYWRpbmdTdGF0ZUNoYW5nZShzdGF0ZSk7XG4gICAgaWYgKHN0YXRlICE9PSBDbHJMb2FkaW5nU3RhdGUuTE9BRElORykge1xuICAgICAgdGhpcy5fYW5pbWF0ZS5uZXh0KCk7XG4gICAgfVxuICB9XG5cbiAgcHJpdmF0ZSBfcmVwbGFjZTogQmVoYXZpb3JTdWJqZWN0PGJvb2xlYW4+ID0gbmV3IEJlaGF2aW9yU3ViamVjdChmYWxzZSk7XG4gIGdldCByZXBsYWNlKCk6IE9ic2VydmFibGU8Ym9vbGVhbj4ge1xuICAgIHJldHVybiB0aGlzLl9yZXBsYWNlLmFzT2JzZXJ2YWJsZSgpO1xuICB9XG5cbiAgc2V0UmVwbGFjZShyZXBsYWNlVmFsdWU6IGJvb2xlYW4pIHtcbiAgICB0aGlzLl9yZXBsYWNlLm5leHQocmVwbGFjZVZhbHVlKTtcbiAgfVxuXG4gIHByaXZhdGUgX2FuaW1hdGU6IFN1YmplY3Q8Ym9vbGVhbj4gPSBuZXcgU3ViamVjdDxib29sZWFuPigpO1xuICBnZXQgYW5pbWF0ZSgpOiBPYnNlcnZhYmxlPGJvb2xlYW4+IHtcbiAgICByZXR1cm4gdGhpcy5fYW5pbWF0ZS5hc09ic2VydmFibGUoKTtcbiAgfVxufVxuIl19