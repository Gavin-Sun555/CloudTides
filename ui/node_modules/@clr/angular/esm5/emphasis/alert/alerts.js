import { __decorate } from "tslib";
/*
 * Copyright (c) 2016-2020 VMware, Inc. All Rights Reserved.
 * This software is released under MIT license.
 * The full license information can be found in LICENSE in the root directory of this project.
 */
import { Component, ContentChildren, EventEmitter, Input, Output, } from '@angular/core';
import { ClrAlert } from './alert';
import { MultiAlertService } from './providers/multi-alert.service';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@angular/common';
import * as ɵngcc2 from './alerts-pager';

function ClrAlerts_clr_alerts_pager_0_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelement(0, "clr-alerts-pager", 1);
} if (rf & 2) {
    var ctx_r0 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("clrCurrentAlertIndex", ctx_r0.currentAlertIndex);
} }
var _c0 = [[["clr-alert"]]];
var _c1 = ["clr-alert"];
var ClrAlerts = /** @class */ (function () {
    function ClrAlerts(multiAlertService) {
        this.multiAlertService = multiAlertService;
        this.subscriptions = [];
        this.currentAlertIndexChange = new EventEmitter(false);
        this.currentAlertChange = new EventEmitter(false);
    }
    Object.defineProperty(ClrAlerts.prototype, "allAlerts", {
        set: function (value) {
            this.multiAlertService.manage(value); // provide alerts
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ClrAlerts.prototype, "_inputCurrentIndex", {
        /**
         * Input/Output to support two way binding on current alert index
         */
        set: function (index) {
            if (Number.isInteger(index) && index >= 0) {
                this.multiAlertService.current = index;
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ClrAlerts.prototype, "currentAlertIndex", {
        get: function () {
            return this.multiAlertService.current;
        },
        set: function (index) {
            this.multiAlertService.current = index;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ClrAlerts.prototype, "currentAlert", {
        get: function () {
            return this.multiAlertService.currentAlert;
        },
        /**
         * Input/Output to support two way binding on current alert instance
         */
        set: function (alert) {
            if (alert) {
                this.multiAlertService.currentAlert = alert;
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ClrAlerts.prototype, "alerts", {
        /**
         * Ensure we are only dealing with alerts that have not been closed yet
         */
        get: function () {
            return this.allAlerts.filter(function (alert) {
                return alert.hidden === false;
            });
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ClrAlerts.prototype, "currentAlertType", {
        get: function () {
            if (this.multiAlertService.currentAlert) {
                return this.multiAlertService.currentAlert.alertType;
            }
            return '';
        },
        enumerable: true,
        configurable: true
    });
    ClrAlerts.prototype.ngAfterContentInit = function () {
        var _this = this;
        this.subscriptions.push(this.multiAlertService.changes.subscribe(function (index) {
            _this.currentAlertIndexChange.next(index);
            _this.currentAlertChange.next(_this.multiAlertService.currentAlert);
        }));
    };
    ClrAlerts.prototype.ngOnDestroy = function () {
        this.subscriptions.forEach(function (sub) { return sub.unsubscribe(); });
        this.multiAlertService.destroy();
    };
    ClrAlerts.ctorParameters = function () { return [
        { type: MultiAlertService }
    ]; };
    __decorate([
        ContentChildren(ClrAlert)
    ], ClrAlerts.prototype, "allAlerts", null);
    __decorate([
        Input('clrCurrentAlertIndex')
    ], ClrAlerts.prototype, "_inputCurrentIndex", null);
    __decorate([
        Output('clrCurrentAlertIndexChange')
    ], ClrAlerts.prototype, "currentAlertIndexChange", void 0);
    __decorate([
        Input('clrCurrentAlert')
    ], ClrAlerts.prototype, "currentAlert", null);
    __decorate([
        Output('clrCurrentAlertChange')
    ], ClrAlerts.prototype, "currentAlertChange", void 0);
ClrAlerts.ɵfac = function ClrAlerts_Factory(t) { return new (t || ClrAlerts)(ɵngcc0.ɵɵdirectiveInject(MultiAlertService)); };
ClrAlerts.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: ClrAlerts, selectors: [["clr-alerts"]], contentQueries: function ClrAlerts_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {
        ɵngcc0.ɵɵcontentQuery(dirIndex, ClrAlert, false);
    } if (rf & 2) {
        var _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.allAlerts = _t);
    } }, hostVars: 10, hostBindings: function ClrAlerts_HostBindings(rf, ctx) { if (rf & 2) {
        ɵngcc0.ɵɵclassProp("alerts", true)("alert-danger", ctx.currentAlertType == "danger")("alert-info", ctx.currentAlertType == "info")("alert-success", ctx.currentAlertType == "success")("alert-warning", ctx.currentAlertType == "warning");
    } }, inputs: { _inputCurrentIndex: ["clrCurrentAlertIndex", "_inputCurrentIndex"], currentAlert: ["clrCurrentAlert", "currentAlert"] }, outputs: { currentAlertIndexChange: "clrCurrentAlertIndexChange", currentAlertChange: "clrCurrentAlertChange" }, features: [ɵngcc0.ɵɵProvidersFeature([MultiAlertService])], ngContentSelectors: _c1, decls: 2, vars: 1, consts: [[3, "clrCurrentAlertIndex", 4, "ngIf"], [3, "clrCurrentAlertIndex"]], template: function ClrAlerts_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef(_c0);
        ɵngcc0.ɵɵtemplate(0, ClrAlerts_clr_alerts_pager_0_Template, 1, 1, "clr-alerts-pager", 0);
        ɵngcc0.ɵɵprojection(1);
    } if (rf & 2) {
        ɵngcc0.ɵɵproperty("ngIf", ctx.multiAlertService.count > 1);
    } }, directives: [ɵngcc1.NgIf, ɵngcc2.ClrAlertsPager], styles: ["[_nghost-%COMP%] { display: block }"] });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ClrAlerts, [{
        type: Component,
        args: [{
                selector: 'clr-alerts',
                template: "<!--\n  ~ Copyright (c) 2016-2018 VMware, Inc. All Rights Reserved.\n  ~ This software is released under MIT license.\n  ~ The full license information can be found in LICENSE in the root directory of this project.\n  -->\n\n<clr-alerts-pager\n        *ngIf=\"multiAlertService.count > 1\"\n        [clrCurrentAlertIndex]=\"currentAlertIndex\">\n</clr-alerts-pager>\n<ng-content select=\"clr-alert\"></ng-content>\n",
                providers: [MultiAlertService],
                host: {
                    '[class.alerts]': 'true',
                    '[class.alert-danger]': "this.currentAlertType == 'danger'",
                    '[class.alert-info]': "this.currentAlertType == 'info'",
                    '[class.alert-success]': "this.currentAlertType == 'success'",
                    '[class.alert-warning]': "this.currentAlertType == 'warning'"
                },
                styles: [':host { display: block }']
            }]
    }], function () { return [{ type: MultiAlertService }]; }, { currentAlertIndexChange: [{
            type: Output,
            args: ['clrCurrentAlertIndexChange']
        }], currentAlertChange: [{
            type: Output,
            args: ['clrCurrentAlertChange']
        }], allAlerts: [{
            type: ContentChildren,
            args: [ClrAlert]
        }], _inputCurrentIndex: [{
            type: Input,
            args: ['clrCurrentAlertIndex']
        }], currentAlert: [{
            type: Input,
            args: ['clrCurrentAlert']
        }] }); })();
    return ClrAlerts;
}());
export { ClrAlerts };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,