import { __decorate, __param } from "tslib";
/*
 * Copyright (c) 2016-2020 VMware, Inc. All Rights Reserved.
 * This software is released under MIT license.
 * The full license information can be found in LICENSE in the root directory of this project.
 */
import { ChangeDetectorRef, ElementRef, Component, EventEmitter, Input, Optional, Output, AfterViewInit, ContentChildren, QueryList, OnInit, OnDestroy, } from '@angular/core';
// providers
import { AlertIconAndTypesService } from './providers/icon-and-types.service';
import { MultiAlertService } from './providers/multi-alert.service';
import { isBooleanAttributeSet } from '../../utils/component/is-boolean-attribute-set';
import { ClrCommonStringsService } from '../../utils/i18n/common-strings.service';
import { ClrAriaLiveService, ClrAriaLivePoliteness } from '../../utils/a11y/aria-live.service';
import { ClrAlertText } from './alert-text';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@angular/common';
import * as ɵngcc2 from '../../icon/icon';

function ClrAlert_div_0_button_3_Template(rf, ctx) { if (rf & 1) {
    var _r3 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "button", 4);
    ɵngcc0.ɵɵlistener("click", function ClrAlert_div_0_button_3_Template_button_click_0_listener() { ɵngcc0.ɵɵrestoreView(_r3); var ctx_r2 = ɵngcc0.ɵɵnextContext(2); return ctx_r2.close(); });
    ɵngcc0.ɵɵelement(1, "clr-icon", 5);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    var ctx_r1 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵattribute("aria-label", ctx_r1.clrCloseButtonAriaLabel);
} }
function ClrAlert_div_0_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div", 1);
    ɵngcc0.ɵɵelementStart(1, "div", 2);
    ɵngcc0.ɵɵprojection(2);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵtemplate(3, ClrAlert_div_0_button_3_Template, 2, 1, "button", 3);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    var ctx_r0 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵclassProp("alert-hidden", ctx_r0.hidden)("alert-sm", ctx_r0.isSmall)("alert-app-level", ctx_r0.isAppLevel);
    ɵngcc0.ɵɵproperty("ngClass", ctx_r0.alertClass);
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r0.closable);
} }
var _c0 = ["*"];
var ClrAlert = /** @class */ (function () {
    function ClrAlert(iconService, cdr, multiAlertService, commonStrings, ariaLiveService) {
        this.iconService = iconService;
        this.cdr = cdr;
        this.multiAlertService = multiAlertService;
        this.commonStrings = commonStrings;
        this.ariaLiveService = ariaLiveService;
        this.subscriptions = [];
        this.isSmall = false;
        this.closable = true;
        this.isAppLevel = false;
        // Aria
        this.clrCloseButtonAriaLabel = this.commonStrings.keys.alertCloseButtonAriaLabel;
        this._closed = false;
        this._closedChanged = new EventEmitter(false);
        /**
         * clrPolite is not used in the code. Is here just to provide
         * code complition and also mark component what type AriaLive
         * will be used.
         */
        /** @deprecated since 3.0, remove in 4.0 */
        this.polite = true;
    }
    ClrAlert.prototype.ngOnInit = function () {
        var _this = this;
        if (this.multiAlertService) {
            this.subscriptions.push(this.multiAlertService.changes.subscribe(function () {
                _this.hidden = _this.multiAlertService.currentAlert !== _this;
            }));
        }
    };
    ClrAlert.prototype.ngOnDestroy = function () {
        this.subscriptions.forEach(function (sub) { return sub.unsubscribe(); });
    };
    ClrAlert.prototype.ngAfterViewInit = function () {
        // Announce the first time the alert is render if it is not hidden
        this.announceAriaLiveMessage();
    };
    Object.defineProperty(ClrAlert.prototype, "alertType", {
        get: function () {
            return this.iconService.alertType;
        },
        set: function (val) {
            this.iconService.alertType = val;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ClrAlert.prototype, "ariaLive", {
        /**
         * There is an order on how the attributes will take effect.
         * Assertive, Off, Polite.
         *
         * Polite is default if non is passed.
         *
         * In the case of setting all of them to true. Assertive will be used.
         *
         */
        get: function () {
            if (isBooleanAttributeSet(this.assertive)) {
                return ClrAriaLivePoliteness.assertive;
            }
            if (isBooleanAttributeSet(this.off)) {
                return ClrAriaLivePoliteness.off;
            }
            return ClrAriaLivePoliteness.polite;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ClrAlert.prototype, "alertIconShape", {
        set: function (value) {
            this.iconService.alertIconShape = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ClrAlert.prototype, "alertClass", {
        get: function () {
            return this.iconService.iconInfoFromType(this.iconService.alertType).cssClass;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * This handle the find what content to be annonced withing the aria-live container
     * alerts that are hidden will be ignored.
     *
     * @remark
     * We depend on the ClrAlertText Directive to find and parse the alert messages.
     * Also this require the HTML markup for the alert to be
     * ```html
     * <div class="alert" role="alert">
     *    <div class="alert-items">
     *        <div class="alert-item static">
     *            <span class="alert-text">
     *                 ...
     *            </span>
     *        </div>
     *    </div>
     * </div>
     * ```
     */
    ClrAlert.prototype.announceAriaLiveMessage = function () {
        if (!this.hidden && this.alertTexts.length) {
            var message = this.alertTexts.map(function (alertText) { return alertText.nativeElement.textContent; }).join(' ');
            // Don't call announce when there is nothing to say
            if (message) {
                this.ariaLiveService.announce(message, this.ariaLive);
            }
        }
    };
    Object.defineProperty(ClrAlert.prototype, "hidden", {
        get: function () {
            return this._hidden;
        },
        set: function (value) {
            if (value !== this._hidden) {
                this._hidden = value;
                this.cdr.detectChanges();
            }
        },
        enumerable: true,
        configurable: true
    });
    ClrAlert.prototype.close = function () {
        if (!this.closable) {
            return;
        }
        this._closed = true;
        if (this.multiAlertService) {
            this.multiAlertService.close();
        }
        this._closedChanged.emit(true);
    };
    ClrAlert.prototype.open = function () {
        this._closed = false;
        this._closedChanged.emit(false);
    };
    ClrAlert.ctorParameters = function () { return [
        { type: AlertIconAndTypesService },
        { type: ChangeDetectorRef },
        { type: MultiAlertService, decorators: [{ type: Optional }] },
        { type: ClrCommonStringsService },
        { type: ClrAriaLiveService }
    ]; };
    __decorate([
        Input('clrAlertSizeSmall')
    ], ClrAlert.prototype, "isSmall", void 0);
    __decorate([
        Input('clrAlertClosable')
    ], ClrAlert.prototype, "closable", void 0);
    __decorate([
        Input('clrAlertAppLevel')
    ], ClrAlert.prototype, "isAppLevel", void 0);
    __decorate([
        Input()
    ], ClrAlert.prototype, "clrCloseButtonAriaLabel", void 0);
    __decorate([
        Input('clrAlertClosed')
    ], ClrAlert.prototype, "_closed", void 0);
    __decorate([
        Output('clrAlertClosedChange')
    ], ClrAlert.prototype, "_closedChanged", void 0);
    __decorate([
        Input('clrAlertType')
    ], ClrAlert.prototype, "alertType", null);
    __decorate([
        Input('clrPolite')
    ], ClrAlert.prototype, "polite", void 0);
    __decorate([
        Input('clrAssertive')
    ], ClrAlert.prototype, "assertive", void 0);
    __decorate([
        Input('clrOff')
    ], ClrAlert.prototype, "off", void 0);
    __decorate([
        Input('clrAlertIcon')
    ], ClrAlert.prototype, "alertIconShape", null);
    __decorate([
        ContentChildren(ClrAlertText, { descendants: true, read: ElementRef })
    ], ClrAlert.prototype, "alertTexts", void 0);
    ClrAlert = __decorate([ __param(2, Optional())
    ], ClrAlert);
ClrAlert.ɵfac = function ClrAlert_Factory(t) { return new (t || ClrAlert)(ɵngcc0.ɵɵdirectiveInject(AlertIconAndTypesService), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(MultiAlertService, 8), ɵngcc0.ɵɵdirectiveInject(ClrCommonStringsService), ɵngcc0.ɵɵdirectiveInject(ClrAriaLiveService)); };
ClrAlert.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: ClrAlert, selectors: [["clr-alert"]], contentQueries: function ClrAlert_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {
        ɵngcc0.ɵɵcontentQuery(dirIndex, ClrAlertText, true, ElementRef);
    } if (rf & 2) {
        var _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.alertTexts = _t);
    } }, inputs: { isSmall: ["clrAlertSizeSmall", "isSmall"], closable: ["clrAlertClosable", "closable"], isAppLevel: ["clrAlertAppLevel", "isAppLevel"], clrCloseButtonAriaLabel: "clrCloseButtonAriaLabel", _closed: ["clrAlertClosed", "_closed"], polite: ["clrPolite", "polite"], alertType: ["clrAlertType", "alertType"], alertIconShape: ["clrAlertIcon", "alertIconShape"], assertive: ["clrAssertive", "assertive"], off: ["clrOff", "off"] }, outputs: { _closedChanged: "clrAlertClosedChange" }, features: [ɵngcc0.ɵɵProvidersFeature([AlertIconAndTypesService, ClrAriaLiveService])], ngContentSelectors: _c0, decls: 1, vars: 1, consts: [["class", "alert", 3, "ngClass", "alert-hidden", "alert-sm", "alert-app-level", 4, "ngIf"], [1, "alert", 3, "ngClass"], [1, "alert-items"], ["type", "button", "class", "close", 3, "click", 4, "ngIf"], ["type", "button", 1, "close", 3, "click"], ["shape", "close"]], template: function ClrAlert_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵtemplate(0, ClrAlert_div_0_Template, 4, 8, "div", 0);
    } if (rf & 2) {
        ɵngcc0.ɵɵproperty("ngIf", !ctx._closed);
    } }, directives: [ɵngcc1.NgIf, ɵngcc1.NgClass, ɵngcc2.ClrIconCustomTag], styles: ["[_nghost-%COMP%] { display: block; }"] });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ClrAlert, [{
        type: Component,
        args: [{
                selector: 'clr-alert',
                providers: [AlertIconAndTypesService, ClrAriaLiveService],
                template: "<!--\n  ~ Copyright (c) 2016-2020 VMware, Inc. All Rights Reserved.\n  ~ This software is released under MIT license.\n  ~ The full license information can be found in LICENSE in the root directory of this project.\n  -->\n\n<div\n    *ngIf=\"!_closed\"\n    class=\"alert\"\n    [ngClass]=\"alertClass\"\n    [class.alert-hidden]=\"hidden\"\n    [class.alert-sm]=\"isSmall\"\n    [class.alert-app-level]=\"isAppLevel\">\n    <div class=\"alert-items\">\n        <ng-content></ng-content>\n    </div>\n    <button\n        type=\"button\"\n        class=\"close\"\n        *ngIf=\"closable\"\n        (click)=\"close()\"\n        [attr.aria-label]=\"clrCloseButtonAriaLabel\"\n        >\n        <clr-icon shape=\"close\"></clr-icon>\n    </button>\n</div>\n",
                styles: [':host { display: block; }']
            }]
    }], function () { return [{ type: AlertIconAndTypesService }, { type: ɵngcc0.ChangeDetectorRef }, { type: MultiAlertService, decorators: [{
                type: Optional
            }] }, { type: ClrCommonStringsService }, { type: ClrAriaLiveService }]; }, { isSmall: [{
            type: Input,
            args: ['clrAlertSizeSmall']
        }], closable: [{
            type: Input,
            args: ['clrAlertClosable']
        }], isAppLevel: [{
            type: Input,
            args: ['clrAlertAppLevel']
        }], clrCloseButtonAriaLabel: [{
            type: Input
        }], _closed: [{
            type: Input,
            args: ['clrAlertClosed']
        }], _closedChanged: [{
            type: Output,
            args: ['clrAlertClosedChange']
        }], polite: [{
            type: Input,
            args: ['clrPolite']
        }], alertType: [{
            type: Input,
            args: ['clrAlertType']
        }], alertIconShape: [{
            type: Input,
            args: ['clrAlertIcon']
        }], assertive: [{
            type: Input,
            args: ['clrAssertive']
        }], off: [{
            type: Input,
            args: ['clrOff']
        }], alertTexts: [{
            type: ContentChildren,
            args: [ClrAlertText, { descendants: true, read: ElementRef }]
        }] }); })();
    return ClrAlert;
}());
export { ClrAlert };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,