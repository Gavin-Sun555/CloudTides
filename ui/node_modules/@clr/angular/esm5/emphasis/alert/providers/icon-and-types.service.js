/*
 * Copyright (c) 2016-2019 VMware, Inc. All Rights Reserved.
 * This software is released under MIT license.
 * The full license information can be found in LICENSE in the root directory of this project.
 */
import { __decorate } from "tslib";
import { Injectable } from '@angular/core';
import { ALERT_TYPES } from '../utils/alert-types';
import { ClrCommonStringsService } from '../../../utils/i18n/common-strings.service';
import * as ɵngcc0 from '@angular/core';
var AlertIconAndTypesService = /** @class */ (function () {
    function AlertIconAndTypesService(commonStrings) {
        this.commonStrings = commonStrings;
        this.defaultIconShape = 'info-circle';
        this._alertIconShape = '';
        this._alertType = 'info';
    }
    Object.defineProperty(AlertIconAndTypesService.prototype, "alertType", {
        get: function () {
            return this._alertType;
        },
        set: function (val) {
            if (ALERT_TYPES.indexOf(val) > -1) {
                this._alertType = val;
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AlertIconAndTypesService.prototype, "alertIconShape", {
        get: function () {
            if ('' === this._alertIconShape) {
                return this.iconInfoFromType(this._alertType).shape;
            }
            return this._alertIconShape;
        },
        set: function (val) {
            if (!val) {
                this._alertIconShape = '';
            }
            else if (val !== this._alertIconShape) {
                this._alertIconShape = val;
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AlertIconAndTypesService.prototype, "alertIconTitle", {
        get: function () {
            return this.iconInfoFromType(this._alertType).title;
        },
        enumerable: true,
        configurable: true
    });
    AlertIconAndTypesService.prototype.iconInfoFromType = function (type) {
        var returnObj = { shape: '', cssClass: '', title: '' };
        switch (type) {
            case 'warning':
                returnObj.shape = 'exclamation-triangle';
                returnObj.cssClass = 'alert-warning';
                returnObj.title = this.commonStrings.keys.warning;
                break;
            case 'danger':
                returnObj.shape = 'exclamation-circle';
                returnObj.cssClass = 'alert-danger';
                returnObj.title = this.commonStrings.keys.danger;
                break;
            case 'success':
                returnObj.shape = 'check-circle';
                returnObj.cssClass = 'alert-success';
                returnObj.title = this.commonStrings.keys.success;
                break;
            default:
                returnObj.shape = this.defaultIconShape;
                returnObj.cssClass = 'alert-info';
                returnObj.title = this.commonStrings.keys.info;
                break;
        }
        return returnObj;
    };
    AlertIconAndTypesService.ctorParameters = function () { return [
        { type: ClrCommonStringsService }
    ]; };
AlertIconAndTypesService.ɵfac = function AlertIconAndTypesService_Factory(t) { return new (t || AlertIconAndTypesService)(ɵngcc0.ɵɵinject(ClrCommonStringsService)); };
AlertIconAndTypesService.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: AlertIconAndTypesService, factory: function (t) { return AlertIconAndTypesService.ɵfac(t); } });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(AlertIconAndTypesService, [{
        type: Injectable
    }], function () { return [{ type: ClrCommonStringsService }]; }, null); })();
    return AlertIconAndTypesService;
}());
export { AlertIconAndTypesService };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaWNvbi1hbmQtdHlwZXMuc2VydmljZS5qcyIsInNvdXJjZXMiOlsibmc6L0BjbHIvYW5ndWxhci9lbXBoYXNpcy9hbGVydC9wcm92aWRlcnMvaWNvbi1hbmQtdHlwZXMuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFHM0MsT0FBTyxFQUFFLFdBQVcsRUFBRSxNQUFNLHNCQUFzQixDQUFDO0FBQ25ELE9BQU8sRUFBRSx1QkFBdUIsRUFBRSxNQUFNLDRDQUE0QyxDQUFDOztBQUdyRjtBQUNvQixJQUFsQixrQ0FBb0IsYUFBc0M7QUFBSSxRQUExQyxrQkFBYSxHQUFiLGFBQWEsQ0FBeUI7QUFBQyxRQUVuRCxxQkFBZ0IsR0FBRyxhQUFhLENBQUM7QUFDM0MsUUFBVSxvQkFBZSxHQUFHLEVBQUUsQ0FBQztBQUMvQixRQUFVLGVBQVUsR0FBRyxNQUFNLENBQUM7QUFDOUIsSUFMK0QsQ0FBQztBQUNoRSxJQUtFLHNCQUFJLCtDQUFTO0FBQUksYUFBakI7QUFBYyxZQUNaLE9BQU8sSUFBSSxDQUFDLFVBQVUsQ0FBQztBQUMzQixRQUFFLENBQUM7QUFDRixhQUFDLFVBQWMsR0FBVztBQUMzQixZQUFJLElBQUksV0FBVyxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRTtBQUN2QyxnQkFBTSxJQUFJLENBQUMsVUFBVSxHQUFHLEdBQUcsQ0FBQztBQUM1QixhQUFLO0FBQ0wsUUFBRSxDQUFDO0FBRUg7QUFBMEI7QUFDTixPQVJqQjtBQUNILElBTUUsc0JBQUksb0RBQWM7QUFBSSxhQUF0QjtBQUFjLFlBQ1osSUFBSSxFQUFFLEtBQUssSUFBSSxDQUFDLGVBQWUsRUFBRTtBQUNyQyxnQkFBTSxPQUFPLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUMsS0FBSyxDQUFDO0FBQzFELGFBQUs7QUFDTCxZQUFJLE9BQU8sSUFBSSxDQUFDLGVBQWUsQ0FBQztBQUNoQyxRQUFFLENBQUM7QUFDRixhQUFDLFVBQW1CLEdBQVc7QUFDaEMsWUFBSSxJQUFJLENBQUMsR0FBRyxFQUFFO0FBQ2QsZ0JBQU0sSUFBSSxDQUFDLGVBQWUsR0FBRyxFQUFFLENBQUM7QUFDaEMsYUFBSztBQUFDLGlCQUFLLElBQUksR0FBRyxLQUFLLElBQUksQ0FBQyxlQUFlLEVBQUU7QUFDN0MsZ0JBQU0sSUFBSSxDQUFDLGVBQWUsR0FBRyxHQUFHLENBQUM7QUFDakMsYUFBSztBQUNMLFFBQUUsQ0FBQztBQUVIO0FBQTBCO0FBQ04sT0FWakI7QUFDSCxJQVFFLHNCQUFJLG9EQUFjO0FBQUksYUFBdEI7QUFBYyxZQUNaLE9BQU8sSUFBSSxDQUFDLGdCQUFnQixDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQyxLQUFLLENBQUM7QUFDeEQsUUFBRSxDQUFDO0FBRUg7QUFBMEI7QUFBMkIsT0FGbEQ7QUFDSCxJQUNTLG1EQUFnQixHQUF2QixVQUF3QixJQUFZO0FBQUksUUFDdEMsSUFBTSxTQUFTLEdBQUcsRUFBRSxLQUFLLEVBQUUsRUFBRSxFQUFFLFFBQVEsRUFBRSxFQUFFLEVBQUUsS0FBSyxFQUFFLEVBQUUsRUFBRSxDQUFDO0FBQzdELFFBQ0ksUUFBUSxJQUFJLEVBQUU7QUFDbEIsWUFBTSxLQUFLLFNBQVM7QUFDcEIsZ0JBQVEsU0FBUyxDQUFDLEtBQUssR0FBRyxzQkFBc0IsQ0FBQztBQUNqRCxnQkFBUSxTQUFTLENBQUMsUUFBUSxHQUFHLGVBQWUsQ0FBQztBQUM3QyxnQkFBUSxTQUFTLENBQUMsS0FBSyxHQUFHLElBQUksQ0FBQyxhQUFhLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQztBQUMxRCxnQkFBUSxNQUFNO0FBQ2QsWUFBTSxLQUFLLFFBQVE7QUFDbkIsZ0JBQVEsU0FBUyxDQUFDLEtBQUssR0FBRyxvQkFBb0IsQ0FBQztBQUMvQyxnQkFBUSxTQUFTLENBQUMsUUFBUSxHQUFHLGNBQWMsQ0FBQztBQUM1QyxnQkFBUSxTQUFTLENBQUMsS0FBSyxHQUFHLElBQUksQ0FBQyxhQUFhLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQztBQUN6RCxnQkFBUSxNQUFNO0FBQ2QsWUFBTSxLQUFLLFNBQVM7QUFDcEIsZ0JBQVEsU0FBUyxDQUFDLEtBQUssR0FBRyxjQUFjLENBQUM7QUFDekMsZ0JBQVEsU0FBUyxDQUFDLFFBQVEsR0FBRyxlQUFlLENBQUM7QUFDN0MsZ0JBQVEsU0FBUyxDQUFDLEtBQUssR0FBRyxJQUFJLENBQUMsYUFBYSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUM7QUFDMUQsZ0JBQVEsTUFBTTtBQUNkLFlBQU07QUFDTixnQkFBUSxTQUFTLENBQUMsS0FBSyxHQUFHLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQztBQUNoRCxnQkFBUSxTQUFTLENBQUMsUUFBUSxHQUFHLFlBQVksQ0FBQztBQUMxQyxnQkFBUSxTQUFTLENBQUMsS0FBSyxHQUFHLElBQUksQ0FBQyxhQUFhLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQztBQUN2RCxnQkFBUSxNQUFNO0FBQ2QsU0FBSztBQUNMLFFBQ0ksT0FBTyxTQUFTLENBQUM7QUFDckIsSUFBRSxDQUFDO0FBQ0Y7QUFDbUUsZ0JBOUQvQix1QkFBdUI7QUFBRztJQURsRCx3QkFBd0Isd0JBRHBDLFVBQVUsRUFBRSxRQUNBLHdCQUF3QixDQThEcEM7Ozs7aUZBQ0Q7QUFBQyxJQURELCtCQUFDO0FBQ0EsQ0FEQSxBQTlERCxJQThEQztBQUNELFNBL0RhLHdCQUF3QjtBQUNwQyIsInNvdXJjZXNDb250ZW50IjpbIi8qXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTYtMjAxOSBWTXdhcmUsIEluYy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqIFRoaXMgc29mdHdhcmUgaXMgcmVsZWFzZWQgdW5kZXIgTUlUIGxpY2Vuc2UuXG4gKiBUaGUgZnVsbCBsaWNlbnNlIGluZm9ybWF0aW9uIGNhbiBiZSBmb3VuZCBpbiBMSUNFTlNFIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHByb2plY3QuXG4gKi9cblxuaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG5pbXBvcnQgeyBBbGVydEluZm9PYmplY3QgfSBmcm9tICcuLi91dGlscy9hbGVydC1pbmZvLW9iamVjdCc7XG5pbXBvcnQgeyBBTEVSVF9UWVBFUyB9IGZyb20gJy4uL3V0aWxzL2FsZXJ0LXR5cGVzJztcbmltcG9ydCB7IENsckNvbW1vblN0cmluZ3NTZXJ2aWNlIH0gZnJvbSAnLi4vLi4vLi4vdXRpbHMvaTE4bi9jb21tb24tc3RyaW5ncy5zZXJ2aWNlJztcblxuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIEFsZXJ0SWNvbkFuZFR5cGVzU2VydmljZSB7XG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgY29tbW9uU3RyaW5nczogQ2xyQ29tbW9uU3RyaW5nc1NlcnZpY2UpIHt9XG5cbiAgcHJpdmF0ZSBkZWZhdWx0SWNvblNoYXBlID0gJ2luZm8tY2lyY2xlJztcbiAgcHJpdmF0ZSBfYWxlcnRJY29uU2hhcGUgPSAnJztcbiAgcHJpdmF0ZSBfYWxlcnRUeXBlID0gJ2luZm8nO1xuXG4gIGdldCBhbGVydFR5cGUoKTogc3RyaW5nIHtcbiAgICByZXR1cm4gdGhpcy5fYWxlcnRUeXBlO1xuICB9XG4gIHNldCBhbGVydFR5cGUodmFsOiBzdHJpbmcpIHtcbiAgICBpZiAoQUxFUlRfVFlQRVMuaW5kZXhPZih2YWwpID4gLTEpIHtcbiAgICAgIHRoaXMuX2FsZXJ0VHlwZSA9IHZhbDtcbiAgICB9XG4gIH1cblxuICBnZXQgYWxlcnRJY29uU2hhcGUoKTogc3RyaW5nIHtcbiAgICBpZiAoJycgPT09IHRoaXMuX2FsZXJ0SWNvblNoYXBlKSB7XG4gICAgICByZXR1cm4gdGhpcy5pY29uSW5mb0Zyb21UeXBlKHRoaXMuX2FsZXJ0VHlwZSkuc2hhcGU7XG4gICAgfVxuICAgIHJldHVybiB0aGlzLl9hbGVydEljb25TaGFwZTtcbiAgfVxuICBzZXQgYWxlcnRJY29uU2hhcGUodmFsOiBzdHJpbmcpIHtcbiAgICBpZiAoIXZhbCkge1xuICAgICAgdGhpcy5fYWxlcnRJY29uU2hhcGUgPSAnJztcbiAgICB9IGVsc2UgaWYgKHZhbCAhPT0gdGhpcy5fYWxlcnRJY29uU2hhcGUpIHtcbiAgICAgIHRoaXMuX2FsZXJ0SWNvblNoYXBlID0gdmFsO1xuICAgIH1cbiAgfVxuXG4gIGdldCBhbGVydEljb25UaXRsZSgpOiBzdHJpbmcge1xuICAgIHJldHVybiB0aGlzLmljb25JbmZvRnJvbVR5cGUodGhpcy5fYWxlcnRUeXBlKS50aXRsZTtcbiAgfVxuXG4gIHB1YmxpYyBpY29uSW5mb0Zyb21UeXBlKHR5cGU6IHN0cmluZyk6IEFsZXJ0SW5mb09iamVjdCB7XG4gICAgY29uc3QgcmV0dXJuT2JqID0geyBzaGFwZTogJycsIGNzc0NsYXNzOiAnJywgdGl0bGU6ICcnIH07XG5cbiAgICBzd2l0Y2ggKHR5cGUpIHtcbiAgICAgIGNhc2UgJ3dhcm5pbmcnOlxuICAgICAgICByZXR1cm5PYmouc2hhcGUgPSAnZXhjbGFtYXRpb24tdHJpYW5nbGUnO1xuICAgICAgICByZXR1cm5PYmouY3NzQ2xhc3MgPSAnYWxlcnQtd2FybmluZyc7XG4gICAgICAgIHJldHVybk9iai50aXRsZSA9IHRoaXMuY29tbW9uU3RyaW5ncy5rZXlzLndhcm5pbmc7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAnZGFuZ2VyJzpcbiAgICAgICAgcmV0dXJuT2JqLnNoYXBlID0gJ2V4Y2xhbWF0aW9uLWNpcmNsZSc7XG4gICAgICAgIHJldHVybk9iai5jc3NDbGFzcyA9ICdhbGVydC1kYW5nZXInO1xuICAgICAgICByZXR1cm5PYmoudGl0bGUgPSB0aGlzLmNvbW1vblN0cmluZ3Mua2V5cy5kYW5nZXI7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAnc3VjY2Vzcyc6XG4gICAgICAgIHJldHVybk9iai5zaGFwZSA9ICdjaGVjay1jaXJjbGUnO1xuICAgICAgICByZXR1cm5PYmouY3NzQ2xhc3MgPSAnYWxlcnQtc3VjY2Vzcyc7XG4gICAgICAgIHJldHVybk9iai50aXRsZSA9IHRoaXMuY29tbW9uU3RyaW5ncy5rZXlzLnN1Y2Nlc3M7XG4gICAgICAgIGJyZWFrO1xuICAgICAgZGVmYXVsdDpcbiAgICAgICAgcmV0dXJuT2JqLnNoYXBlID0gdGhpcy5kZWZhdWx0SWNvblNoYXBlO1xuICAgICAgICByZXR1cm5PYmouY3NzQ2xhc3MgPSAnYWxlcnQtaW5mbyc7XG4gICAgICAgIHJldHVybk9iai50aXRsZSA9IHRoaXMuY29tbW9uU3RyaW5ncy5rZXlzLmluZm87XG4gICAgICAgIGJyZWFrO1xuICAgIH1cblxuICAgIHJldHVybiByZXR1cm5PYmo7XG4gIH1cbn1cbiJdfQ==