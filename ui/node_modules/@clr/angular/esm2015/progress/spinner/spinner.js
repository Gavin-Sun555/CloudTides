import { __decorate } from "tslib";
/*
 * Copyright (c) 2016-2020 VMware, Inc. All Rights Reserved.
 * This software is released under MIT license.
 * The full license information can be found in LICENSE in the root directory of this project.
 */
import { Component, Input, HostBinding, ElementRef, AfterViewInit } from '@angular/core';
import { isBooleanAttributeSet } from '../../utils/component/is-boolean-attribute-set';
import { ClrAriaLiveService, ClrAriaLivePoliteness } from '../../utils/a11y/aria-live.service';
import * as ɵngcc0 from '@angular/core';

const _c0 = ["*"];
let ClrSpinner = class ClrSpinner {
    constructor(el, ariaLiveService) {
        this.el = el;
        this.ariaLiveService = ariaLiveService;
    }
    ngAfterViewInit() {
        this.ariaLiveService.announce(this.el.nativeElement, this.ariaLive);
    }
    /**
     * Default class for all spinners. This class is always true
     */
    get spinnerClass() {
        return true;
    }
    get inlineClass() {
        return this._inline;
    }
    set clrInline(value) {
        this._inline = isBooleanAttributeSet(value);
    }
    get inverseClass() {
        return this._inverse;
    }
    set clrInverse(value) {
        this._inverse = isBooleanAttributeSet(value);
    }
    get smallClass() {
        return this._small;
    }
    set clrSmall(value) {
        this._small = isBooleanAttributeSet(value);
    }
    get mediumClass() {
        if (this._small) {
            return false;
        }
        return this._medium;
    }
    set clrMedium(value) {
        this._medium = isBooleanAttributeSet(value);
    }
    get ariaLive() {
        if (isBooleanAttributeSet(this.assertive)) {
            return ClrAriaLivePoliteness.assertive;
        }
        if (isBooleanAttributeSet(this.off)) {
            return ClrAriaLivePoliteness.off;
        }
        return ClrAriaLivePoliteness.polite;
    }
};
ClrSpinner.ɵfac = function ClrSpinner_Factory(t) { return new (t || ClrSpinner)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ClrAriaLiveService)); };
ClrSpinner.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: ClrSpinner, selectors: [["clr-spinner"]], hostVars: 11, hostBindings: function ClrSpinner_HostBindings(rf, ctx) { if (rf & 2) {
        ɵngcc0.ɵɵattribute("aria-busy", true);
        ɵngcc0.ɵɵclassProp("spinner", ctx.spinnerClass)("spinner-inline", ctx.inlineClass)("spinner-inverse", ctx.inverseClass)("spinner-sm", ctx.smallClass)("spinner-md", ctx.mediumClass);
    } }, inputs: { clrInline: "clrInline", clrInverse: "clrInverse", clrSmall: "clrSmall", clrMedium: "clrMedium", assertive: ["clrAssertive", "assertive"], off: ["clrOff", "off"] }, features: [ɵngcc0.ɵɵProvidersFeature([ClrAriaLiveService])], ngContentSelectors: _c0, decls: 1, vars: 0, template: function ClrSpinner_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵprojection(0);
    } }, encapsulation: 2 });
ClrSpinner.ctorParameters = () => [
    { type: ElementRef },
    { type: ClrAriaLiveService }
];
__decorate([
    HostBinding('class.spinner')
], ClrSpinner.prototype, "spinnerClass", null);
__decorate([
    HostBinding('class.spinner-inline')
], ClrSpinner.prototype, "inlineClass", null);
__decorate([
    Input('clrInline')
], ClrSpinner.prototype, "clrInline", null);
__decorate([
    HostBinding('class.spinner-inverse')
], ClrSpinner.prototype, "inverseClass", null);
__decorate([
    Input('clrInverse')
], ClrSpinner.prototype, "clrInverse", null);
__decorate([
    HostBinding('class.spinner-sm')
], ClrSpinner.prototype, "smallClass", null);
__decorate([
    Input('clrSmall')
], ClrSpinner.prototype, "clrSmall", null);
__decorate([
    HostBinding('class.spinner-md')
], ClrSpinner.prototype, "mediumClass", null);
__decorate([
    Input('clrMedium')
], ClrSpinner.prototype, "clrMedium", null);
__decorate([
    Input('clrAssertive')
], ClrSpinner.prototype, "assertive", void 0);
__decorate([
    Input('clrOff')
], ClrSpinner.prototype, "off", void 0);
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ClrSpinner, [{
        type: Component,
        args: [{
                selector: 'clr-spinner',
                providers: [ClrAriaLiveService],
                template: `
    <ng-content></ng-content>
  `,
                host: {
                    '[attr.aria-busy]': 'true'
                }
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ClrAriaLiveService }]; }, { spinnerClass: [{
            type: HostBinding,
            args: ['class.spinner']
        }], inlineClass: [{
            type: HostBinding,
            args: ['class.spinner-inline']
        }], clrInline: [{
            type: Input,
            args: ['clrInline']
        }], inverseClass: [{
            type: HostBinding,
            args: ['class.spinner-inverse']
        }], clrInverse: [{
            type: Input,
            args: ['clrInverse']
        }], smallClass: [{
            type: HostBinding,
            args: ['class.spinner-sm']
        }], clrSmall: [{
            type: Input,
            args: ['clrSmall']
        }], mediumClass: [{
            type: HostBinding,
            args: ['class.spinner-md']
        }], clrMedium: [{
            type: Input,
            args: ['clrMedium']
        }], assertive: [{
            type: Input,
            args: ['clrAssertive']
        }], off: [{
            type: Input,
            args: ['clrOff']
        }] }); })();
export { ClrSpinner };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3Bpbm5lci5qcyIsInNvdXJjZXMiOlsibmc6L0BjbHIvYW5ndWxhci9wcm9ncmVzcy9zcGlubmVyL3NwaW5uZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNILE9BQU8sRUFBRSxTQUFTLEVBQUUsS0FBSyxFQUFFLFdBQVcsRUFBRSxVQUFVLEVBQUUsYUFBYSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ3pGLE9BQU8sRUFBRSxxQkFBcUIsRUFBRSxNQUFNLGdEQUFnRCxDQUFDO0FBQ3ZGLE9BQU8sRUFBRSxrQkFBa0IsRUFBRSxxQkFBcUIsRUFBRSxNQUFNLG9DQUFvQyxDQUFDOzs7O0FBWS9GLElBQWEsVUFBVSxHQUF2QixNQUFhLFVBQVU7QUFBRyxJQUN4QixZQUFvQixFQUFjLEVBQVUsZUFBbUM7QUFBSSxRQUEvRCxPQUFFLEdBQUYsRUFBRSxDQUFZO0FBQUMsUUFBUyxvQkFBZSxHQUFmLGVBQWUsQ0FBb0I7QUFBQyxJQUFFLENBQUM7QUFDckYsSUFDRSxlQUFlO0FBQ2pCLFFBQUksSUFBSSxDQUFDLGVBQWUsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxhQUFhLEVBQUUsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDO0FBQ3hFLElBQUUsQ0FBQztBQUNILElBQ0U7QUFDRjtBQUNFLE9BQUc7QUFDTCxJQUNFLElBQUksWUFBWTtBQUNsQixRQUFJLE9BQU8sSUFBSSxDQUFDO0FBQ2hCLElBQUUsQ0FBQztBQUNILElBSUUsSUFBSSxXQUFXO0FBQ2pCLFFBQUksT0FBTyxJQUFJLENBQUMsT0FBTyxDQUFDO0FBQ3hCLElBQUUsQ0FBQztBQUNILElBRUUsSUFBSSxTQUFTLENBQUMsS0FBdUI7QUFDdkMsUUFBSSxJQUFJLENBQUMsT0FBTyxHQUFHLHFCQUFxQixDQUFDLEtBQUssQ0FBQyxDQUFDO0FBQ2hELElBQUUsQ0FBQztBQUNILElBR0UsSUFBSSxZQUFZO0FBQ2xCLFFBQUksT0FBTyxJQUFJLENBQUMsUUFBUSxDQUFDO0FBQ3pCLElBQUUsQ0FBQztBQUNILElBRUUsSUFBSSxVQUFVLENBQUMsS0FBdUI7QUFDeEMsUUFBSSxJQUFJLENBQUMsUUFBUSxHQUFHLHFCQUFxQixDQUFDLEtBQUssQ0FBQyxDQUFDO0FBQ2pELElBQUUsQ0FBQztBQUNILElBWUUsSUFBSSxVQUFVO0FBQ2hCLFFBQUksT0FBTyxJQUFJLENBQUMsTUFBTSxDQUFDO0FBQ3ZCLElBQUUsQ0FBQztBQUNILElBRUUsSUFBSSxRQUFRLENBQUMsS0FBdUI7QUFDdEMsUUFBSSxJQUFJLENBQUMsTUFBTSxHQUFHLHFCQUFxQixDQUFDLEtBQUssQ0FBQyxDQUFDO0FBQy9DLElBQUUsQ0FBQztBQUNILElBY0UsSUFBSSxXQUFXO0FBQ2pCLFFBQUksSUFBSSxJQUFJLENBQUMsTUFBTSxFQUFFO0FBQ3JCLFlBQU0sT0FBTyxLQUFLLENBQUM7QUFDbkIsU0FBSztBQUNMLFFBQUksT0FBTyxJQUFJLENBQUMsT0FBTyxDQUFDO0FBQ3hCLElBQUUsQ0FBQztBQUNILElBRUUsSUFBSSxTQUFTLENBQUMsS0FBdUI7QUFDdkMsUUFBSSxJQUFJLENBQUMsT0FBTyxHQUFHLHFCQUFxQixDQUFDLEtBQUssQ0FBQyxDQUFDO0FBQ2hELElBQUUsQ0FBQztBQUNILElBb0JFLElBQUksUUFBUTtBQUFLLFFBQ2YsSUFBSSxxQkFBcUIsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLEVBQUU7QUFDL0MsWUFBTSxPQUFPLHFCQUFxQixDQUFDLFNBQVMsQ0FBQztBQUM3QyxTQUFLO0FBQ0wsUUFBSSxJQUFJLHFCQUFxQixDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRTtBQUN6QyxZQUFNLE9BQU8scUJBQXFCLENBQUMsR0FBRyxDQUFDO0FBQ3ZDLFNBQUs7QUFDTCxRQUFJLE9BQU8scUJBQXFCLENBQUMsTUFBTSxDQUFDO0FBQ3hDLElBQUUsQ0FBQztBQUNILENBQUM7Ozs7Ozs7OzZCQUFBO0FBQ0Q7QUFBb0MsWUEvR1YsVUFBVTtBQUFJLFlBQXVCLGtCQUFrQjtBQUFHO0FBVWxGO0FBQWEsSUFEWixXQUFXLENBQUMsZUFBZSxDQUFDO0FBQy9CLDhDQUVHO0FBS0Q7QUFBYSxJQURaLFdBQVcsQ0FBQyxzQkFBc0IsQ0FBQztBQUN0Qyw2Q0FFRztBQUdEO0FBQWEsSUFEWixLQUFLLENBQUMsV0FBVyxDQUFDO0FBQ3JCLDJDQUVHO0FBSUQ7QUFBYSxJQURaLFdBQVcsQ0FBQyx1QkFBdUIsQ0FBQztBQUN2Qyw4Q0FFRztBQUdEO0FBQWEsSUFEWixLQUFLLENBQUMsWUFBWSxDQUFDO0FBQ3RCLDRDQUVHO0FBYUQ7QUFBYSxJQURaLFdBQVcsQ0FBQyxrQkFBa0IsQ0FBQztBQUNsQyw0Q0FFRztBQUdEO0FBQWEsSUFEWixLQUFLLENBQUMsVUFBVSxDQUFDO0FBQ3BCLDBDQUVHO0FBZUQ7QUFBYSxJQURaLFdBQVcsQ0FBQyxrQkFBa0IsQ0FBQztBQUNsQyw2Q0FLRztBQUdEO0FBQWEsSUFEWixLQUFLLENBQUMsV0FBVyxDQUFDO0FBQ3JCLDJDQUVHO0FBa0JzQjtBQUFhLElBQW5DLEtBQUssQ0FBQyxjQUFjLENBQUM7QUFBQyw2Q0FBbUI7QUFFekI7QUFBYSxJQUE3QixLQUFLLENBQUMsUUFBUSxDQUFDO0FBQUMsdUNBQWE7QUFyR25CLFVBQVUsb0JBVnRCLFNBQVMsQ0FBQyxVQUNULFFBQVEsRUFBRTtJQUFhLFVBQ3ZCLFNBQVM7QUFBRSxDQUFDO0VBQWtCLENBQUMsVUFDL0IsUUFBUSxFQUFFO2lCQUVULFVBQ0QsSUFBSSxFQUFFLGNBQ0o7Z0JBQWtCLEVBQUUsTUFBTTtPQUMzQixNQUNGLENBQUMsSUFDVyxVQUFVLENBK0d0Qjs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O29CQUNEO0FBQUMsU0FoSFksVUFBVTtBQUFJIiwic291cmNlc0NvbnRlbnQiOlsiLypcbiAqIENvcHlyaWdodCAoYykgMjAxNi0yMDIwIFZNd2FyZSwgSW5jLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICogVGhpcyBzb2Z0d2FyZSBpcyByZWxlYXNlZCB1bmRlciBNSVQgbGljZW5zZS5cbiAqIFRoZSBmdWxsIGxpY2Vuc2UgaW5mb3JtYXRpb24gY2FuIGJlIGZvdW5kIGluIExJQ0VOU0UgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgcHJvamVjdC5cbiAqL1xuaW1wb3J0IHsgQ29tcG9uZW50LCBJbnB1dCwgSG9zdEJpbmRpbmcsIEVsZW1lbnRSZWYsIEFmdGVyVmlld0luaXQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IGlzQm9vbGVhbkF0dHJpYnV0ZVNldCB9IGZyb20gJy4uLy4uL3V0aWxzL2NvbXBvbmVudC9pcy1ib29sZWFuLWF0dHJpYnV0ZS1zZXQnO1xuaW1wb3J0IHsgQ2xyQXJpYUxpdmVTZXJ2aWNlLCBDbHJBcmlhTGl2ZVBvbGl0ZW5lc3MgfSBmcm9tICcuLi8uLi91dGlscy9hMTF5L2FyaWEtbGl2ZS5zZXJ2aWNlJztcblxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAnY2xyLXNwaW5uZXInLFxuICBwcm92aWRlcnM6IFtDbHJBcmlhTGl2ZVNlcnZpY2VdLFxuICB0ZW1wbGF0ZTogYFxuICAgIDxuZy1jb250ZW50PjwvbmctY29udGVudD5cbiAgYCxcbiAgaG9zdDoge1xuICAgICdbYXR0ci5hcmlhLWJ1c3ldJzogJ3RydWUnLFxuICB9LFxufSlcbmV4cG9ydCBjbGFzcyBDbHJTcGlubmVyIGltcGxlbWVudHMgQWZ0ZXJWaWV3SW5pdCB7XG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgZWw6IEVsZW1lbnRSZWYsIHByaXZhdGUgYXJpYUxpdmVTZXJ2aWNlOiBDbHJBcmlhTGl2ZVNlcnZpY2UpIHt9XG5cbiAgbmdBZnRlclZpZXdJbml0KCkge1xuICAgIHRoaXMuYXJpYUxpdmVTZXJ2aWNlLmFubm91bmNlKHRoaXMuZWwubmF0aXZlRWxlbWVudCwgdGhpcy5hcmlhTGl2ZSk7XG4gIH1cblxuICAvKipcbiAgICogRGVmYXVsdCBjbGFzcyBmb3IgYWxsIHNwaW5uZXJzLiBUaGlzIGNsYXNzIGlzIGFsd2F5cyB0cnVlXG4gICAqL1xuICBASG9zdEJpbmRpbmcoJ2NsYXNzLnNwaW5uZXInKVxuICBnZXQgc3Bpbm5lckNsYXNzKCkge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbiAgLy8gU3R5bGVcbiAgcHJpdmF0ZSBfaW5saW5lOiBib29sZWFuO1xuICBASG9zdEJpbmRpbmcoJ2NsYXNzLnNwaW5uZXItaW5saW5lJylcbiAgZ2V0IGlubGluZUNsYXNzKCkge1xuICAgIHJldHVybiB0aGlzLl9pbmxpbmU7XG4gIH1cblxuICBASW5wdXQoJ2NscklubGluZScpXG4gIHNldCBjbHJJbmxpbmUodmFsdWU6IGJvb2xlYW4gfCBzdHJpbmcpIHtcbiAgICB0aGlzLl9pbmxpbmUgPSBpc0Jvb2xlYW5BdHRyaWJ1dGVTZXQodmFsdWUpO1xuICB9XG5cbiAgcHJpdmF0ZSBfaW52ZXJzZTogYm9vbGVhbjtcbiAgQEhvc3RCaW5kaW5nKCdjbGFzcy5zcGlubmVyLWludmVyc2UnKVxuICBnZXQgaW52ZXJzZUNsYXNzKCkge1xuICAgIHJldHVybiB0aGlzLl9pbnZlcnNlO1xuICB9XG5cbiAgQElucHV0KCdjbHJJbnZlcnNlJylcbiAgc2V0IGNsckludmVyc2UodmFsdWU6IGJvb2xlYW4gfCBzdHJpbmcpIHtcbiAgICB0aGlzLl9pbnZlcnNlID0gaXNCb29sZWFuQXR0cmlidXRlU2V0KHZhbHVlKTtcbiAgfVxuXG4gIC8vIFNpemVcbiAgLyoqXG4gICAqIEJ5IGRlZmF1bHQgYWxsIHNwaW5uZXJzIGFyZSBMYXJnZS4gKHNwaW5uZXItbGcpXG4gICAqIFRvIGNoYW5nZSB0aGUgc2l6ZSB5b3UgbmVlZCB0byB1c2Ugc2V0IGNsclNtYWxsIG9yIGNsck1lZGl1bSB0byBUUlVFL1xuICAgKi9cblxuICAvKipcbiAgICogU21hbGxcbiAgICovXG4gIHByaXZhdGUgX3NtYWxsOiBib29sZWFuO1xuICBASG9zdEJpbmRpbmcoJ2NsYXNzLnNwaW5uZXItc20nKVxuICBnZXQgc21hbGxDbGFzcygpIHtcbiAgICByZXR1cm4gdGhpcy5fc21hbGw7XG4gIH1cblxuICBASW5wdXQoJ2NsclNtYWxsJylcbiAgc2V0IGNsclNtYWxsKHZhbHVlOiBib29sZWFuIHwgc3RyaW5nKSB7XG4gICAgdGhpcy5fc21hbGwgPSBpc0Jvb2xlYW5BdHRyaWJ1dGVTZXQodmFsdWUpO1xuICB9XG5cbiAgLyoqXG4gICAqIFdoZW4gY2xyU21hbGwgJiBjbHJNZWRpdW0gYXJlIHNldCBib3RoIHRvIHRydWUuXG4gICAqIFRoZSBDU1Mgd2l0aCBoaWdoIHByaW9yaXR5IHdpbGwgYmUgc21hbGwgLSBzbyBtZWRpdW0gc2l6ZSB3aWxsIGJlIGlnbm9yZWQuXG4gICAqXG4gICAqIEZvciB0aGlzIHJlYXNvbiBpZiBjbHJTbWFsbCBpcyBzZXQgd2Ugd29uJ3QgYWRkIGNsck1lZGl1bSBjbGFzcy5cbiAgICpcbiAgICogTk9URTogVGhpcyBpcyBkaWN0YXRlZCBieSB0aGUgQ1NTIHJ1bGVzLlxuICAgKiBET04nVCBVU0UgY2xyU21hbGwgJiBjbHJNZWRpdW0gdG8gdG9nZ2xlIGNsYXNzZXMuIFRoaXMgY291bGQgY2hhbmdlIHdpdGhvdXQgbm90aWNlLlxuICAgKlxuICAgKiBBbHNvIHRoZXJlIGlzIG5vIGxvZ2ljYWwgbmVlZCB0byBoYXZlIGJvdGggb2YgdGhlbSBzZXQgdG8gVFJVRSBvciBGQUxTRS5cbiAgICovXG4gIHByaXZhdGUgX21lZGl1bTogYm9vbGVhbjtcbiAgQEhvc3RCaW5kaW5nKCdjbGFzcy5zcGlubmVyLW1kJylcbiAgZ2V0IG1lZGl1bUNsYXNzKCkge1xuICAgIGlmICh0aGlzLl9zbWFsbCkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcy5fbWVkaXVtO1xuICB9XG5cbiAgQElucHV0KCdjbHJNZWRpdW0nKVxuICBzZXQgY2xyTWVkaXVtKHZhbHVlOiBib29sZWFuIHwgc3RyaW5nKSB7XG4gICAgdGhpcy5fbWVkaXVtID0gaXNCb29sZWFuQXR0cmlidXRlU2V0KHZhbHVlKTtcbiAgfVxuXG4gIC8vIEFyaWEgTGl2ZVxuXG4gIC8qKlxuICAgKiBCeSBkZWZhdWx0IGFyaWEtbGl2ZSB3aWxsIGJlIHNldCB0byBgcG9saXRlYCAuXG4gICAqIFRvIGNoYW5nZSBpcyBpdCB5b3UgbmVlZCB0byBzZXQgY2xyQXNzZXJ0aXZlIG9yIGNsck9mZiB0byBUUlVFXG4gICAqXG4gICAqIFRoZXJlIGlzIHByaW9yaXR5OlxuICAgKiAgIERlZmF1bHQ6IHBvbGl0ZVxuICAgKiAgIEFzZXJ0aXZlXG4gICAqICAgT2ZmXG4gICAqXG4gICAqIEluIGNhc2Ugd2hlbiBmb3Igc29tZSByZWFzb24geW91IGhhdmUgY2xyQXNzZXJ0aXZlPVRSVUUgYW5kIGNsck9mZj1UUlVFLFxuICAgKiB3ZSBnb25uYSBzZXQgYGFzc2VydGl2ZWAgYXMgdmFsdWUgb2YgYXJpYS1saXZlLlxuICAgKlxuICAgKi9cbiAgLyoqIEBkZXByZWNhdGVkIHNpbmNlIDMuMCwgcmVtb3ZlIGluIDQuMCAqL1xuICBASW5wdXQoJ2NsckFzc2VydGl2ZScpIGFzc2VydGl2ZTogYm9vbGVhbjtcbiAgLyoqIEBkZXByZWNhdGVkIHNpbmNlIDMuMCwgcmVtb3ZlIGluIDQuMCAqL1xuICBASW5wdXQoJ2Nsck9mZicpIG9mZjogYm9vbGVhbjtcbiAgZ2V0IGFyaWFMaXZlKCk6IENsckFyaWFMaXZlUG9saXRlbmVzcyB7XG4gICAgaWYgKGlzQm9vbGVhbkF0dHJpYnV0ZVNldCh0aGlzLmFzc2VydGl2ZSkpIHtcbiAgICAgIHJldHVybiBDbHJBcmlhTGl2ZVBvbGl0ZW5lc3MuYXNzZXJ0aXZlO1xuICAgIH1cbiAgICBpZiAoaXNCb29sZWFuQXR0cmlidXRlU2V0KHRoaXMub2ZmKSkge1xuICAgICAgcmV0dXJuIENsckFyaWFMaXZlUG9saXRlbmVzcy5vZmY7XG4gICAgfVxuICAgIHJldHVybiBDbHJBcmlhTGl2ZVBvbGl0ZW5lc3MucG9saXRlO1xuICB9XG59XG4iXX0=