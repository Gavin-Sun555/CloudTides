import { __decorate } from "tslib";
/*
 * Copyright (c) 2016-2020 VMware, Inc. All Rights Reserved.
 * This software is released under MIT license.
 * The full license information can be found in LICENSE in the root directory of this project.
 */
import { Component, Input, HostBinding } from '@angular/core';
import { isBooleanAttributeSet } from '../../utils/component/is-boolean-attribute-set';
import { ClrAriaLiveService, ClrAriaLivePoliteness } from '../../utils/a11y/aria-live.service';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@angular/common';

function ClrProgressBar_span_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "span");
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r0 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate(ctx_r0.displayValue);
} }
let ClrProgressBar = class ClrProgressBar {
    constructor(ariaLiveService) {
        this.ariaLiveService = ariaLiveService;
        this.externalId = '';
        // Progress
        this.max = 100;
        this._value = 0;
    }
    set id(value) {
        this._ID = value;
        this.externalId = null;
    }
    get id() {
        return this._ID;
    }
    get value() {
        return this._value;
    }
    set value(value) {
        this._value = value;
        if (this.displayAriaLive()) {
            this.ariaLiveService.announce(this.displayValue, this.ariaLive);
        }
    }
    // Styles
    get progressClass() {
        return true;
    }
    get labeledClass() {
        return this._labeled;
    }
    set clrLabeled(value) {
        this._labeled = isBooleanAttributeSet(value);
    }
    get fadeClass() {
        return this._fade;
    }
    set clrFade(value) {
        this._fade = isBooleanAttributeSet(value);
    }
    get loopClass() {
        return this._loop;
    }
    set clrLoop(value) {
        this._loop = isBooleanAttributeSet(value);
    }
    get successClass() {
        return this._success;
    }
    /** @deprecated since 2.0, remove in 4.0 */
    set clrSuccess(value) {
        this._success = isBooleanAttributeSet(value);
    }
    get dangerClass() {
        return this._danger;
    }
    /** @deprecated since 2.0, remove in 4.0 */
    set clrDanger(value) {
        this._danger = isBooleanAttributeSet(value);
    }
    get flashClass() {
        return this._flash;
    }
    set clrFlash(value) {
        this._flash = isBooleanAttributeSet(value);
    }
    get flashDangerClass() {
        return this._flashDanger;
    }
    /** @deprecated since 2.0, remove in 4.0 */
    set clrFlashDanger(value) {
        this._flashDanger = isBooleanAttributeSet(value);
    }
    /**
     * Make sure that we always will have something that is readable
     * for the screen reader
     */
    get displayValue() {
        if (this.displayval) {
            return this.displayval;
        }
        return `${this.value}%`;
    }
    /**
     * Display aria-live only when there is value and it's not 0 or equal to the max value
     */
    displayAriaLive() {
        return (this.value !== undefined || this.value !== 0) && this.value !== this.max;
    }
    get ariaLive() {
        if (isBooleanAttributeSet(this.assertive)) {
            return ClrAriaLivePoliteness.assertive;
        }
        if (isBooleanAttributeSet(this.off)) {
            return ClrAriaLivePoliteness.off;
        }
        return ClrAriaLivePoliteness.polite;
    }
};
ClrProgressBar.ɵfac = function ClrProgressBar_Factory(t) { return new (t || ClrProgressBar)(ɵngcc0.ɵɵdirectiveInject(ClrAriaLiveService)); };
ClrProgressBar.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: ClrProgressBar, selectors: [["clr-progress-bar"]], hostVars: 17, hostBindings: function ClrProgressBar_HostBindings(rf, ctx) { if (rf & 2) {
        ɵngcc0.ɵɵattribute("id", ctx.externalId);
        ɵngcc0.ɵɵclassProp("progress", ctx.progressClass)("labeled", ctx.labeledClass)("progress-fade", ctx.fadeClass)("loop", ctx.loopClass)("success", ctx.successClass)("danger", ctx.dangerClass)("flash", ctx.flashClass)("flash-danger", ctx.flashDangerClass);
    } }, inputs: { max: ["clrMax", "max"], id: "id", value: ["clrValue", "value"], clrLabeled: "clrLabeled", clrFade: "clrFade", clrLoop: "clrLoop", clrSuccess: "clrSuccess", clrDanger: "clrDanger", clrFlash: "clrFlash", clrFlashDanger: "clrFlashDanger", displayval: ["clrDisplayval", "displayval"], assertive: ["clrAssertive", "assertive"], off: ["clrOff", "off"] }, features: [ɵngcc0.ɵɵProvidersFeature([ClrAriaLiveService])], decls: 2, vars: 5, consts: [[3, "id"], [4, "ngIf"]], template: function ClrProgressBar_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelement(0, "progress", 0);
        ɵngcc0.ɵɵtemplate(1, ClrProgressBar_span_1_Template, 2, 1, "span", 1);
    } if (rf & 2) {
        ɵngcc0.ɵɵproperty("id", ctx.id);
        ɵngcc0.ɵɵattribute("max", ctx.max)("value", ctx.value)("data-displayval", ctx.displayValue);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.displayAriaLive());
    } }, directives: [ɵngcc1.NgIf], encapsulation: 2 });
ClrProgressBar.ctorParameters = () => [
    { type: ClrAriaLiveService }
];
__decorate([
    HostBinding('attr.id')
], ClrProgressBar.prototype, "externalId", void 0);
__decorate([
    Input()
], ClrProgressBar.prototype, "id", null);
__decorate([
    Input('clrMax')
], ClrProgressBar.prototype, "max", void 0);
__decorate([
    Input('clrDisplayval')
], ClrProgressBar.prototype, "displayval", void 0);
__decorate([
    Input('clrValue')
], ClrProgressBar.prototype, "value", null);
__decorate([
    HostBinding('class.progress')
], ClrProgressBar.prototype, "progressClass", null);
__decorate([
    HostBinding('class.labeled')
], ClrProgressBar.prototype, "labeledClass", null);
__decorate([
    Input('clrLabeled')
], ClrProgressBar.prototype, "clrLabeled", null);
__decorate([
    HostBinding('class.progress-fade')
], ClrProgressBar.prototype, "fadeClass", null);
__decorate([
    Input('clrFade')
], ClrProgressBar.prototype, "clrFade", null);
__decorate([
    HostBinding('class.loop')
], ClrProgressBar.prototype, "loopClass", null);
__decorate([
    Input('clrLoop')
], ClrProgressBar.prototype, "clrLoop", null);
__decorate([
    HostBinding('class.success')
], ClrProgressBar.prototype, "successClass", null);
__decorate([
    Input('clrSuccess')
], ClrProgressBar.prototype, "clrSuccess", null);
__decorate([
    HostBinding('class.danger')
], ClrProgressBar.prototype, "dangerClass", null);
__decorate([
    Input('clrDanger')
], ClrProgressBar.prototype, "clrDanger", null);
__decorate([
    HostBinding('class.flash')
], ClrProgressBar.prototype, "flashClass", null);
__decorate([
    Input('clrFlash')
], ClrProgressBar.prototype, "clrFlash", null);
__decorate([
    HostBinding('class.flash-danger')
], ClrProgressBar.prototype, "flashDangerClass", null);
__decorate([
    Input('clrFlashDanger')
], ClrProgressBar.prototype, "clrFlashDanger", null);
__decorate([
    Input('clrAssertive')
], ClrProgressBar.prototype, "assertive", void 0);
__decorate([
    Input('clrOff')
], ClrProgressBar.prototype, "off", void 0);
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ClrProgressBar, [{
        type: Component,
        args: [{
                providers: [ClrAriaLiveService],
                selector: 'clr-progress-bar',
                template: `
    <progress [id]="id" [attr.max]="max" [attr.value]="value" [attr.data-displayval]="displayValue"></progress>
    <span *ngIf="displayAriaLive()">{{ displayValue }}</span>
  `
            }]
    }], function () { return [{ type: ClrAriaLiveService }]; }, { externalId: [{
            type: HostBinding,
            args: ['attr.id']
        }], max: [{
            type: Input,
            args: ['clrMax']
        }], id: [{
            type: Input
        }], value: [{
            type: Input,
            args: ['clrValue']
        }], progressClass: [{
            type: HostBinding,
            args: ['class.progress']
        }], labeledClass: [{
            type: HostBinding,
            args: ['class.labeled']
        }], clrLabeled: [{
            type: Input,
            args: ['clrLabeled']
        }], fadeClass: [{
            type: HostBinding,
            args: ['class.progress-fade']
        }], clrFade: [{
            type: Input,
            args: ['clrFade']
        }], loopClass: [{
            type: HostBinding,
            args: ['class.loop']
        }], clrLoop: [{
            type: Input,
            args: ['clrLoop']
        }], successClass: [{
            type: HostBinding,
            args: ['class.success']
        }], clrSuccess: [{
            type: Input,
            args: ['clrSuccess']
        }], dangerClass: [{
            type: HostBinding,
            args: ['class.danger']
        }], clrDanger: [{
            type: Input,
            args: ['clrDanger']
        }], flashClass: [{
            type: HostBinding,
            args: ['class.flash']
        }], clrFlash: [{
            type: Input,
            args: ['clrFlash']
        }], flashDangerClass: [{
            type: HostBinding,
            args: ['class.flash-danger']
        }], clrFlashDanger: [{
            type: Input,
            args: ['clrFlashDanger']
        }], displayval: [{
            type: Input,
            args: ['clrDisplayval']
        }], assertive: [{
            type: Input,
            args: ['clrAssertive']
        }], off: [{
            type: Input,
            args: ['clrOff']
        }] }); })();
export { ClrProgressBar };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,