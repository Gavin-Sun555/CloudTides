/*
 * Copyright (c) 2016-2020 VMware, Inc. All Rights Reserved.
 * This software is released under MIT license.
 * The full license information can be found in LICENSE in the root directory of this project.
 */
import { __decorate } from "tslib";
import { ClrTimelineStepState } from '../enums/timeline-step-state.enum';
import { ClrCommonStringsService } from '../../utils/i18n/common-strings.service';
import { Injectable } from '@angular/core';
import * as ɵngcc0 from '@angular/core';
let TimelineIconAttributeService = class TimelineIconAttributeService {
    constructor(commonStrings) {
        this.attributeMap = new Map();
        this.attributeMap.set(ClrTimelineStepState.NOT_STARTED, {
            iconShape: 'circle',
            ariaLabel: commonStrings.keys.timelineStepNotStarted,
        });
        this.attributeMap.set(ClrTimelineStepState.CURRENT, {
            iconShape: 'dot-circle',
            ariaLabel: commonStrings.keys.timelineStepCurrent,
        });
        this.attributeMap.set(ClrTimelineStepState.PROCESSING, {
            iconShape: undefined,
            ariaLabel: commonStrings.keys.timelineStepProcessing,
        });
        this.attributeMap.set(ClrTimelineStepState.SUCCESS, {
            iconShape: 'success-standard',
            ariaLabel: commonStrings.keys.timelineStepSuccess,
        });
        this.attributeMap.set(ClrTimelineStepState.ERROR, {
            iconShape: 'error-standard',
            ariaLabel: commonStrings.keys.timelineStepError,
        });
    }
    getAriaLabel(step) {
        return this.attributeMap.get(step).ariaLabel;
    }
    getIconShape(step) {
        return this.attributeMap.get(step).iconShape;
    }
};
TimelineIconAttributeService.ɵfac = function TimelineIconAttributeService_Factory(t) { return new (t || TimelineIconAttributeService)(ɵngcc0.ɵɵinject(ClrCommonStringsService)); };
TimelineIconAttributeService.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: TimelineIconAttributeService, factory: TimelineIconAttributeService.ɵfac });
TimelineIconAttributeService.ctorParameters = () => [
    { type: ClrCommonStringsService }
];
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(TimelineIconAttributeService, [{
        type: Injectable
    }], function () { return [{ type: ClrCommonStringsService }]; }, null); })();
export { TimelineIconAttributeService };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGltZWxpbmUtaWNvbi1hdHRyaWJ1dGUuc2VydmljZS5qcyIsInNvdXJjZXMiOlsibmc6L0BjbHIvYW5ndWxhci90aW1lbGluZS9wcm92aWRlcnMvdGltZWxpbmUtaWNvbi1hdHRyaWJ1dGUuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBLE9BQU8sRUFBRSxvQkFBb0IsRUFBRSxNQUFNLG1DQUFtQyxDQUFDO0FBRXpFLE9BQU8sRUFBRSx1QkFBdUIsRUFBRSxNQUFNLHlDQUF5QyxDQUFDO0FBQ2xGLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7O0FBRzNDLElBQWEsNEJBQTRCLEdBQXpDLE1BQWEsNEJBQTRCO0FBQ3pDLElBRUUsWUFBWSxhQUFzQztBQUNwRCxRQUhVLGlCQUFZLEdBQThDLElBQUksR0FBRyxFQUF3QyxDQUFDO0FBQ3BILFFBRUksSUFBSSxDQUFDLFlBQVksQ0FBQyxHQUFHLENBQUMsb0JBQW9CLENBQUMsV0FBVyxFQUFFO0FBQzVELFlBQU0sU0FBUyxFQUFFLFFBQVE7QUFDekIsWUFBTSxTQUFTLEVBQUUsYUFBYSxDQUFDLElBQUksQ0FBQyxzQkFBc0I7QUFDMUQsU0FBSyxDQUFDLENBQUM7QUFDUCxRQUFJLElBQUksQ0FBQyxZQUFZLENBQUMsR0FBRyxDQUFDLG9CQUFvQixDQUFDLE9BQU8sRUFBRTtBQUN4RCxZQUFNLFNBQVMsRUFBRSxZQUFZO0FBQzdCLFlBQU0sU0FBUyxFQUFFLGFBQWEsQ0FBQyxJQUFJLENBQUMsbUJBQW1CO0FBQ3ZELFNBQUssQ0FBQyxDQUFDO0FBQ1AsUUFBSSxJQUFJLENBQUMsWUFBWSxDQUFDLEdBQUcsQ0FBQyxvQkFBb0IsQ0FBQyxVQUFVLEVBQUU7QUFDM0QsWUFBTSxTQUFTLEVBQUUsU0FBUztBQUMxQixZQUFNLFNBQVMsRUFBRSxhQUFhLENBQUMsSUFBSSxDQUFDLHNCQUFzQjtBQUMxRCxTQUFLLENBQUMsQ0FBQztBQUNQLFFBQUksSUFBSSxDQUFDLFlBQVksQ0FBQyxHQUFHLENBQUMsb0JBQW9CLENBQUMsT0FBTyxFQUFFO0FBQ3hELFlBQU0sU0FBUyxFQUFFLGtCQUFrQjtBQUNuQyxZQUFNLFNBQVMsRUFBRSxhQUFhLENBQUMsSUFBSSxDQUFDLG1CQUFtQjtBQUN2RCxTQUFLLENBQUMsQ0FBQztBQUNQLFFBQUksSUFBSSxDQUFDLFlBQVksQ0FBQyxHQUFHLENBQUMsb0JBQW9CLENBQUMsS0FBSyxFQUFFO0FBQ3RELFlBQU0sU0FBUyxFQUFFLGdCQUFnQjtBQUNqQyxZQUFNLFNBQVMsRUFBRSxhQUFhLENBQUMsSUFBSSxDQUFDLGlCQUFpQjtBQUNyRCxTQUFLLENBQUMsQ0FBQztBQUNQLElBQUUsQ0FBQztBQUNILElBQ1MsWUFBWSxDQUFDLElBQTBCO0FBQUksUUFDaEQsT0FBTyxJQUFJLENBQUMsWUFBWSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQyxTQUFTLENBQUM7QUFDakQsSUFBRSxDQUFDO0FBQ0gsSUFDUyxZQUFZLENBQUMsSUFBMEI7QUFBSSxRQUNoRCxPQUFPLElBQUksQ0FBQyxZQUFZLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxDQUFDLFNBQVMsQ0FBQztBQUNqRCxJQUFFLENBQUM7QUFDSCxDQUFDOztvSkFBQTtBQUNEO0FBQXNELFlBL0J6Qix1QkFBdUI7QUFBRztBQUgxQyw0QkFBNEIsb0JBRHhDLFVBQVUsRUFBRSxJQUNBO0tBQTRCLENBaUN4QztpRkFDRDtBQUFDLFNBbENZLDRCQUE0QjtBQUN4QyIsInNvdXJjZXNDb250ZW50IjpbIi8qXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTYtMjAyMCBWTXdhcmUsIEluYy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqIFRoaXMgc29mdHdhcmUgaXMgcmVsZWFzZWQgdW5kZXIgTUlUIGxpY2Vuc2UuXG4gKiBUaGUgZnVsbCBsaWNlbnNlIGluZm9ybWF0aW9uIGNhbiBiZSBmb3VuZCBpbiBMSUNFTlNFIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHByb2plY3QuXG4gKi9cblxuaW1wb3J0IHsgQ2xyVGltZWxpbmVTdGVwU3RhdGUgfSBmcm9tICcuLi9lbnVtcy90aW1lbGluZS1zdGVwLXN0YXRlLmVudW0nO1xuaW1wb3J0IHsgSWNvbkF0dHJpYnV0ZXMgfSBmcm9tICcuLi9pbnRlcmZhY2UvaWNvbi1hdHRyaWJ1dGUuaXRlcmZhY2UnO1xuaW1wb3J0IHsgQ2xyQ29tbW9uU3RyaW5nc1NlcnZpY2UgfSBmcm9tICcuLi8uLi91dGlscy9pMThuL2NvbW1vbi1zdHJpbmdzLnNlcnZpY2UnO1xuaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG5ASW5qZWN0YWJsZSgpXG5leHBvcnQgY2xhc3MgVGltZWxpbmVJY29uQXR0cmlidXRlU2VydmljZSB7XG4gIHByaXZhdGUgYXR0cmlidXRlTWFwOiBNYXA8Q2xyVGltZWxpbmVTdGVwU3RhdGUsIEljb25BdHRyaWJ1dGVzPiA9IG5ldyBNYXA8Q2xyVGltZWxpbmVTdGVwU3RhdGUsIEljb25BdHRyaWJ1dGVzPigpO1xuXG4gIGNvbnN0cnVjdG9yKGNvbW1vblN0cmluZ3M6IENsckNvbW1vblN0cmluZ3NTZXJ2aWNlKSB7XG4gICAgdGhpcy5hdHRyaWJ1dGVNYXAuc2V0KENsclRpbWVsaW5lU3RlcFN0YXRlLk5PVF9TVEFSVEVELCB7XG4gICAgICBpY29uU2hhcGU6ICdjaXJjbGUnLFxuICAgICAgYXJpYUxhYmVsOiBjb21tb25TdHJpbmdzLmtleXMudGltZWxpbmVTdGVwTm90U3RhcnRlZCxcbiAgICB9KTtcbiAgICB0aGlzLmF0dHJpYnV0ZU1hcC5zZXQoQ2xyVGltZWxpbmVTdGVwU3RhdGUuQ1VSUkVOVCwge1xuICAgICAgaWNvblNoYXBlOiAnZG90LWNpcmNsZScsXG4gICAgICBhcmlhTGFiZWw6IGNvbW1vblN0cmluZ3Mua2V5cy50aW1lbGluZVN0ZXBDdXJyZW50LFxuICAgIH0pO1xuICAgIHRoaXMuYXR0cmlidXRlTWFwLnNldChDbHJUaW1lbGluZVN0ZXBTdGF0ZS5QUk9DRVNTSU5HLCB7XG4gICAgICBpY29uU2hhcGU6IHVuZGVmaW5lZCxcbiAgICAgIGFyaWFMYWJlbDogY29tbW9uU3RyaW5ncy5rZXlzLnRpbWVsaW5lU3RlcFByb2Nlc3NpbmcsXG4gICAgfSk7XG4gICAgdGhpcy5hdHRyaWJ1dGVNYXAuc2V0KENsclRpbWVsaW5lU3RlcFN0YXRlLlNVQ0NFU1MsIHtcbiAgICAgIGljb25TaGFwZTogJ3N1Y2Nlc3Mtc3RhbmRhcmQnLFxuICAgICAgYXJpYUxhYmVsOiBjb21tb25TdHJpbmdzLmtleXMudGltZWxpbmVTdGVwU3VjY2VzcyxcbiAgICB9KTtcbiAgICB0aGlzLmF0dHJpYnV0ZU1hcC5zZXQoQ2xyVGltZWxpbmVTdGVwU3RhdGUuRVJST1IsIHtcbiAgICAgIGljb25TaGFwZTogJ2Vycm9yLXN0YW5kYXJkJyxcbiAgICAgIGFyaWFMYWJlbDogY29tbW9uU3RyaW5ncy5rZXlzLnRpbWVsaW5lU3RlcEVycm9yLFxuICAgIH0pO1xuICB9XG5cbiAgcHVibGljIGdldEFyaWFMYWJlbChzdGVwOiBDbHJUaW1lbGluZVN0ZXBTdGF0ZSk6IHN0cmluZyB7XG4gICAgcmV0dXJuIHRoaXMuYXR0cmlidXRlTWFwLmdldChzdGVwKS5hcmlhTGFiZWw7XG4gIH1cblxuICBwdWJsaWMgZ2V0SWNvblNoYXBlKHN0ZXA6IENsclRpbWVsaW5lU3RlcFN0YXRlKTogc3RyaW5nIHtcbiAgICByZXR1cm4gdGhpcy5hdHRyaWJ1dGVNYXAuZ2V0KHN0ZXApLmljb25TaGFwZTtcbiAgfVxufVxuIl19