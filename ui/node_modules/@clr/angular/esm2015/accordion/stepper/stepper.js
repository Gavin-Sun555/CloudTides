/*
 * Copyright (c) 2016-2019 VMware, Inc. All Rights Reserved.
 * This software is released under MIT license.
 * The full license information can be found in LICENSE in the root directory of this project.
 */
import { __decorate, __param } from "tslib";
import { Component, ContentChildren, Optional, ChangeDetectionStrategy, Input, } from '@angular/core';
import { FormGroupDirective, NgForm } from '@angular/forms';
import { startWith, filter } from 'rxjs/operators';
import { StepperService } from './providers/stepper.service';
import { AccordionService } from '../providers/accordion.service';
import { ClrStepperPanel } from './stepper-panel';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@angular/forms';

const _c0 = ["clrStepper", ""];
const _c1 = ["*"];
let ClrStepper = class ClrStepper {
    constructor(formGroup, ngForm, stepperService) {
        this.formGroup = formGroup;
        this.ngForm = ngForm;
        this.stepperService = stepperService;
        this.subscriptions = [];
    }
    ngOnInit() {
        if (!this.formGroup && !this.ngForm) {
            throw new Error('To use stepper a Reactive or Template Form is required.');
        }
        this.form = this.formGroup ? this.formGroup : this.ngForm;
        this.subscriptions.push(this.listenForPanelsCompleted());
        this.subscriptions.push(this.listenForFormResetChanges());
    }
    ngOnChanges(changes) {
        if (changes.initialPanel.currentValue !== changes.initialPanel.previousValue) {
            this.stepperService.overrideInitialPanel(this.initialPanel);
        }
    }
    ngAfterViewInit() {
        this.subscriptions.push(this.listenForDOMChanges());
    }
    ngOnDestroy() {
        this.subscriptions.forEach(s => s.unsubscribe());
    }
    listenForFormResetChanges() {
        return this.form.statusChanges
            .pipe(filter(() => this.form.pristine)) // https://github.com/angular/angular/issues/10887
            .subscribe(() => this.stepperService.resetPanels());
    }
    listenForPanelsCompleted() {
        return this.stepperService.panelsCompleted.subscribe(panelsCompleted => {
            if (panelsCompleted && this.form.valid) {
                this.form.ngSubmit.emit();
            }
            else if (!this.form.valid && this.form.touched) {
                this.setPanelsWithFormErrors();
            }
        });
    }
    setPanelsWithFormErrors() {
        const panelsWithErrors = this.panels.reduce((panels, p) => (p.formGroup.invalid ? [...panels, p.id] : panels), []);
        this.stepperService.setPanelsWithErrors(panelsWithErrors);
    }
    listenForDOMChanges() {
        return this.panels.changes.pipe(startWith(this.panels)).subscribe(panels => {
            this.stepperService.updatePanelOrder(panels.toArray().map(p => p.id));
            if (this.initialPanel) {
                this.stepperService.overrideInitialPanel(this.initialPanel);
            }
        });
    }
};
ClrStepper.ɵfac = function ClrStepper_Factory(t) { return new (t || ClrStepper)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.FormGroupDirective, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.NgForm, 8), ɵngcc0.ɵɵdirectiveInject(StepperService)); };
ClrStepper.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: ClrStepper, selectors: [["form", "clrStepper", ""]], contentQueries: function ClrStepper_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {
        ɵngcc0.ɵɵcontentQuery(dirIndex, ClrStepperPanel, true);
    } if (rf & 2) {
        var _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.panels = _t);
    } }, hostVars: 4, hostBindings: function ClrStepper_HostBindings(rf, ctx) { if (rf & 2) {
        ɵngcc0.ɵɵclassProp("clr-accordion", true)("clr-stepper-forms", true);
    } }, inputs: { initialPanel: ["clrInitialStep", "initialPanel"] }, features: [ɵngcc0.ɵɵProvidersFeature([StepperService, { provide: AccordionService, useExisting: StepperService }]), ɵngcc0.ɵɵNgOnChangesFeature], attrs: _c0, ngContentSelectors: _c1, decls: 1, vars: 0, template: function ClrStepper_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵprojection(0);
    } }, encapsulation: 2, changeDetection: 0 });
ClrStepper.ctorParameters = () => [
    { type: FormGroupDirective, decorators: [{ type: Optional }] },
    { type: NgForm, decorators: [{ type: Optional }] },
    { type: StepperService }
];
__decorate([
    Input('clrInitialStep')
], ClrStepper.prototype, "initialPanel", void 0);
__decorate([
    ContentChildren(ClrStepperPanel, { descendants: true })
], ClrStepper.prototype, "panels", void 0);
ClrStepper = __decorate([ __param(0, Optional()),
    __param(1, Optional())
], ClrStepper);
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ClrStepper, [{
        type: Component,
        args: [{
                selector: 'form[clrStepper]',
                template: `<ng-content></ng-content>`,
                host: {
                    '[class.clr-accordion]': 'true',
                    '[class.clr-stepper-forms]': 'true'
                },
                providers: [StepperService, { provide: AccordionService, useExisting: StepperService }],
                changeDetection: ChangeDetectionStrategy.OnPush
            }]
    }], function () { return [{ type: ɵngcc1.FormGroupDirective, decorators: [{
                type: Optional
            }] }, { type: ɵngcc1.NgForm, decorators: [{
                type: Optional
            }] }, { type: StepperService }]; }, { initialPanel: [{
            type: Input,
            args: ['clrInitialStep']
        }], panels: [{
            type: ContentChildren,
            args: [ClrStepperPanel, { descendants: true }]
        }] }); })();
export { ClrStepper };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,