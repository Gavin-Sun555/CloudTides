/*
 * Copyright (c) 2016-2019 VMware, Inc. All Rights Reserved.
 * This software is released under MIT license.
 * The full license information can be found in LICENSE in the root directory of this project.
 *
 */
import { __decorate } from "tslib";
import { Directive, EventEmitter, HostListener, Output } from '@angular/core';
import { ClrPopoverToggleService } from './providers/popover-toggle.service';
import * as ɵngcc0 from '@angular/core';
let ClrPopoverOpenCloseButton = class ClrPopoverOpenCloseButton {
    constructor(smartOpenService) {
        this.smartOpenService = smartOpenService;
        this.subscriptions = [];
        this.openCloseChange = new EventEmitter();
        this.subscriptions.push(this.smartOpenService.openChange.subscribe(change => {
            this.openCloseChange.next(change);
        }));
    }
    handleClick(event) {
        this.smartOpenService.toggleWithEvent(event);
    }
    ngOnDestroy() {
        this.subscriptions.forEach(sub => sub.unsubscribe());
    }
};
ClrPopoverOpenCloseButton.ɵfac = function ClrPopoverOpenCloseButton_Factory(t) { return new (t || ClrPopoverOpenCloseButton)(ɵngcc0.ɵɵdirectiveInject(ClrPopoverToggleService)); };
ClrPopoverOpenCloseButton.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: ClrPopoverOpenCloseButton, selectors: [["", "clrPopoverOpenCloseButton", ""]], hostVars: 2, hostBindings: function ClrPopoverOpenCloseButton_HostBindings(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵlistener("click", function ClrPopoverOpenCloseButton_click_HostBindingHandler($event) { return ctx.handleClick($event); });
    } if (rf & 2) {
        ɵngcc0.ɵɵclassProp("clr-smart-open-close", true);
    } }, outputs: { openCloseChange: "clrPopoverOpenCloseChange" } });
ClrPopoverOpenCloseButton.ctorParameters = () => [
    { type: ClrPopoverToggleService }
];
__decorate([
    Output('clrPopoverOpenCloseChange')
], ClrPopoverOpenCloseButton.prototype, "openCloseChange", void 0);
__decorate([
    HostListener('click', ['$event'])
], ClrPopoverOpenCloseButton.prototype, "handleClick", null);
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ClrPopoverOpenCloseButton, [{
        type: Directive,
        args: [{
                selector: '[clrPopoverOpenCloseButton]',
                host: {
                    '[class.clr-smart-open-close]': 'true'
                }
            }]
    }], function () { return [{ type: ClrPopoverToggleService }]; }, { openCloseChange: [{
            type: Output,
            args: ['clrPopoverOpenCloseChange']
        }], handleClick: [{
            type: HostListener,
            args: ['click', ['$event']]
        }] }); })();
export { ClrPopoverOpenCloseButton };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG9wb3Zlci1vcGVuLWNsb3NlLWJ1dHRvbi5qcyIsInNvdXJjZXMiOlsibmc6L0BjbHIvYW5ndWxhci91dGlscy9wb3BvdmVyL3BvcG92ZXItb3Blbi1jbG9zZS1idXR0b24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBLE9BQU8sRUFBRSxTQUFTLEVBQUUsWUFBWSxFQUFFLFlBQVksRUFBYSxNQUFNLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDekYsT0FBTyxFQUFFLHVCQUF1QixFQUFFLE1BQU0sb0NBQW9DLENBQUM7O0FBUzdFLElBQWEseUJBQXlCLEdBQXRDLE1BQWEseUJBQXlCO0FBQUcsSUFHdkMsWUFBb0IsZ0JBQXlDO0FBQy9ELFFBRHNCLHFCQUFnQixHQUFoQixnQkFBZ0IsQ0FBeUI7QUFBQyxRQUZ0RCxrQkFBYSxHQUFtQixFQUFFLENBQUM7QUFDN0MsUUFTdUMsb0JBQWUsR0FBMEIsSUFBSSxZQUFZLEVBQVcsQ0FBQztBQUM1RyxRQVJJLElBQUksQ0FBQyxhQUFhLENBQUMsSUFBSSxDQUNyQixJQUFJLENBQUMsZ0JBQWdCLENBQUMsVUFBVSxDQUFDLFNBQVMsQ0FBQyxNQUFNLENBQUMsRUFBRTtBQUMxRCxZQUFRLElBQUksQ0FBQyxlQUFlLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO0FBQzFDLFFBQU0sQ0FBQyxDQUFDLENBQ0gsQ0FBQztBQUNOLElBQUUsQ0FBQztBQUNILElBSUUsV0FBVyxDQUFDLEtBQWlCO0FBQy9CLFFBQUksSUFBSSxDQUFDLGdCQUFnQixDQUFDLGVBQWUsQ0FBQyxLQUFLLENBQUMsQ0FBQztBQUNqRCxJQUFFLENBQUM7QUFDSCxJQUNFLFdBQVc7QUFDYixRQUFJLElBQUksQ0FBQyxhQUFhLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDLFdBQVcsRUFBRSxDQUFDLENBQUM7QUFDekQsSUFBRSxDQUFDO0FBQ0gsQ0FBQzs7Ozs7O3NFQUFBO0FBQ0Q7QUFBbUQsWUFuQlgsdUJBQXVCO0FBQUc7QUFRM0I7QUFBYSxJQUFqRCxNQUFNLENBQUMsMkJBQTJCLENBQUM7QUFBQyxrRUFBcUU7QUFHMUc7QUFBYSxJQURaLFlBQVksQ0FBQyxPQUFPLEVBQUUsQ0FBQyxRQUFRLENBQUMsQ0FBQztBQUNwQyw0REFFRztBQWhCVSx5QkFBeUIsb0JBTnJDLFNBQVMsQ0FBQyxVQUNULFFBQVEsRUFBRTtvQkFBNkI7S0FDdkMsSUFBSSxFQUFFO1FBQ0osOEJBQThCLEVBQUUsTUFBTTtBQUN2QyxPQUNGLENBQUMsSUFDVzthQUF5QixDQXFCckM7Ozs7Ozs7OztvQkFDRDtBQUFDLFNBdEJZLHlCQUF5QjtBQUFJIiwic291cmNlc0NvbnRlbnQiOlsiLypcbiAqIENvcHlyaWdodCAoYykgMjAxNi0yMDE5IFZNd2FyZSwgSW5jLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICogVGhpcyBzb2Z0d2FyZSBpcyByZWxlYXNlZCB1bmRlciBNSVQgbGljZW5zZS5cbiAqIFRoZSBmdWxsIGxpY2Vuc2UgaW5mb3JtYXRpb24gY2FuIGJlIGZvdW5kIGluIExJQ0VOU0UgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgcHJvamVjdC5cbiAqXG4gKi9cblxuaW1wb3J0IHsgRGlyZWN0aXZlLCBFdmVudEVtaXR0ZXIsIEhvc3RMaXN0ZW5lciwgT25EZXN0cm95LCBPdXRwdXQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IENsclBvcG92ZXJUb2dnbGVTZXJ2aWNlIH0gZnJvbSAnLi9wcm92aWRlcnMvcG9wb3Zlci10b2dnbGUuc2VydmljZSc7XG5pbXBvcnQgeyBTdWJzY3JpcHRpb24gfSBmcm9tICdyeGpzJztcblxuQERpcmVjdGl2ZSh7XG4gIHNlbGVjdG9yOiAnW2NsclBvcG92ZXJPcGVuQ2xvc2VCdXR0b25dJyxcbiAgaG9zdDoge1xuICAgICdbY2xhc3MuY2xyLXNtYXJ0LW9wZW4tY2xvc2VdJzogJ3RydWUnLFxuICB9LFxufSlcbmV4cG9ydCBjbGFzcyBDbHJQb3BvdmVyT3BlbkNsb3NlQnV0dG9uIGltcGxlbWVudHMgT25EZXN0cm95IHtcbiAgcHJpdmF0ZSBzdWJzY3JpcHRpb25zOiBTdWJzY3JpcHRpb25bXSA9IFtdO1xuXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgc21hcnRPcGVuU2VydmljZTogQ2xyUG9wb3ZlclRvZ2dsZVNlcnZpY2UpIHtcbiAgICB0aGlzLnN1YnNjcmlwdGlvbnMucHVzaChcbiAgICAgIHRoaXMuc21hcnRPcGVuU2VydmljZS5vcGVuQ2hhbmdlLnN1YnNjcmliZShjaGFuZ2UgPT4ge1xuICAgICAgICB0aGlzLm9wZW5DbG9zZUNoYW5nZS5uZXh0KGNoYW5nZSk7XG4gICAgICB9KVxuICAgICk7XG4gIH1cblxuICBAT3V0cHV0KCdjbHJQb3BvdmVyT3BlbkNsb3NlQ2hhbmdlJykgb3BlbkNsb3NlQ2hhbmdlOiBFdmVudEVtaXR0ZXI8Ym9vbGVhbj4gPSBuZXcgRXZlbnRFbWl0dGVyPGJvb2xlYW4+KCk7XG5cbiAgQEhvc3RMaXN0ZW5lcignY2xpY2snLCBbJyRldmVudCddKVxuICBoYW5kbGVDbGljayhldmVudDogTW91c2VFdmVudCkge1xuICAgIHRoaXMuc21hcnRPcGVuU2VydmljZS50b2dnbGVXaXRoRXZlbnQoZXZlbnQpO1xuICB9XG5cbiAgbmdPbkRlc3Ryb3koKSB7XG4gICAgdGhpcy5zdWJzY3JpcHRpb25zLmZvckVhY2goc3ViID0+IHN1Yi51bnN1YnNjcmliZSgpKTtcbiAgfVxufVxuIl19