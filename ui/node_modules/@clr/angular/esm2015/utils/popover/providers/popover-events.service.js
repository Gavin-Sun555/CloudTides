/*
 * Copyright (c) 2016-2019 VMware, Inc. All Rights Reserved.
 * This software is released under MIT license.
 * The full license information can be found in LICENSE in the root directory of this project.
 *
 */
import { __decorate, __param } from "tslib";
import { ElementRef, Injectable, Renderer2, Inject, OnDestroy } from '@angular/core';
import { ClrPopoverToggleService } from './popover-toggle.service';
import { fromEvent } from 'rxjs';
import { filter } from 'rxjs/operators';
import { DOCUMENT } from '@angular/common';
// https://github.com/angular/angular/issues/20351#issuecomment-344009887
/** @dynamic */
import * as ɵngcc0 from '@angular/core';
let ClrPopoverEventsService = class ClrPopoverEventsService {
    constructor(renderer, smartOpenService, document) {
        this.renderer = renderer;
        this.smartOpenService = smartOpenService;
        this.document = document;
        this.outsideClickClose = true;
        this.scrollToClose = true;
        this.subscriptions = [];
        this.subscriptions.push(smartOpenService.openChange.subscribe(open => {
            if (open) {
                this.addEscapeListener();
                this.addClickListener();
                this.addScrollListener();
            }
            else {
                this.removeAllEventListeners();
            }
        }), smartOpenService.getEventChange().subscribe(event => {
            // Remember the event that was used to open the content
            this.ignoredEvent = event;
        }));
    }
    addScrollListener() {
        if (this.scrollToClose) {
            this.documentScroller = fromEvent(this.document, 'scroll', { capture: true });
            this.scrollSubscription = this.documentScroller
                .pipe(filter(this.testForSmartPopoverContentContainer))
                .subscribe(() => {
                this.smartOpenService.open = false;
                this.setAnchorFocus();
            });
        }
        else {
            // I think this is where dynamic re-positioning will be added
            // Instead of testing like we do in the close pipe below
            // we need to switch positioning to use an observable and then
            // debounce the scroll events to recalculate content position in a performant way
            // For now, ignore scrolling events.
            return;
        }
    }
    removeScrollListener() {
        if (this.documentScroller) {
            this.scrollSubscription.unsubscribe();
            delete this.documentScroller;
        }
    }
    testForSmartPopoverContentContainer(event) {
        // Filter for the documentScroller observable event targets
        let target = event.target;
        // Walk up the DOM tree until we get to the element that is a direct child of the body.
        while (target.classList && target.parentElement.localName !== 'body') {
            target = target.parentElement;
        }
        // Target is the child element of body where the scroll events originated.
        // Return false and prevent the popover content container from closing for any scroll events inside a popover
        // content container.
        if (target.classList) {
            // check scroll events to see if they are happening in popover content or elsewhere
            return target.classList.contains('clr-popover-content') ? false : true;
        }
        else {
            // prevents it from closing right after first opening
            return false;
        }
    }
    addClickListener() {
        if (this.outsideClickClose) {
            this.documentClickListener = this.renderer.listen(this.document, 'click', (event) => {
                if (event === this.ignoredEvent) {
                    // Here we ignore the opening click event (w/o this content opens and immediately closes.
                    delete this.ignoredEvent;
                }
                else {
                    this.smartOpenService.open = false;
                    // Rather than a complex change to the focus trap I put focus on the element that was clicked
                    const clickedElement = event.target;
                    clickedElement.focus();
                }
            });
        }
    }
    removeClickListener() {
        if (this.outsideClickClose) {
            delete this.ignoredEvent;
            if (this.documentClickListener) {
                this.documentClickListener();
                delete this.documentClickListener;
            }
        }
    }
    addEscapeListener() {
        this.escapeListener = this.renderer.listen(this.document, 'keydown.escape', event => {
            this.smartOpenService.open = false;
            this.setAnchorFocus();
        });
    }
    removeEscapeListener() {
        if (this.escapeListener) {
            this.escapeListener();
            delete this.escapeListener;
        }
    }
    set anchorButtonRef(ref) {
        this._anchorButtonRef = ref;
    }
    get anchorButtonRef() {
        return this._anchorButtonRef;
    }
    set closeButtonRef(ref) {
        this._closeButtonRef = ref;
    }
    get closeButtonRef() {
        return this._closeButtonRef;
    }
    setCloseFocus() {
        this._closeButtonRef.nativeElement.focus();
    }
    setAnchorFocus() {
        this.anchorButtonRef.nativeElement.focus();
    }
    set contentRef(host) {
        this._contentRef = host;
    }
    get contentRef() {
        return this._contentRef;
    }
    removeAllEventListeners() {
        this.removeScrollListener();
        this.removeClickListener();
        this.removeEscapeListener();
    }
    ngOnDestroy() {
        this.subscriptions.forEach(sub => sub.unsubscribe());
        this.removeAllEventListeners();
    }
};
ClrPopoverEventsService.ɵfac = function ClrPopoverEventsService_Factory(t) { return new (t || ClrPopoverEventsService)(ɵngcc0.ɵɵinject(ɵngcc0.Renderer2), ɵngcc0.ɵɵinject(ClrPopoverToggleService), ɵngcc0.ɵɵinject(DOCUMENT)); };
ClrPopoverEventsService.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: ClrPopoverEventsService, factory: ClrPopoverEventsService.ɵfac });
ClrPopoverEventsService.ctorParameters = () => [
    { type: Renderer2 },
    { type: ClrPopoverToggleService },
    { type: HTMLDocument, decorators: [{ type: Inject, args: [DOCUMENT,] }] }
];
ClrPopoverEventsService = __decorate([ __param(2, Inject(DOCUMENT))
], ClrPopoverEventsService);
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ClrPopoverEventsService, [{
        type: Injectable
    }], function () { return [{ type: ɵngcc0.Renderer2 }, { type: ClrPopoverToggleService }, { type: HTMLDocument, decorators: [{
                type: Inject,
                args: [DOCUMENT]
            }] }]; }, null); })();
export { ClrPopoverEventsService };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,