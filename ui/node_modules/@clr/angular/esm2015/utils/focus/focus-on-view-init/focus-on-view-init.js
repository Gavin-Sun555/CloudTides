/*
 * Copyright (c) 2016-2019 VMware, Inc. All Rights Reserved.
 * This software is released under MIT license.
 * The full license information can be found in LICENSE in the root directory of this project.
 */
import { __decorate, __param } from "tslib";
import { DOCUMENT, isPlatformBrowser } from '@angular/common';
import { AfterViewInit, Directive, ElementRef, HostListener, Inject, Input, PLATFORM_ID, Renderer2, } from '@angular/core';
import { FOCUS_ON_VIEW_INIT } from './focus-on-view-init.provider';
/*  This directive is for guiding the document focus to the newly added content when its view is initialized
    so that assistive technologies can read its content. */
import * as ɵngcc0 from '@angular/core';
let ClrFocusOnViewInit = class ClrFocusOnViewInit {
    constructor(el, platformId, focusOnViewInit, document, renderer) {
        this.el = el;
        this.platformId = platformId;
        this.focusOnViewInit = focusOnViewInit;
        this.renderer = renderer;
        this.directFocus = true; // true if the element gets focused without need to set tabindex;
        this._isEnabled = this.focusOnViewInit;
        // Angular compiler doesn't understand the type Document
        // when working out the metadata for injectable parameters,
        // even though it understands the injection token DOCUMENT
        // https://github.com/angular/angular/issues/20351
        this.document = document;
    }
    onFocusout() {
        if (!this.directFocus) {
            // manually set attributes and styles should be removed
            this.renderer.removeAttribute(this.el.nativeElement, 'tabindex');
            this.renderer.setStyle(this.el.nativeElement, 'outline', null);
        }
    }
    set isEnabled(value) {
        if (this.focusOnViewInit && typeof value === 'boolean') {
            this._isEnabled = value;
        }
    }
    ngAfterViewInit() {
        this.focus();
    }
    focus() {
        if (!isPlatformBrowser(this.platformId)) {
            return;
        }
        if (!this._isEnabled) {
            return;
        }
        if (this.document && this.document.activeElement !== this.el.nativeElement) {
            this.el.nativeElement.focus();
            if (this.document.activeElement !== this.el.nativeElement) {
                // if it's not directly focused now, it means it was a non-interactive element
                // so we need to give it a tabindex.
                this.directFocus = false;
                this.renderer.setAttribute(this.el.nativeElement, 'tabindex', '-1');
                this.renderer.setStyle(this.el.nativeElement, 'outline', 'none');
                this.el.nativeElement.focus();
            }
        }
    }
};
ClrFocusOnViewInit.ɵfac = function ClrFocusOnViewInit_Factory(t) { return new (t || ClrFocusOnViewInit)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(PLATFORM_ID), ɵngcc0.ɵɵdirectiveInject(FOCUS_ON_VIEW_INIT), ɵngcc0.ɵɵdirectiveInject(DOCUMENT), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Renderer2)); };
ClrFocusOnViewInit.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: ClrFocusOnViewInit, selectors: [["", "clrFocusOnViewInit", ""]], hostBindings: function ClrFocusOnViewInit_HostBindings(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵlistener("focusout", function ClrFocusOnViewInit_focusout_HostBindingHandler() { return ctx.onFocusout(); });
    } }, inputs: { isEnabled: ["clrFocusOnViewInit", "isEnabled"] } });
ClrFocusOnViewInit.ctorParameters = () => [
    { type: ElementRef },
    { type: Object, decorators: [{ type: Inject, args: [PLATFORM_ID,] }] },
    { type: Boolean, decorators: [{ type: Inject, args: [FOCUS_ON_VIEW_INIT,] }] },
    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] },
    { type: Renderer2 }
];
__decorate([
    HostListener('focusout')
], ClrFocusOnViewInit.prototype, "onFocusout", null);
__decorate([
    Input('clrFocusOnViewInit')
], ClrFocusOnViewInit.prototype, "isEnabled", null);
ClrFocusOnViewInit = __decorate([ __param(1, Inject(PLATFORM_ID)),
    __param(2, Inject(FOCUS_ON_VIEW_INIT)),
    __param(3, Inject(DOCUMENT))
], ClrFocusOnViewInit);
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ClrFocusOnViewInit, [{
        type: Directive,
        args: [{
                selector: '[clrFocusOnViewInit]'
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: Object, decorators: [{
                type: Inject,
                args: [PLATFORM_ID]
            }] }, { type: Boolean, decorators: [{
                type: Inject,
                args: [FOCUS_ON_VIEW_INIT]
            }] }, { type: undefined, decorators: [{
                type: Inject,
                args: [DOCUMENT]
            }] }, { type: ɵngcc0.Renderer2 }]; }, { onFocusout: [{
            type: HostListener,
            args: ['focusout']
        }], isEnabled: [{
            type: Input,
            args: ['clrFocusOnViewInit']
        }] }); })();
export { ClrFocusOnViewInit };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZm9jdXMtb24tdmlldy1pbml0LmpzIiwic291cmNlcyI6WyJuZzovQGNsci9hbmd1bGFyL3V0aWxzL2ZvY3VzL2ZvY3VzLW9uLXZpZXctaW5pdC9mb2N1cy1vbi12aWV3LWluaXQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQSxPQUFPLEVBQUUsUUFBUSxFQUFFLGlCQUFpQixFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFDOUQsT0FBTyxFQUNMLGFBQWEsRUFDYixTQUFTLEVBQ1QsVUFBVSxFQUNWLFlBQVksRUFDWixNQUFNLEVBQ04sS0FBSyxFQUNMLFdBQVcsRUFDWCxTQUFTLEdBQ1YsTUFBTSxlQUFlLENBQUM7QUFDdkIsT0FBTyxFQUFFLGtCQUFrQixFQUFFLE1BQU0sK0JBQStCLENBQUM7QUFFbkU7QUFBNkcsMkRBQ2xEOztBQUkzRCxJQUFhLGtCQUFrQixHQUEvQixNQUFhLGtCQUFrQjtBQUFHLElBQ2hDLFlBQ1UsRUFBYyxFQUNPLFVBQWtCLEVBQ1gsZUFBd0IsRUFDMUMsUUFBYSxFQUN2QixRQUFtQjtBQUM1QixRQUxTLE9BQUUsR0FBRixFQUFFLENBQVk7QUFBQyxRQUNNLGVBQVUsR0FBVixVQUFVLENBQVE7QUFBQyxRQUNaLG9CQUFlLEdBQWYsZUFBZSxDQUFTO0FBQUMsUUFFckQsYUFBUSxHQUFSLFFBQVEsQ0FBVztBQUMvQixRQVdVLGdCQUFXLEdBQUcsSUFBSSxDQUFDLENBQUMsaUVBQWlFO0FBQy9GLFFBWEksSUFBSSxDQUFDLFVBQVUsR0FBRyxJQUFJLENBQUMsZUFBZSxDQUFDO0FBQzNDLFFBQ0ksd0RBQXdEO0FBQzVELFFBQUksMkRBQTJEO0FBQy9ELFFBQUksMERBQTBEO0FBQzlELFFBQUksa0RBQWtEO0FBQ3RELFFBQUksSUFBSSxDQUFDLFFBQVEsR0FBRyxRQUFRLENBQUM7QUFDN0IsSUFBRSxDQUFDO0FBQ0gsSUFLRSxVQUFVO0FBQ1osUUFBSSxJQUFJLENBQUMs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YXJlLCBJbmMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKiBUaGlzIHNvZnR3YXJlIGlzIHJlbGVhc2VkIHVuZGVyIE1JVCBsaWNlbnNlLlxuICogVGhlIGZ1bGwgbGljZW5zZSBpbmZvcm1hdGlvbiBjYW4gYmUgZm91bmQgaW4gTElDRU5TRSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBwcm9qZWN0LlxuICovXG5cbmltcG9ydCB7IERPQ1VNRU5ULCBpc1BsYXRmb3JtQnJvd3NlciB9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbic7XG5pbXBvcnQge1xuICBBZnRlclZpZXdJbml0LFxuICBEaXJlY3RpdmUsXG4gIEVsZW1lbnRSZWYsXG4gIEhvc3RMaXN0ZW5lcixcbiAgSW5qZWN0LFxuICBJbnB1dCxcbiAgUExBVEZPUk1fSUQsXG4gIFJlbmRlcmVyMixcbn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBGT0NVU19PTl9WSUVXX0lOSVQgfSBmcm9tICcuL2ZvY3VzLW9uLXZpZXctaW5pdC5wcm92aWRlcic7XG5cbi8qICBUaGlzIGRpcmVjdGl2ZSBpcyBmb3IgZ3VpZGluZyB0aGUgZG9jdW1lbnQgZm9jdXMgdG8gdGhlIG5ld2x5IGFkZGVkIGNvbnRlbnQgd2hlbiBpdHMgdmlldyBpcyBpbml0aWFsaXplZCBcbiAgICBzbyB0aGF0IGFzc2lzdGl2ZSB0ZWNobm9sb2dpZXMgY2FuIHJlYWQgaXRzIGNvbnRlbnQuICovXG5ARGlyZWN0aXZlKHtcbiAgc2VsZWN0b3I6ICdbY2xyRm9jdXNPblZpZXdJbml0XScsXG59KVxuZXhwb3J0IGNsYXNzIENsckZvY3VzT25WaWV3SW5pdCBpbXBsZW1lbnRzIEFmdGVyVmlld0luaXQge1xuICBjb25zdHJ1Y3RvcihcbiAgICBwcml2YXRlIGVsOiBFbGVtZW50UmVmLFxuICAgIEBJbmplY3QoUExBVEZPUk1fSUQpIHByaXZhdGUgcGxhdGZvcm1JZDogT2JqZWN0LFxuICAgIEBJbmplY3QoRk9DVVNfT05fVklFV19JTklUKSBwcml2YXRlIGZvY3VzT25WaWV3SW5pdDogYm9vbGVhbixcbiAgICBASW5qZWN0KERPQ1VNRU5UKSBkb2N1bWVudDogYW55LFxuICAgIHByaXZhdGUgcmVuZGVyZXI6IFJlbmRlcmVyMlxuICApIHtcbiAgICB0aGlzLl9pc0VuYWJsZWQgPSB0aGlzLmZvY3VzT25WaWV3SW5pdDtcblxuICAgIC8vIEFuZ3VsYXIgY29tcGlsZXIgZG9lc24ndCB1bmRlcnN0YW5kIHRoZSB0eXBlIERvY3VtZW50XG4gICAgLy8gd2hlbiB3b3JraW5nIG91dCB0aGUgbWV0YWRhdGEgZm9yIGluamVjdGFibGUgcGFyYW1ldGVycyxcbiAgICAvLyBldmVuIHRob3VnaCBpdCB1bmRlcnN0YW5kcyB0aGUgaW5qZWN0aW9uIHRva2VuIERPQ1VNRU5UXG4gICAgLy8gaHR0cHM6Ly9naXRodWIuY29tL2FuZ3VsYXIvYW5ndWxhci9pc3N1ZXMvMjAzNTFcbiAgICB0aGlzLmRvY3VtZW50ID0gZG9jdW1lbnQ7XG4gIH1cblxuICBwcml2YXRlIGRvY3VtZW50OiBEb2N1bWVudDtcbiAgcHJpdmF0ZSBkaXJlY3RGb2N1cyA9IHRydWU7IC8vIHRydWUgaWYgdGhlIGVsZW1lbnQgZ2V0cyBmb2N1c2VkIHdpdGhvdXQgbmVlZCB0byBzZXQgdGFiaW5kZXg7XG5cbiAgQEhvc3RMaXN0ZW5lcignZm9jdXNvdXQnKVxuICBvbkZvY3Vzb3V0KCkge1xuICAgIGlmICghdGhpcy5kaXJlY3RGb2N1cykge1xuICAgICAgLy8gbWFudWFsbHkgc2V0IGF0dHJpYnV0ZXMgYW5kIHN0eWxlcyBzaG91bGQgYmUgcmVtb3ZlZFxuICAgICAgdGhpcy5yZW5kZXJlci5yZW1vdmVBdHRyaWJ1dGUodGhpcy5lbC5uYXRpdmVFbGVtZW50LCAndGFiaW5kZXgnKTtcbiAgICAgIHRoaXMucmVuZGVyZXIuc2V0U3R5bGUodGhpcy5lbC5uYXRpdmVFbGVtZW50LCAnb3V0bGluZScsIG51bGwpO1xuICAgIH1cbiAgfVxuXG4gIHByaXZhdGUgX2lzRW5hYmxlZDogYm9vbGVhbjtcbiAgQElucHV0KCdjbHJGb2N1c09uVmlld0luaXQnKVxuICBzZXQgaXNFbmFibGVkKHZhbHVlOiBib29sZWFuKSB7XG4gICAgaWYgKHRoaXMuZm9jdXNPblZpZXdJbml0ICYmIHR5cGVvZiB2YWx1ZSA9PT0gJ2Jvb2xlYW4nKSB7XG4gICAgICB0aGlzLl9pc0VuYWJsZWQgPSB2YWx1ZTtcbiAgICB9XG4gIH1cblxuICBuZ0FmdGVyVmlld0luaXQoKSB7XG4gICAgdGhpcy5mb2N1cygpO1xuICB9XG5cbiAgcHJpdmF0ZSBmb2N1cygpIHtcbiAgICBpZiAoIWlzUGxhdGZvcm1Ccm93c2VyKHRoaXMucGxhdGZvcm1JZCkpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgaWYgKCF0aGlzLl9pc0VuYWJsZWQpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgaWYgKHRoaXMuZG9jdW1lbnQgJiYgdGhpcy5kb2N1bWVudC5hY3RpdmVFbGVtZW50ICE9PSB0aGlzLmVsLm5hdGl2ZUVsZW1lbnQpIHtcbiAgICAgIHRoaXMuZWwubmF0aXZlRWxlbWVudC5mb2N1cygpO1xuICAgICAgaWYgKHRoaXMuZG9jdW1lbnQuYWN0aXZlRWxlbWVudCAhPT0gdGhpcy5lbC5uYXRpdmVFbGVtZW50KSB7XG4gICAgICAgIC8vIGlmIGl0J3Mgbm90IGRpcmVjdGx5IGZvY3VzZWQgbm93LCBpdCBtZWFucyBpdCB3YXMgYSBub24taW50ZXJhY3RpdmUgZWxlbWVudFxuICAgICAgICAvLyBzbyB3ZSBuZWVkIHRvIGdpdmUgaXQgYSB0YWJpbmRleC5cbiAgICAgICAgdGhpcy5kaXJlY3RGb2N1cyA9IGZhbHNlO1xuICAgICAgICB0aGlzLnJlbmRlcmVyLnNldEF0dHJpYnV0ZSh0aGlzLmVsLm5hdGl2ZUVsZW1lbnQsICd0YWJpbmRleCcsICctMScpO1xuICAgICAgICB0aGlzLnJlbmRlcmVyLnNldFN0eWxlKHRoaXMuZWwubmF0aXZlRWxlbWVudCwgJ291dGxpbmUnLCAnbm9uZScpO1xuICAgICAgICB0aGlzLmVsLm5hdGl2ZUVsZW1lbnQuZm9jdXMoKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cbiJdfQ==