/*
 * Copyright (c) 2016-2019 VMware, Inc. All Rights Reserved.
 * This software is released under MIT license.
 * The full license information can be found in LICENSE in the root directory of this project.
 */
import { __decorate } from "tslib";
import { Component, ElementRef, HostBinding, HostListener, Input } from '@angular/core';
import { animate, style, transition, trigger } from '@angular/animations';
import { DomAdapter } from '../../dom-adapter/dom-adapter';
import * as ɵngcc0 from '@angular/core';

const _c0 = ["*"];
let ClrExpandableAnimation = class ClrExpandableAnimation {
    constructor(element, domAdapter) {
        this.element = element;
        this.domAdapter = domAdapter;
        this.startHeight = 0;
    }
    get expandAnimation() {
        return { value: this.clrExpandTrigger, params: { startHeight: this.startHeight } };
    }
    animationDone() {
        // A "safe" auto-update of the height ensuring basic OOTB user experience .
        // Prone to small jumps in initial animation height if data was changed in the meantime, window was resized, etc.
        // For optimal behavior call manually updateStartHeight() from the parent component before initiating the update.
        this.updateStartHeight();
    }
    updateStartHeight() {
        this.startHeight = this.domAdapter.computedHeight(this.element.nativeElement) || 0;
    }
};
ClrExpandableAnimation.ɵfac = function ClrExpandableAnimation_Factory(t) { return new (t || ClrExpandableAnimation)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(DomAdapter)); };
ClrExpandableAnimation.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: ClrExpandableAnimation, selectors: [["clr-expandable-animation"]], hostVars: 1, hostBindings: function ClrExpandableAnimation_HostBindings(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵcomponentHostSyntheticListener("@expandAnimation.done", function ClrExpandableAnimation_animation_expandAnimation_done_HostBindingHandler() { return ctx.animationDone(); });
    } if (rf & 2) {
        ɵngcc0.ɵɵupdateSyntheticHostBinding("@expandAnimation", ctx.expandAnimation);
    } }, inputs: { clrExpandTrigger: "clrExpandTrigger" }, features: [ɵngcc0.ɵɵProvidersFeature([DomAdapter])], ngContentSelectors: _c0, decls: 1, vars: 0, template: function ClrExpandableAnimation_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵprojection(0);
    } }, styles: ["[_nghost-%COMP%] {\n      display: block;\n    }"], data: { animation: [
            trigger('expandAnimation', [
                transition('true <=> false', [
                    style({ height: '{{startHeight}}px', overflow: 'hidden' }),
                    animate('0.2s ease-in-out', style({ height: '*' })),
                ]),
            ]),
        ] } });
ClrExpandableAnimation.ctorParameters = () => [
    { type: ElementRef },
    { type: DomAdapter }
];
__decorate([
    Input()
], ClrExpandableAnimation.prototype, "clrExpandTrigger", void 0);
__decorate([
    HostBinding('@expandAnimation')
], ClrExpandableAnimation.prototype, "expandAnimation", null);
__decorate([
    HostListener('@expandAnimation.done')
], ClrExpandableAnimation.prototype, "animationDone", null);
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ClrExpandableAnimation, [{
        type: Component,
        args: [{
                selector: 'clr-expandable-animation',
                template: `
    <ng-content></ng-content>
  `,
                animations: [
                    trigger('expandAnimation', [
                        transition('true <=> false', [
                            style({ height: '{{startHeight}}px', overflow: 'hidden' }),
                            animate('0.2s ease-in-out', style({ height: '*' })),
                        ]),
                    ]),
                ],
                providers: [DomAdapter],
                styles: [`
    :host {
      display: block;
    }
  `]
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: DomAdapter }]; }, { expandAnimation: [{
            type: HostBinding,
            args: ['@expandAnimation']
        }], animationDone: [{
            type: HostListener,
            args: ['@expandAnimation.done']
        }], clrExpandTrigger: [{
            type: Input
        }] }); })();
export { ClrExpandableAnimation };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXhwYW5kYWJsZS1hbmltYXRpb24uanMiLCJzb3VyY2VzIjpbIm5nOi9AY2xyL2FuZ3VsYXIvdXRpbHMvYW5pbWF0aW9ucy9leHBhbmRhYmxlLWFuaW1hdGlvbi9leHBhbmRhYmxlLWFuaW1hdGlvbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBLE9BQU8sRUFBRSxTQUFTLEVBQUUsVUFBVSxFQUFFLFdBQVcsRUFBRSxZQUFZLEVBQUUsS0FBSyxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBRXhGLE9BQU8sRUFBRSxPQUFPLEVBQUUsS0FBSyxFQUFFLFVBQVUsRUFBRSxPQUFPLEVBQUUsTUFBTSxxQkFBcUIsQ0FBQztBQUMxRSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sK0JBQStCLENBQUM7Ozs7QUF3QjNELElBQWEsc0JBQXNCLEdBQW5DLE1BQWEsc0JBQXNCO0FBQ25DLElBSUUsWUFBb0IsT0FBbUIsRUFBVSxVQUFzQjtBQUFJLFFBQXZELFlBQU8sR0FBUCxPQUFPLENBQVk7QUFBQyxRQUFTLGVBQVUsR0FBVixVQUFVLENBQVk7QUFBQyxRQUZ4RSxnQkFBVyxHQUFXLENBQUMsQ0FBQztBQUMxQixJQUM0RSxDQUFDO0FBQzdFLElBRUUsSUFBSSxlQUFlO0FBQ3JCLFFBQUksT0FBTyxFQUFFLEtBQUssRUFBRSxJQUFJLENBQUMsZ0JBQWdCLEVBQUUsTUFBTSxFQUFFLEVBQUUsV0FBVyxFQUFFLElBQUksQ0FBQyxXQUFXLEVBQUUsRUFBRSxDQUFDO0FBQ3ZGLElBQUUsQ0FBQztBQUNILElBRUUsYUFBYTtBQUNmLFFBQUksMkVBQTJFO0FBQy9FLFFBQUksaUhBQWlIO0FBQ3JILFFBQUksaUhBQWlIO0FBQ3JILFFBQUksSUFBSSxDQUFDLGlCQUFpQixFQUFFLENBQUM7QUFDN0IsSUFBRSxDQUFDO0FBQ0gsSUFDRSxpQkFBaUI7QUFDbkIsUUFBSSxJQUFJLENBQUMsV0FBVyxHQUFHLElBQUksQ0FBQyxVQUFVLENBQUMsY0FBYyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsYUFBYSxDQUFDLElBQUksQ0FBQyxDQUFDO0FBQ3ZGLElBQUUsQ0FBQztBQUNILENBQUM7Ozs7Ozs7Ozs7Ozs7Ozs7ZUFBQTtBQUNEO0FBQWdELFlBbkJqQixVQUFVO0FBQUksWUFBa0IsVUFBVTtBQUFHO0FBSmpFO0FBQWEsSUFBckIsS0FBSyxFQUFFO0FBQUMsZ0VBQXNCO0FBTy9CO0FBQWEsSUFEWixXQUFXLENBQUMsa0JBQWtCLENBQUM7QUFDbEMsNkRBRUc7QUFHRDtBQUFhLElBRFosWUFBWSxDQUFDLHVCQUF1QixDQUFDO0FBQ3hDLDJEQUtHO0FBbEJVLHNCQUFzQixvQkF0QmxDLFNBQVMsQ0FBQyxVQUNULFFBQVEsRUFBRTtpQkFBMEI7RUFDcEMsUUFBUSxFQUFFOzhCQUVULFVBUUQsVUFBVSxFQUFFO1lBQ1YsT0FBTyxDQUFDO1NBQWlCLEVBQUUsa0JBQ3pCOztJQUFVLENBQUMsZ0JBQWdCLEVBQUU7ZUFDM0IsS0FBSyxDQUFDLEVBQUUsTUFBTSxFQUFFO0NBQW1CLEVBQUUsUUFBUSxFQUFFLFFBQVEsRUFBRSxDQUFDLHNCQUMxRCxPQUFPLENBQUM7aUJBQWtCLEVBQUUsS0FBSyxDQUFDLEVBQUUsTUFBTSxFQUFFLEdBQUcsRUFBRSxDQUFDLENBQUMsbUJBQ3BELENBQUMsZUFDSCxDQUFDO0NBQ0gsVUFDRCxTQUFTLEVBQUUsQ0FBQyxVQUFVLENBQUMsbUJBZHJCO2lCQUlELE9BV0YsQ0FBQztDQUNXLHNCQUFzQjtBQXVCbEM7Ozs7Ozs7Ozs7Ozs7Ozs7b0JBQ0Q7QUFBQyxTQXhCWSxzQkFBc0I7QUFDbEMiLCJzb3VyY2VzQ29udGVudCI6WyIvKlxuICogQ29weXJpZ2h0IChjKSAyMDE2LTIwMTkgVk13YXJlLCBJbmMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKiBUaGlzIHNvZnR3YXJlIGlzIHJlbGVhc2VkIHVuZGVyIE1JVCBsaWNlbnNlLlxuICogVGhlIGZ1bGwgbGljZW5zZSBpbmZvcm1hdGlvbiBjYW4gYmUgZm91bmQgaW4gTElDRU5TRSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBwcm9qZWN0LlxuICovXG5cbmltcG9ydCB7IENvbXBvbmVudCwgRWxlbWVudFJlZiwgSG9zdEJpbmRpbmcsIEhvc3RMaXN0ZW5lciwgSW5wdXQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuaW1wb3J0IHsgYW5pbWF0ZSwgc3R5bGUsIHRyYW5zaXRpb24sIHRyaWdnZXIgfSBmcm9tICdAYW5ndWxhci9hbmltYXRpb25zJztcbmltcG9ydCB7IERvbUFkYXB0ZXIgfSBmcm9tICcuLi8uLi9kb20tYWRhcHRlci9kb20tYWRhcHRlcic7XG5cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ2Nsci1leHBhbmRhYmxlLWFuaW1hdGlvbicsXG4gIHRlbXBsYXRlOiBgXG4gICAgPG5nLWNvbnRlbnQ+PC9uZy1jb250ZW50PlxuICBgLFxuICBzdHlsZXM6IFtcbiAgICBgXG4gICAgOmhvc3Qge1xuICAgICAgZGlzcGxheTogYmxvY2s7XG4gICAgfVxuICBgLFxuICBdLFxuICBhbmltYXRpb25zOiBbXG4gICAgdHJpZ2dlcignZXhwYW5kQW5pbWF0aW9uJywgW1xuICAgICAgdHJhbnNpdGlvbigndHJ1ZSA8PT4gZmFsc2UnLCBbXG4gICAgICAgIHN0eWxlKHsgaGVpZ2h0OiAne3tzdGFydEhlaWdodH19cHgnLCBvdmVyZmxvdzogJ2hpZGRlbicgfSksXG4gICAgICAgIGFuaW1hdGUoJzAuMnMgZWFzZS1pbi1vdXQnLCBzdHlsZSh7IGhlaWdodDogJyonIH0pKSxcbiAgICAgIF0pLFxuICAgIF0pLFxuICBdLFxuICBwcm92aWRlcnM6IFtEb21BZGFwdGVyXSxcbn0pXG5leHBvcnQgY2xhc3MgQ2xyRXhwYW5kYWJsZUFuaW1hdGlvbiB7XG4gIEBJbnB1dCgpIGNsckV4cGFuZFRyaWdnZXI6IGFueTtcblxuICBzdGFydEhlaWdodDogbnVtYmVyID0gMDtcblxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIGVsZW1lbnQ6IEVsZW1lbnRSZWYsIHByaXZhdGUgZG9tQWRhcHRlcjogRG9tQWRhcHRlcikge31cblxuICBASG9zdEJpbmRpbmcoJ0BleHBhbmRBbmltYXRpb24nKVxuICBnZXQgZXhwYW5kQW5pbWF0aW9uKCkge1xuICAgIHJldHVybiB7IHZhbHVlOiB0aGlzLmNsckV4cGFuZFRyaWdnZXIsIHBhcmFtczogeyBzdGFydEhlaWdodDogdGhpcy5zdGFydEhlaWdodCB9IH07XG4gIH1cblxuICBASG9zdExpc3RlbmVyKCdAZXhwYW5kQW5pbWF0aW9uLmRvbmUnKVxuICBhbmltYXRpb25Eb25lKCkge1xuICAgIC8vIEEgXCJzYWZlXCIgYXV0by11cGRhdGUgb2YgdGhlIGhlaWdodCBlbnN1cmluZyBiYXNpYyBPT1RCIHVzZXIgZXhwZXJpZW5jZSAuXG4gICAgLy8gUHJvbmUgdG8gc21hbGwganVtcHMgaW4gaW5pdGlhbCBhbmltYXRpb24gaGVpZ2h0IGlmIGRhdGEgd2FzIGNoYW5nZWQgaW4gdGhlIG1lYW50aW1lLCB3aW5kb3cgd2FzIHJlc2l6ZWQsIGV0Yy5cbiAgICAvLyBGb3Igb3B0aW1hbCBiZWhhdmlvciBjYWxsIG1hbnVhbGx5IHVwZGF0ZVN0YXJ0SGVpZ2h0KCkgZnJvbSB0aGUgcGFyZW50IGNvbXBvbmVudCBiZWZvcmUgaW5pdGlhdGluZyB0aGUgdXBkYXRlLlxuICAgIHRoaXMudXBkYXRlU3RhcnRIZWlnaHQoKTtcbiAgfVxuXG4gIHVwZGF0ZVN0YXJ0SGVpZ2h0KCkge1xuICAgIHRoaXMuc3RhcnRIZWlnaHQgPSB0aGlzLmRvbUFkYXB0ZXIuY29tcHV0ZWRIZWlnaHQodGhpcy5lbGVtZW50Lm5hdGl2ZUVsZW1lbnQpIHx8IDA7XG4gIH1cbn1cbiJdfQ==