import { __decorate } from "tslib";
/*
 * Copyright (c) 2016-2018 VMware, Inc. All Rights Reserved.
 * This software is released under MIT license.
 * The full license information can be found in LICENSE in the root directory of this project.
 */
import { Injectable } from '@angular/core';
import { DomAdapter } from '../../dom-adapter/dom-adapter';
// This service is used to capture the state of clrDraggable element
// at a certain event and passes it to clrDraggableGhost component.
import * as ɵngcc0 from '@angular/core';
let DraggableSnapshotService = class DraggableSnapshotService {
    constructor(domAdapter) {
        this.domAdapter = domAdapter;
    }
    capture(el, event) {
        this.draggableElClientRect = this.domAdapter.clientRect(el);
        this.snapshotDragEvent = event;
    }
    discard() {
        delete this.draggableElClientRect;
        delete this.snapshotDragEvent;
    }
    get hasDraggableState() {
        return !!this.snapshotDragEvent && !!this.draggableElClientRect;
    }
    get clientRect() {
        return this.draggableElClientRect;
    }
    get dragEvent() {
        return this.snapshotDragEvent;
    }
};
DraggableSnapshotService.ɵfac = function DraggableSnapshotService_Factory(t) { return new (t || DraggableSnapshotService)(ɵngcc0.ɵɵinject(DomAdapter)); };
DraggableSnapshotService.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: DraggableSnapshotService, factory: DraggableSnapshotService.ɵfac });
DraggableSnapshotService.ctorParameters = () => [
    { type: DomAdapter }
];
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(DraggableSnapshotService, [{
        type: Injectable
    }], function () { return [{ type: DomAdapter }]; }, null); })();
export { DraggableSnapshotService };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZHJhZ2dhYmxlLXNuYXBzaG90LnNlcnZpY2UuanMiLCJzb3VyY2VzIjpbIm5nOi9AY2xyL2FuZ3VsYXIvdXRpbHMvZHJhZy1hbmQtZHJvcC9wcm92aWRlcnMvZHJhZ2dhYmxlLXNuYXBzaG90LnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNILE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDM0MsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLCtCQUErQixDQUFDO0FBRzNELG9FQUFvRTtBQUNwRSxtRUFBbUU7O0FBRW5FLElBQWEsd0JBQXdCLEdBQXJDLE1BQWEsd0JBQXdCO0FBQUcsSUFDdEMsWUFBb0IsVUFBc0I7QUFBSSxRQUExQixlQUFVLEdBQVYsVUFBVSxDQUFZO0FBQUMsSUFBRSxDQUFDO0FBQ2hELElBSVMsT0FBTyxDQUFDLEVBQVEsRUFBRSxLQUE0QjtBQUFJLFFBQ3ZELElBQUksQ0FBQyxxQkFBcUIsR0FBRyxJQUFJLENBQUMsVUFBVSxDQUFDLFVBQVUsQ0FBQyxFQUFFLENBQUMsQ0FBQztBQUNoRSxRQUFJLElBQUksQ0FBQyxpQkFBaUIsR0FBRyxLQUFLLENBQUM7QUFDbkMsSUFBRSxDQUFDO0FBQ0gsSUFBUyxPQUFPO0FBQUssUUFDakIsT0FBTyxJQUFJLENBQUMscUJBQXFCLENBQUM7QUFDdEMsUUFBSSxPQUFPLElBQUksQ0FBQyxpQkFBaUIsQ0FBQztBQUNsQyxJQUFFLENBQUM7QUFDSCxJQUFFLElBQUksaUJBQWlCO0FBQUssUUFDeEIsT0FBTyxDQUFDLENBQUMsSUFBSSxDQUFDLGlCQUFpQixJQUFJLENBQUMsQ0FBQyxJQUFJLENBQUMscUJBQXFCLENBQUM7QUFDcEUsSUFBRSxDQUFDO0FBQ0gsSUFBRSxJQUFJLFVBQVU7QUFBSyxRQUNqQixPQUFPLElBQUksQ0FBQyxxQkFBcUIsQ0FBQztBQUN0QyxJQUFFLENBQUM7QUFDSCxJQUFFLElBQUksU0FBUztBQUFLLFFBQ2hCLE9BQU8sSUFBSSxDQUFDLGlCQUFpQixDQUFDO0FBQ2xDLElBQUUsQ0FBQztBQUNILENBQUM7O3dJQUFBO0FBQ0Q7QUFBa0QsWUF2QmhCLFVBQVU7QUFBRztBQURsQyx3QkFBd0Isb0JBRHBDLFVBQVUsRUFBRSxJQUNBO0NBQXdCLENBdUJwQztvRUFDRDtBQUFDLFNBeEJZLHdCQUF3QjtBQUFJIiwic291cmNlc0NvbnRlbnQiOlsiLypcbiAqIENvcHlyaWdodCAoYykgMjAxNi0yMDE4IFZNd2FyZSwgSW5jLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICogVGhpcyBzb2Z0d2FyZSBpcyByZWxlYXNlZCB1bmRlciBNSVQgbGljZW5zZS5cbiAqIFRoZSBmdWxsIGxpY2Vuc2UgaW5mb3JtYXRpb24gY2FuIGJlIGZvdW5kIGluIExJQ0VOU0UgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgcHJvamVjdC5cbiAqL1xuaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgRG9tQWRhcHRlciB9IGZyb20gJy4uLy4uL2RvbS1hZGFwdGVyL2RvbS1hZGFwdGVyJztcbmltcG9ydCB7IERyYWdFdmVudEludGVyZmFjZSB9IGZyb20gJy4uL2ludGVyZmFjZXMvZHJhZy1ldmVudC5pbnRlcmZhY2UnO1xuXG4vLyBUaGlzIHNlcnZpY2UgaXMgdXNlZCB0byBjYXB0dXJlIHRoZSBzdGF0ZSBvZiBjbHJEcmFnZ2FibGUgZWxlbWVudFxuLy8gYXQgYSBjZXJ0YWluIGV2ZW50IGFuZCBwYXNzZXMgaXQgdG8gY2xyRHJhZ2dhYmxlR2hvc3QgY29tcG9uZW50LlxuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIERyYWdnYWJsZVNuYXBzaG90U2VydmljZTxUPiB7XG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgZG9tQWRhcHRlcjogRG9tQWRhcHRlcikge31cblxuICBwcml2YXRlIGRyYWdnYWJsZUVsQ2xpZW50UmVjdDogQ2xpZW50UmVjdDtcbiAgcHJpdmF0ZSBzbmFwc2hvdERyYWdFdmVudDogRHJhZ0V2ZW50SW50ZXJmYWNlPFQ+O1xuXG4gIHB1YmxpYyBjYXB0dXJlKGVsOiBOb2RlLCBldmVudDogRHJhZ0V2ZW50SW50ZXJmYWNlPFQ+KTogdm9pZCB7XG4gICAgdGhpcy5kcmFnZ2FibGVFbENsaWVudFJlY3QgPSB0aGlzLmRvbUFkYXB0ZXIuY2xpZW50UmVjdChlbCk7XG4gICAgdGhpcy5zbmFwc2hvdERyYWdFdmVudCA9IGV2ZW50O1xuICB9XG4gIHB1YmxpYyBkaXNjYXJkKCk6IHZvaWQge1xuICAgIGRlbGV0ZSB0aGlzLmRyYWdnYWJsZUVsQ2xpZW50UmVjdDtcbiAgICBkZWxldGUgdGhpcy5zbmFwc2hvdERyYWdFdmVudDtcbiAgfVxuICBnZXQgaGFzRHJhZ2dhYmxlU3RhdGUoKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuICEhdGhpcy5zbmFwc2hvdERyYWdFdmVudCAmJiAhIXRoaXMuZHJhZ2dhYmxlRWxDbGllbnRSZWN0O1xuICB9XG4gIGdldCBjbGllbnRSZWN0KCk6IENsaWVudFJlY3Qge1xuICAgIHJldHVybiB0aGlzLmRyYWdnYWJsZUVsQ2xpZW50UmVjdDtcbiAgfVxuICBnZXQgZHJhZ0V2ZW50KCk6IERyYWdFdmVudEludGVyZmFjZTxUPiB7XG4gICAgcmV0dXJuIHRoaXMuc25hcHNob3REcmFnRXZlbnQ7XG4gIH1cbn1cbiJdfQ==