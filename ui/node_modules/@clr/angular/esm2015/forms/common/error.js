/**
 * Copyright (c) 2016-2020 VMware, Inc. All Rights Reserved.
 * This software is released under MIT license.
 * The full license information can be found in LICENSE in the root directory of this project.
 */
import { __decorate, __param } from "tslib";
import { Component, Optional, ElementRef, AfterViewInit } from '@angular/core';
import { ControlIdService } from './providers/control-id.service';
import { ClrAriaLiveService } from '../../utils/a11y/aria-live.service';
import { ControlClassService } from './providers/control-class.service';
import * as ɵngcc0 from '@angular/core';

const _c0 = ["*"];
let ClrControlError = class ClrControlError {
    constructor(controlIdService, controlClassService, ariaLiveService, el) {
        this.controlIdService = controlIdService;
        this.controlClassService = controlClassService;
        this.ariaLiveService = ariaLiveService;
        this.el = el;
    }
    /** @deprecated since 3.0, remove in 4.0 - ariaLiveService */
    ngAfterViewInit() {
        /**
         * The way we render elements inside the `clr-control-container make this
         * component announce itself without been visible on the screen.
         *
         * The check below try to guess is clr-controll-error used in some of the
         * cases mention above and prevent us from announcing without the need of that.
         *
         * This change won't create breaking change - but will make aria live announcment
         * work only when the component is used outside forms or some of the components.
         *
         * This is temporary solution - until better is found.
         *
         */
        if (this.controlClassService === null) {
            this.ariaLiveService.announce(this.el.nativeElement);
        }
    }
};
ClrControlError.ɵfac = function ClrControlError_Factory(t) { return new (t || ClrControlError)(ɵngcc0.ɵɵdirectiveInject(ControlIdService, 8), ɵngcc0.ɵɵdirectiveInject(ControlClassService, 8), ɵngcc0.ɵɵdirectiveInject(ClrAriaLiveService), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef)); };
ClrControlError.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: ClrControlError, selectors: [["clr-control-error"]], hostVars: 3, hostBindings: function ClrControlError_HostBindings(rf, ctx) { if (rf & 2) {
        ɵngcc0.ɵɵhostProperty("id", (ctx.controlIdService == null ? null : ctx.controlIdService.id) + "-error");
        ɵngcc0.ɵɵclassProp("clr-subtext", true);
    } }, features: [ɵngcc0.ɵɵProvidersFeature([ClrAriaLiveService])], ngContentSelectors: _c0, decls: 1, vars: 0, template: function ClrControlError_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵprojection(0);
    } }, encapsulation: 2 });
ClrControlError.ctorParameters = () => [
    { type: ControlIdService, decorators: [{ type: Optional }] },
    { type: ControlClassService, decorators: [{ type: Optional }] },
    { type: ClrAriaLiveService },
    { type: ElementRef }
];
ClrControlError = __decorate([ __param(0, Optional()),
    __param(1, Optional())
], ClrControlError);
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ClrControlError, [{
        type: Component,
        args: [{
                providers: [ClrAriaLiveService],
                selector: 'clr-control-error',
                template: `
    <ng-content></ng-content>
    `,
                host: {
                    '[class.clr-subtext]': 'true',
                    '[id]': 'controlIdService?.id + "-error"'
                }
            }]
    }], function () { return [{ type: ControlIdService, decorators: [{
                type: Optional
            }] }, { type: ControlClassService, decorators: [{
                type: Optional
            }] }, { type: ClrAriaLiveService }, { type: ɵngcc0.ElementRef }]; }, null); })();
export { ClrControlError };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXJyb3IuanMiLCJzb3VyY2VzIjpbIm5nOi9AY2xyL2FuZ3VsYXIvZm9ybXMvY29tbW9uL2Vycm9yLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0EsT0FBTyxFQUFFLFNBQVMsRUFBRSxRQUFRLEVBQUUsVUFBVSxFQUFFLGFBQWEsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMvRSxPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSxnQ0FBZ0MsQ0FBQztBQUNsRSxPQUFPLEVBQUUsa0JBQWtCLEVBQUUsTUFBTSxvQ0FBb0MsQ0FBQztBQUN4RSxPQUFPLEVBQUUsbUJBQW1CLEVBQUUsTUFBTSxtQ0FBbUMsQ0FBQzs7OztBQWF4RSxJQUFhLGVBQWUsR0FBNUIsTUFBYSxlQUFlO0FBQUcsSUFDN0IsWUFDcUIsZ0JBQWtDLEVBQ2xDLG1CQUF3QyxFQUNuRCxlQUFtQyxFQUNuQyxFQUFjO0FBQ3ZCLFFBSm9CLHFCQUFnQixHQUFoQixnQkFBZ0IsQ0FBa0I7QUFBQyxRQUNuQyx3QkFBbUIsR0FBbkIsbUJBQW1CLENBQXFCO0FBQUMsUUFDcEQsb0JBQWUsR0FBZixlQUFlLENBQW9CO0FBQUMsUUFDcEMsT0FBRSxHQUFGLEVBQUUsQ0FBWTtBQUMxQixJQUFLLENBQUM7QUFDTixJQUNFLDZEQUE2RDtBQUMvRCxJQUFFLGVBQWU7QUFDakIsUUFBSTtBQUNKO0FBQ0k7QUFFSDtBQUFXO0FBQ0k7QUFFSDtBQUFXO0FBQ0k7QUFFSDtBQUFXO0FBR1g7QUFBVyxXQUQ3QjtBQUNQLFFBQUksSUFBSSxJQUFJLENBQUMsbUJBQW1CLEtBQUssSUFBSSxFQUFFO0FBQzNDLFlBQU0sSUFBSSxDQUFDLGVBQWUsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxhQUFhLENBQUMsQ0FBQztBQUMzRCxTQUFLO0FBQ0wsSUFBRSxDQUFDO0FBQ0gsQ0FBQzs7Ozs7Ozs7NkJBQUE7QUFDRDtBQUF5QyxZQTFCQSxnQkFBZ0IsdUJBQXBELFFBQVE7QUFBTyxZQUN3QixtQkFBbUIsdUJBQTFELFFBQVE7QUFBTyxZQUNTLGtCQUFrQjtBQUM3QyxZQUFjLFVBQVU7QUFDeEI7QUFOVyxlQUFlLG9CQVgzQixTQUFTLENBQUMsZkFXUCxDQUVDLFdBQUEsUUFBUSxFQUFFLENBQUE7QUFaYixTQUFTLEVBQUUsQ0FBQyxaQVlHLElBQ1osV0FBQSxRQUFRLEVBQUUsQ0FBQTtHQWJpQixDQUFDLFVBQy9CLGRBWWMsR0FISCxlQUFlLENBMkIzQjtDQXBDUyxFQUFFLG1CQUFtQixVQUM3QixRQUFRLEVBQUU7S0FFUCxVQUNILElBQUksRUFBRTtVQUNKO2NBQXFCLEVBQUUsTUFBTSxjQUM3QixNQUFNLEVBQUU7NEJBQWlDLFdBQzFDLE1BQ0YsQ0FBQzs7Ozs7Ozs7Ozs7Ozs2RkE2QkY7QUFBQyxTQTVCWSxlQUFlO0FBQUkiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxNi0yMDIwIFZNd2FyZSwgSW5jLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICogVGhpcyBzb2Z0d2FyZSBpcyByZWxlYXNlZCB1bmRlciBNSVQgbGljZW5zZS5cbiAqIFRoZSBmdWxsIGxpY2Vuc2UgaW5mb3JtYXRpb24gY2FuIGJlIGZvdW5kIGluIExJQ0VOU0UgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgcHJvamVjdC5cbiAqL1xuXG5pbXBvcnQgeyBDb21wb25lbnQsIE9wdGlvbmFsLCBFbGVtZW50UmVmLCBBZnRlclZpZXdJbml0IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBDb250cm9sSWRTZXJ2aWNlIH0gZnJvbSAnLi9wcm92aWRlcnMvY29udHJvbC1pZC5zZXJ2aWNlJztcbmltcG9ydCB7IENsckFyaWFMaXZlU2VydmljZSB9IGZyb20gJy4uLy4uL3V0aWxzL2ExMXkvYXJpYS1saXZlLnNlcnZpY2UnO1xuaW1wb3J0IHsgQ29udHJvbENsYXNzU2VydmljZSB9IGZyb20gJy4vcHJvdmlkZXJzL2NvbnRyb2wtY2xhc3Muc2VydmljZSc7XG5cbkBDb21wb25lbnQoe1xuICBwcm92aWRlcnM6IFtDbHJBcmlhTGl2ZVNlcnZpY2VdLFxuICBzZWxlY3RvcjogJ2Nsci1jb250cm9sLWVycm9yJyxcbiAgdGVtcGxhdGU6IGBcbiAgICA8bmctY29udGVudD48L25nLWNvbnRlbnQ+XG4gICAgYCxcbiAgaG9zdDoge1xuICAgICdbY2xhc3MuY2xyLXN1YnRleHRdJzogJ3RydWUnLFxuICAgICdbaWRdJzogJ2NvbnRyb2xJZFNlcnZpY2U/LmlkICsgXCItZXJyb3JcIicsXG4gIH0sXG59KVxuZXhwb3J0IGNsYXNzIENsckNvbnRyb2xFcnJvciBpbXBsZW1lbnRzIEFmdGVyVmlld0luaXQge1xuICBjb25zdHJ1Y3RvcihcbiAgICBAT3B0aW9uYWwoKSBwdWJsaWMgY29udHJvbElkU2VydmljZTogQ29udHJvbElkU2VydmljZSxcbiAgICBAT3B0aW9uYWwoKSBwdWJsaWMgY29udHJvbENsYXNzU2VydmljZTogQ29udHJvbENsYXNzU2VydmljZSxcbiAgICBwcml2YXRlIGFyaWFMaXZlU2VydmljZTogQ2xyQXJpYUxpdmVTZXJ2aWNlLFxuICAgIHByaXZhdGUgZWw6IEVsZW1lbnRSZWZcbiAgKSB7fVxuXG4gIC8qKiBAZGVwcmVjYXRlZCBzaW5jZSAzLjAsIHJlbW92ZSBpbiA0LjAgLSBhcmlhTGl2ZVNlcnZpY2UgKi9cbiAgbmdBZnRlclZpZXdJbml0KCkge1xuICAgIC8qKlxuICAgICAqIFRoZSB3YXkgd2UgcmVuZGVyIGVsZW1lbnRzIGluc2lkZSB0aGUgYGNsci1jb250cm9sLWNvbnRhaW5lciBtYWtlIHRoaXNcbiAgICAgKiBjb21wb25lbnQgYW5ub3VuY2UgaXRzZWxmIHdpdGhvdXQgYmVlbiB2aXNpYmxlIG9uIHRoZSBzY3JlZW4uXG4gICAgICpcbiAgICAgKiBUaGUgY2hlY2sgYmVsb3cgdHJ5IHRvIGd1ZXNzIGlzIGNsci1jb250cm9sbC1lcnJvciB1c2VkIGluIHNvbWUgb2YgdGhlXG4gICAgICogY2FzZXMgbWVudGlvbiBhYm92ZSBhbmQgcHJldmVudCB1cyBmcm9tIGFubm91bmNpbmcgd2l0aG91dCB0aGUgbmVlZCBvZiB0aGF0LlxuICAgICAqXG4gICAgICogVGhpcyBjaGFuZ2Ugd29uJ3QgY3JlYXRlIGJyZWFraW5nIGNoYW5nZSAtIGJ1dCB3aWxsIG1ha2UgYXJpYSBsaXZlIGFubm91bmNtZW50XG4gICAgICogd29yayBvbmx5IHdoZW4gdGhlIGNvbXBvbmVudCBpcyB1c2VkIG91dHNpZGUgZm9ybXMgb3Igc29tZSBvZiB0aGUgY29tcG9uZW50cy5cbiAgICAgKlxuICAgICAqIFRoaXMgaXMgdGVtcG9yYXJ5IHNvbHV0aW9uIC0gdW50aWwgYmV0dGVyIGlzIGZvdW5kLlxuICAgICAqXG4gICAgICovXG4gICAgaWYgKHRoaXMuY29udHJvbENsYXNzU2VydmljZSA9PT0gbnVsbCkge1xuICAgICAgdGhpcy5hcmlhTGl2ZVNlcnZpY2UuYW5ub3VuY2UodGhpcy5lbC5uYXRpdmVFbGVtZW50KTtcbiAgICB9XG4gIH1cbn1cbiJdfQ==