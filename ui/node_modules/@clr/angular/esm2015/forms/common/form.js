/**
 * Copyright (c) 2016-2020 VMware, Inc. All Rights Reserved.
 * This software is released under MIT license.
 * The full license information can be found in LICENSE in the root directory of this project.
 */
import { __decorate, __param } from "tslib";
import { ContentChildren, Directive, ElementRef, HostListener, Inject, PLATFORM_ID, QueryList, Input, } from '@angular/core';
import { isPlatformBrowser } from '@angular/common';
import { LayoutService } from './providers/layout.service';
import { MarkControlService } from './providers/mark-control.service';
import { ClrCommonStringsService } from '../../utils/i18n/common-strings.service';
import { ClrLabel } from './label';
import { ClrAriaLiveService } from '../../utils/a11y/aria-live.service';
import * as ɵngcc0 from '@angular/core';
let ClrForm = class ClrForm {
    constructor(layoutService, markControlService, platformId, el, commonStrings, ariaLiveService) {
        this.layoutService = layoutService;
        this.markControlService = markControlService;
        this.platformId = platformId;
        this.el = el;
        this.commonStrings = commonStrings;
        this.ariaLiveService = ariaLiveService;
        this.invalidControls = [];
    }
    set labelSize(size) {
        this.layoutService.labelSize = size;
    }
    /** @deprecated since 2.0 */
    markAsDirty(updateAriaLiveText) {
        this.markAsTouched((updateAriaLiveText = true));
    }
    // Trying to avoid adding an input and keep this backwards compatible at the same time
    markAsTouched(updateAriaLiveText) {
        this.markControlService.markAsTouched();
        // I don't think consumers will call this with undefined, null or other values but
        // want to make sure this only guards against when this is called with false
        if (updateAriaLiveText !== false && isPlatformBrowser(this.platformId)) {
            this.invalidControls = Array.from(this.el.nativeElement.querySelectorAll('.ng-invalid'));
            if (this.invalidControls.length > 0) {
                this.invalidControls[0].focus();
                this.updateAriaLive();
            }
        }
    }
    onFormSubmit() {
        this.markAsTouched();
    }
    /** @deprecated since 3.0, remove in 4.0 */
    updateAriaLive() {
        if (this.invalidControls.length === 0) {
            return;
        }
        const errorList = this.labels.filter(label => this.invalidControls.find(control => label.forAttr === control.id));
        this.ariaLiveService.announce(this.commonStrings.parse(this.commonStrings.keys.formErrorSummary, { ERROR_NUMBER: errorList.length.toString() }));
    }
};
ClrForm.ɵfac = function ClrForm_Factory(t) { return new (t || ClrForm)(ɵngcc0.ɵɵdirectiveInject(LayoutService), ɵngcc0.ɵɵdirectiveInject(MarkControlService), ɵngcc0.ɵɵdirectiveInject(PLATFORM_ID), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ClrCommonStringsService), ɵngcc0.ɵɵdirectiveInject(ClrAriaLiveService)); };
ClrForm.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: ClrForm, selectors: [["", "clrForm", ""]], contentQueries: function ClrForm_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {
        ɵngcc0.ɵɵcontentQuery(dirIndex, ClrLabel, true);
    } if (rf & 2) {
        var _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.labels = _t);
    } }, hostVars: 6, hostBindings: function ClrForm_HostBindings(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵlistener("submit", function ClrForm_submit_HostBindingHandler() { return ctx.onFormSubmit(); });
    } if (rf & 2) {
        ɵngcc0.ɵɵclassProp("clr-form", true)("clr-form-horizontal", ctx.layoutService.isHorizontal())("clr-form-compact", ctx.layoutService.isCompact());
    } }, inputs: { labelSize: ["clrLabelSize", "labelSize"] }, features: [ɵngcc0.ɵɵProvidersFeature([LayoutService, MarkControlService, ClrAriaLiveService])] });
ClrForm.ctorParameters = () => [
    { type: LayoutService },
    { type: MarkControlService },
    { type: Object, decorators: [{ type: Inject, args: [PLATFORM_ID,] }] },
    { type: ElementRef },
    { type: ClrCommonStringsService },
    { type: ClrAriaLiveService }
];
__decorate([
    Input('clrLabelSize')
], ClrForm.prototype, "labelSize", null);
__decorate([
    ContentChildren(ClrLabel, { descendants: true })
], ClrForm.prototype, "labels", void 0);
__decorate([
    HostListener('submit')
], ClrForm.prototype, "onFormSubmit", null);
ClrForm = __decorate([ __param(2, Inject(PLATFORM_ID))
], ClrForm);
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ClrForm, [{
        type: Directive,
        args: [{
                selector: '[clrForm]',
                providers: [LayoutService, MarkControlService, ClrAriaLiveService],
                host: {
                    '[class.clr-form]': 'true',
                    '[class.clr-form-horizontal]': 'layoutService.isHorizontal()',
                    '[class.clr-form-compact]': 'layoutService.isCompact()'
                }
            }]
    }], function () { return [{ type: LayoutService }, { type: MarkControlService }, { type: Object, decorators: [{
                type: Inject,
                args: [PLATFORM_ID]
            }] }, { type: ɵngcc0.ElementRef }, { type: ClrCommonStringsService }, { type: ClrAriaLiveService }]; }, { labelSize: [{
            type: Input,
            args: ['clrLabelSize']
        }], onFormSubmit: [{
            type: HostListener,
            args: ['submit']
        }], labels: [{
            type: ContentChildren,
            args: [ClrLabel, { descendants: true }]
        }] }); })();
export { ClrForm };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZm9ybS5qcyIsInNvdXJjZXMiOlsibmc6L0BjbHIvYW5ndWxhci9mb3Jtcy9jb21tb24vZm9ybS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBLE9BQU8sRUFDTCxlQUFlLEVBQ2YsU0FBUyxFQUNULFVBQVUsRUFDVixZQUFZLEVBQ1osTUFBTSxFQUNOLFdBQVcsRUFDWCxTQUFTLEVBQ1QsS0FBSyxHQUNOLE1BQU0sZUFBZSxDQUFDO0FBQ3ZCLE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBQ3BELE9BQU8sRUFBRSxhQUFhLEVBQUUsTUFBTSw0QkFBNEIsQ0FBQztBQUMzRCxPQUFPLEVBQUUsa0JBQWtCLEVBQUUsTUFBTSxrQ0FBa0MsQ0FBQztBQUN0RSxPQUFPLEVBQUUsdUJBQXVCLEVBQUUsTUFBTSx5Q0FBeUMsQ0FBQztBQUNsRixPQUFPLEVBQUUsUUFBUSxFQUFFLE1BQU0sU0FBUyxDQUFDO0FBQ25DLE9BQU8sRUFBRSxrQkFBa0IsRUFBRSxNQUFNLG9DQUFvQyxDQUFDOztBQVd4RSxJQUFhLE9BQU8sR0FBcEIsTUFBYSxPQUFPO0FBQ3BCLElBT0UsWUFDUyxhQUE0QixFQUMzQixrQkFBc0MsRUFDakIsVUFBa0IsRUFDdkMsRUFBYyxFQUNkLGFBQXNDLEVBQ3RDLGVBQW1DO0FBQzVDLFFBTlEsa0JBQWEsR0FBYixhQUFhLENBQWU7QUFBQyxRQUM1Qix1QkFBa0IsR0FBbEIsa0JBQWtCLENBQW9CO0FBQUMsUUFDbEIsZUFBVSxHQUFWLFVBQVUsQ0FBUTtBQUFDLFFBQ3hDLE9BQUUsR0FBRixFQUFFLENBQVk7QUFBQyxRQUNmLGtCQUFhLEdBQWIsYUFBYSxDQUF5QjtBQUFDLFFBQ3ZDLG9CQUFlLEdBQWYsZUFBZSxDQUFvQjtBQUMvQyxRQWRVLG9CQUFlLEdBQUcsRUFBRSxDQUFDO0FBQy9CLElBYUssQ0FBQztBQUNOLElBWkUsSUFBSSxTQUFTLENBQUMsSUFB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QUFNLGNBQzFCOzRCQUE2QixFQUFFLDhCQUE4QixjQUM3RDtnQkFBMEIsRUFBRTtxQkFBMkIsV0FDeEQsT0FDRixDQUFDOzs7Ozs7Ozs7Ozs7Ozs7OztvQkEyREY7QUFBQyxTQTFEWSxPQUFPO0FBQ25CIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTYtMjAyMCBWTXdhcmUsIEluYy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqIFRoaXMgc29mdHdhcmUgaXMgcmVsZWFzZWQgdW5kZXIgTUlUIGxpY2Vuc2UuXG4gKiBUaGUgZnVsbCBsaWNlbnNlIGluZm9ybWF0aW9uIGNhbiBiZSBmb3VuZCBpbiBMSUNFTlNFIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHByb2plY3QuXG4gKi9cblxuaW1wb3J0IHtcbiAgQ29udGVudENoaWxkcmVuLFxuICBEaXJlY3RpdmUsXG4gIEVsZW1lbnRSZWYsXG4gIEhvc3RMaXN0ZW5lcixcbiAgSW5qZWN0LFxuICBQTEFURk9STV9JRCxcbiAgUXVlcnlMaXN0LFxuICBJbnB1dCxcbn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBpc1BsYXRmb3JtQnJvd3NlciB9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbic7XG5pbXBvcnQgeyBMYXlvdXRTZXJ2aWNlIH0gZnJvbSAnLi9wcm92aWRlcnMvbGF5b3V0LnNlcnZpY2UnO1xuaW1wb3J0IHsgTWFya0NvbnRyb2xTZXJ2aWNlIH0gZnJvbSAnLi9wcm92aWRlcnMvbWFyay1jb250cm9sLnNlcnZpY2UnO1xuaW1wb3J0IHsgQ2xyQ29tbW9uU3RyaW5nc1NlcnZpY2UgfSBmcm9tICcuLi8uLi91dGlscy9pMThuL2NvbW1vbi1zdHJpbmdzLnNlcnZpY2UnO1xuaW1wb3J0IHsgQ2xyTGFiZWwgfSBmcm9tICcuL2xhYmVsJztcbmltcG9ydCB7IENsckFyaWFMaXZlU2VydmljZSB9IGZyb20gJy4uLy4uL3V0aWxzL2ExMXkvYXJpYS1saXZlLnNlcnZpY2UnO1xuXG5ARGlyZWN0aXZlKHtcbiAgc2VsZWN0b3I6ICdbY2xyRm9ybV0nLFxuICBwcm92aWRlcnM6IFtMYXlvdXRTZXJ2aWNlLCBNYXJrQ29udHJvbFNlcnZpY2UsIENsckFyaWFMaXZlU2VydmljZV0sXG4gIGhvc3Q6IHtcbiAgICAnW2NsYXNzLmNsci1mb3JtXSc6ICd0cnVlJyxcbiAgICAnW2NsYXNzLmNsci1mb3JtLWhvcml6b250YWxdJzogJ2xheW91dFNlcnZpY2UuaXNIb3Jpem9udGFsKCknLFxuICAgICdbY2xhc3MuY2xyLWZvcm0tY29tcGFjdF0nOiAnbGF5b3V0U2VydmljZS5pc0NvbXBhY3QoKScsXG4gIH0sXG59KVxuZXhwb3J0IGNsYXNzIENsckZvcm0ge1xuICBwcml2YXRlIGludmFsaWRDb250cm9scyA9IFtdO1xuXG4gIEBJbnB1dCgnY2xyTGFiZWxTaXplJylcbiAgc2V0IGxhYmVsU2l6ZShzaXplOiBudW1iZXIpIHtcbiAgICB0aGlzLmxheW91dFNlcnZpY2UubGFiZWxTaXplID0gc2l6ZTtcbiAgfVxuXG4gIGNvbnN0cnVjdG9yKFxuICAgIHB1YmxpYyBsYXlvdXRTZXJ2aWNlOiBMYXlvdXRTZXJ2aWNlLFxuICAgIHByaXZhdGUgbWFya0NvbnRyb2xTZXJ2aWNlOiBNYXJrQ29udHJvbFNlcnZpY2UsXG4gICAgQEluamVjdChQTEFURk9STV9JRCkgcHJpdmF0ZSBwbGF0Zm9ybUlkOiBPYmplY3QsXG4gICAgcHJpdmF0ZSBlbDogRWxlbWVudFJlZixcbiAgICBwcml2YXRlIGNvbW1vblN0cmluZ3M6IENsckNvbW1vblN0cmluZ3NTZXJ2aWNlLFxuICAgIHByaXZhdGUgYXJpYUxpdmVTZXJ2aWNlOiBDbHJBcmlhTGl2ZVNlcnZpY2VcbiAgKSB7fVxuXG4gIC8qKiBAZGVwcmVjYXRlZCBzaW5jZSAyLjAgKi9cbiAgbWFya0FzRGlydHkodXBkYXRlQXJpYUxpdmVUZXh0PzogYm9vbGVhbikge1xuICAgIHRoaXMubWFya0FzVG91Y2hlZCgodXBkYXRlQXJpYUxpdmVUZXh0ID0gdHJ1ZSkpO1xuICB9XG5cbiAgLy8gVHJ5aW5nIHRvIGF2b2lkIGFkZGluZyBhbiBpbnB1dCBhbmQga2VlcCB0aGlzIGJhY2t3YXJkcyBjb21wYXRpYmxlIGF0IHRoZSBzYW1lIHRpbWVcbiAgbWFya0FzVG91Y2hlZCh1cGRhdGVBcmlhTGl2ZVRleHQ/OiBib29sZWFuKSB7XG4gICAgdGhpcy5tYXJrQ29udHJvbFNlcnZpY2UubWFya0FzVG91Y2hlZCgpO1xuXG4gICAgLy8gSSBkb24ndCB0aGluayBjb25zdW1lcnMgd2lsbCBjYWxsIHRoaXMgd2l0aCB1bmRlZmluZWQsIG51bGwgb3Igb3RoZXIgdmFsdWVzIGJ1dFxuICAgIC8vIHdhbnQgdG8gbWFrZSBzdXJlIHRoaXMgb25seSBndWFyZHMgYWdhaW5zdCB3aGVuIHRoaXMgaXMgY2FsbGVkIHdpdGggZmFsc2VcbiAgICBpZiAodXBkYXRlQXJpYUxpdmVUZXh0ICE9PSBmYWxzZSAmJiBpc1BsYXRmb3JtQnJvd3Nlcih0aGlzLnBsYXRmb3JtSWQpKSB7XG4gICAgICB0aGlzLmludmFsaWRDb250cm9scyA9IEFycmF5LmZyb20odGhpcy5lbC5uYXRpdmVFbGVtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJy5uZy1pbnZhbGlkJykpO1xuICAgICAgaWYgKHRoaXMuaW52YWxpZENvbnRyb2xzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgdGhpcy5pbnZhbGlkQ29udHJvbHNbMF0uZm9jdXMoKTtcbiAgICAgICAgdGhpcy51cGRhdGVBcmlhTGl2ZSgpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIEBDb250ZW50Q2hpbGRyZW4oQ2xyTGFiZWwsIHsgZGVzY2VuZGFudHM6IHRydWUgfSlcbiAgbGFiZWxzOiBRdWVyeUxpc3Q8Q2xyTGFiZWw+O1xuXG4gIEBIb3N0TGlzdGVuZXIoJ3N1Ym1pdCcpXG4gIG9uRm9ybVN1Ym1pdCgpIHtcbiAgICB0aGlzLm1hcmtBc1RvdWNoZWQoKTtcbiAgfVxuXG4gIC8qKiBAZGVwcmVjYXRlZCBzaW5jZSAzLjAsIHJlbW92ZSBpbiA0LjAgKi9cbiAgcHJpdmF0ZSB1cGRhdGVBcmlhTGl2ZSgpOiB2b2lkIHtcbiAgICBpZiAodGhpcy5pbnZhbGlkQ29udHJvbHMubGVuZ3RoID09PSAwKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgY29uc3QgZXJyb3JMaXN0ID0gdGhpcy5sYWJlbHMuZmlsdGVyKGxhYmVsID0+IHRoaXMuaW52YWxpZENvbnRyb2xzLmZpbmQoY29udHJvbCA9PiBsYWJlbC5mb3JBdHRyID09PSBjb250cm9sLmlkKSk7XG5cbiAgICB0aGlzLmFyaWFMaXZlU2VydmljZS5hbm5vdW5jZShcbiAgICAgIHRoaXMuY29tbW9uU3RyaW5ncy5wYXJzZSh0aGlzLmNvbW1vblN0cmluZ3Mua2V5cy5mb3JtRXJyb3JTdW1tYXJ5LCB7IEVSUk9SX05VTUJFUjogZXJyb3JMaXN0Lmxlbmd0aC50b1N0cmluZygpIH0pXG4gICAgKTtcbiAgfVxufVxuIl19