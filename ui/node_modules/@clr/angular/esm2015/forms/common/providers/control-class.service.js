/*
 * Copyright (c) 2016-2019 VMware, Inc. All Rights Reserved.
 * This software is released under MIT license.
 * The full license information can be found in LICENSE in the root directory of this project.
 */
import { __decorate, __param } from "tslib";
import { Injectable, Optional } from '@angular/core';
import { LayoutService } from './layout.service';
import * as ɵngcc0 from '@angular/core';
let ControlClassService = class ControlClassService {
    constructor(layoutService) {
        this.layoutService = layoutService;
        this.className = '';
    }
    controlClass(invalid = false, grid = false, additional = '') {
        const controlClasses = [this.className, additional];
        if (invalid) {
            controlClasses.push('clr-error');
        }
        if (grid && this.layoutService && this.className.indexOf('clr-col') === -1) {
            controlClasses.push(`clr-col-md-${this.layoutService.maxLabelSize - this.layoutService.labelSize} clr-col-12`);
        }
        return controlClasses.join(' ').trim();
    }
    // We want to remove the column classes from the input up to the container
    initControlClass(renderer, element) {
        if (element && element.className) {
            this.className = element.className;
            const klasses = element.className.split(' ');
            klasses.forEach(klass => {
                if (klass.startsWith('clr-col')) {
                    renderer.removeClass(element, klass);
                }
            });
        }
    }
};
ControlClassService.ɵfac = function ControlClassService_Factory(t) { return new (t || ControlClassService)(ɵngcc0.ɵɵinject(LayoutService, 8)); };
ControlClassService.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: ControlClassService, factory: ControlClassService.ɵfac });
ControlClassService.ctorParameters = () => [
    { type: LayoutService, decorators: [{ type: Optional }] }
];
ControlClassService = __decorate([ __param(0, Optional())
], ControlClassService);
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ControlClassService, [{
        type: Injectable
    }], function () { return [{ type: LayoutService, decorators: [{
                type: Optional
            }] }]; }, null); })();
export { ControlClassService };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29udHJvbC1jbGFzcy5zZXJ2aWNlLmpzIiwic291cmNlcyI6WyJuZzovQGNsci9hbmd1bGFyL2Zvcm1zL2NvbW1vbi9wcm92aWRlcnMvY29udHJvbC1jbGFzcy5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0EsT0FBTyxFQUFFLFVBQVUsRUFBRSxRQUFRLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDckQsT0FBTyxFQUFFLGFBQWEsRUFBRSxNQUFNLGtCQUFrQixDQUFDOztBQUdqRCxJQUFhLG1CQUFtQixHQUFoQyxNQUFhLG1CQUFtQjtBQUNoQyxJQUVFLFlBQWdDLGFBQTRCO0FBQUksUUFBaEMsa0JBQWEsR0FBYixhQUFhLENBQWU7QUFBQyxRQUY3RCxjQUFTLEdBQUcsRUFBRSxDQUFDO0FBQ2pCLElBQ2lFLENBQUM7QUFDbEUsSUFDRSxZQUFZLENBQUMsT0FBTyxHQUFHLEtBQUssRUFBRSxJQUFJLEdBQUcsS0FBSyxFQUFFLFVBQVUsR0FBRyxFQUFFO0FBQzdELFFBQUksTUFBTSxjQUFjLEdBQUcsQ0FBQyxJQUFJLENBQUMsU0FBUyxFQUFFLFVBQVUsQ0FBQyxDQUFDO0FBQ3hELFFBQUksSUFBSSxPQUFPLEVBQUU7QUFDakIsWUFBTSxjQUFjLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxDQUFDO0FBQ3ZDLFNBQUs7QUFDTCxRQUFJLElBQUksSUFBSSxJQUFJLElBQUksQ0FBQyxhQUFhLElBQUksSUFBSSxDQUFDLFNBQVMsQ0FBQyxPQUFPLENBQUMsU0FBUyxDQUFDLEtBQUssQ0FBQyxDQUFDLEVBQUU7QUFDaEYsWUFBTSxjQUFjLENBQUMsSUFBSSxDQUFDLGNBQWMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxZQUFZLEdBQUcsSUFBSSxDQUFDLGFBQWEsQ0FBQyxTQUFTLGFBQWEsQ0FBQyxDQUFDO0FBQ3JILFNBQUs7QUFDTCxRQUFJLE9BQU8sY0FBYyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxJQUFJLEVBQUUsQ0FBQztBQUMzQyxJQUFFLENBQUM7QUFDSCxJQUNFLDBFQUEwRTtBQUM1RSxJQUFFLGdCQUFnQixDQUFDLFFBQVEsRUFBRSxPQUFvQjtBQUNqRCxRQUFJLElBQUksT0FBTyxJQUFJLE9BQU8sQ0FBQyxTQUFTLEVBQUU7QUFDdEMsWUFBTSxJQUFJLENBQUMsU0FBUyxHQUFHLE9BQU8sQ0FBQyxTQUFTLENBQUM7QUFDekMsWUFBTSxNQUFNLE9BQU8sR0FBRyxPQUFPLENBQUMsU0FBUyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQztBQUNuRCxZQUFNLE9BQU8sQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLEVBQUU7QUFDOUIsZ0JBQVEsSUFBSSxLQUFLLENBQUMsVUFBVSxDQUFDLFNBQVMsQ0FBQyxFQUFFO0FBQ3pDLG9CQUFVLFFBQVEsQ0FBQyxXQUFXLENBQUMsT0FBTyxFQUFFLEtBQUssQ0FBQyxDQUFDO0FBQy9DLGlCQUFTO0FBQ1QsWUFBTSxDQUFDLENBQUMsQ0FBQztBQUNULFNBQUs7QUFDTCxJQUFFLENBQUM7QUFDSCxDQUFDOzt5SEFBQTtBQUNEO0FBQTZDLFlBMUJJLGFBQWEsdUJBQS9DLFFBQVE7QUFBTTtBQUhoQixtQkFBbUIsb0JBRC9CLFVBQVUsRUFBRSxqQkFDVCxDQUdXLFdBQUEsUUFBUSxFQUFFLENBQUE7QUFBQyxHQUhiLG1CQUFtQixDQTRCL0I7Ozs7O2tDQUNEO0FBQUMsU0E3QlksbUJBQW1CO0FBQy9CIiwic291cmNlc0NvbnRlbnQiOlsiLypcbiAqIENvcHlyaWdodCAoYykgMjAxNi0yMDE5IFZNd2FyZSwgSW5jLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICogVGhpcyBzb2Z0d2FyZSBpcyByZWxlYXNlZCB1bmRlciBNSVQgbGljZW5zZS5cbiAqIFRoZSBmdWxsIGxpY2Vuc2UgaW5mb3JtYXRpb24gY2FuIGJlIGZvdW5kIGluIExJQ0VOU0UgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgcHJvamVjdC5cbiAqL1xuXG5pbXBvcnQgeyBJbmplY3RhYmxlLCBPcHRpb25hbCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgTGF5b3V0U2VydmljZSB9IGZyb20gJy4vbGF5b3V0LnNlcnZpY2UnO1xuXG5ASW5qZWN0YWJsZSgpXG5leHBvcnQgY2xhc3MgQ29udHJvbENsYXNzU2VydmljZSB7XG4gIGNsYXNzTmFtZSA9ICcnO1xuXG4gIGNvbnN0cnVjdG9yKEBPcHRpb25hbCgpIHByaXZhdGUgbGF5b3V0U2VydmljZTogTGF5b3V0U2VydmljZSkge31cblxuICBjb250cm9sQ2xhc3MoaW52YWxpZCA9IGZhbHNlLCBncmlkID0gZmFsc2UsIGFkZGl0aW9uYWwgPSAnJykge1xuICAgIGNvbnN0IGNvbnRyb2xDbGFzc2VzID0gW3RoaXMuY2xhc3NOYW1lLCBhZGRpdGlvbmFsXTtcbiAgICBpZiAoaW52YWxpZCkge1xuICAgICAgY29udHJvbENsYXNzZXMucHVzaCgnY2xyLWVycm9yJyk7XG4gICAgfVxuICAgIGlmIChncmlkICYmIHRoaXMubGF5b3V0U2VydmljZSAmJiB0aGlzLmNsYXNzTmFtZS5pbmRleE9mKCdjbHItY29sJykgPT09IC0xKSB7XG4gICAgICBjb250cm9sQ2xhc3Nlcy5wdXNoKGBjbHItY29sLW1kLSR7dGhpcy5sYXlvdXRTZXJ2aWNlLm1heExhYmVsU2l6ZSAtIHRoaXMubGF5b3V0U2VydmljZS5sYWJlbFNpemV9IGNsci1jb2wtMTJgKTtcbiAgICB9XG4gICAgcmV0dXJuIGNvbnRyb2xDbGFzc2VzLmpvaW4oJyAnKS50cmltKCk7XG4gIH1cblxuICAvLyBXZSB3YW50IHRvIHJlbW92ZSB0aGUgY29sdW1uIGNsYXNzZXMgZnJvbSB0aGUgaW5wdXQgdXAgdG8gdGhlIGNvbnRhaW5lclxuICBpbml0Q29udHJvbENsYXNzKHJlbmRlcmVyLCBlbGVtZW50OiBIVE1MRWxlbWVudCkge1xuICAgIGlmIChlbGVtZW50ICYmIGVsZW1lbnQuY2xhc3NOYW1lKSB7XG4gICAgICB0aGlzLmNsYXNzTmFtZSA9IGVsZW1lbnQuY2xhc3NOYW1lO1xuICAgICAgY29uc3Qga2xhc3NlcyA9IGVsZW1lbnQuY2xhc3NOYW1lLnNwbGl0KCcgJyk7XG4gICAgICBrbGFzc2VzLmZvckVhY2goa2xhc3MgPT4ge1xuICAgICAgICBpZiAoa2xhc3Muc3RhcnRzV2l0aCgnY2xyLWNvbCcpKSB7XG4gICAgICAgICAgcmVuZGVyZXIucmVtb3ZlQ2xhc3MoZWxlbWVudCwga2xhc3MpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG4gIH1cbn1cbiJdfQ==