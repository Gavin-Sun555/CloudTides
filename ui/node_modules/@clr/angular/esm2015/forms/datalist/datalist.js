/*
 * Copyright (c) 2016-2020 VMware, Inc. All Rights Reserved.
 * This software is released under MIT license.
 * The full license information can be found in LICENSE in the root directory of this project.
 */
import { __decorate, __param } from "tslib";
import { Input, Directive, Optional } from '@angular/core';
import { DatalistIdService } from './providers/datalist-id.service';
import * as ɵngcc0 from '@angular/core';
let ClrDatalist = class ClrDatalist {
    constructor(datalistIdService) {
        this.datalistIdService = datalistIdService;
        this.subscriptions = [];
    }
    ngAfterContentInit() {
        if (!this.datalistIdService) {
            return;
        }
        this.subscriptions.push(this.datalistIdService.idChange.subscribe(id => (this.datalistId = id)));
    }
    set id(idValue) {
        if (!!idValue && this.datalistIdService) {
            this.datalistId = idValue;
            this.datalistIdService.id = idValue;
        }
        else if (!!idValue) {
            this.datalistId = idValue;
        }
    }
    ngOnDestroy() {
        this.subscriptions.forEach(sub => sub.unsubscribe());
    }
};
ClrDatalist.ɵfac = function ClrDatalist_Factory(t) { return new (t || ClrDatalist)(ɵngcc0.ɵɵdirectiveInject(DatalistIdService, 8)); };
ClrDatalist.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: ClrDatalist, selectors: [["datalist"]], hostVars: 1, hostBindings: function ClrDatalist_HostBindings(rf, ctx) { if (rf & 2) {
        ɵngcc0.ɵɵhostProperty("id", ctx.datalistId);
    } }, inputs: { id: "id" } });
ClrDatalist.ctorParameters = () => [
    { type: DatalistIdService, decorators: [{ type: Optional }] }
];
__decorate([
    Input()
], ClrDatalist.prototype, "id", null);
ClrDatalist = __decorate([ __param(0, Optional())
], ClrDatalist);
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ClrDatalist, [{
        type: Directive,
        args: [{
                selector: 'datalist',
                host: {
                    '[id]': 'datalistId'
                }
            }]
    }], function () { return [{ type: DatalistIdService, decorators: [{
                type: Optional
            }] }]; }, { id: [{
            type: Input
        }] }); })();
export { ClrDatalist };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGF0YWxpc3QuanMiLCJzb3VyY2VzIjpbIm5nOi9AY2xyL2FuZ3VsYXIvZm9ybXMvZGF0YWxpc3QvZGF0YWxpc3QudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQSxPQUFPLEVBQUUsS0FBSyxFQUFFLFNBQVMsRUFBb0IsUUFBUSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBRzdFLE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxNQUFNLGlDQUFpQyxDQUFDOztBQVFwRSxJQUFhLFdBQVcsR0FBeEIsTUFBYSxXQUFXO0FBQUcsSUFFekIsWUFBZ0MsaUJBQW9DO0FBQUksUUFBeEMsc0JBQWlCLEdBQWpCLGlCQUFpQixDQUFtQjtBQUFDLFFBRDdELGtCQUFhLEdBQW1CLEVBQUUsQ0FBQztBQUM3QyxJQUF5RSxDQUFDO0FBQzFFLElBRUUsa0JBQWtCO0FBQ3BCLFFBQUksSUFBSSxDQUFDLElBQUksQ0FBQyxpQkFBaUIsRUFBRTtBQUNqQyxZQUFNLE9BQU87QUFDYixTQUFLO0FBQ0wsUUFBSSxJQUFJLENBQUMsYUFBYSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsaUJBQWlCLENBQUMsUUFBUSxDQUFDLFNBQVMsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLFVBQVUsR0FBRyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDckcsSUFBRSxDQUFDO0FBQ0gsSUFDRSxJQUFJLEVBQUUsQ0FBQyxPQUFPO0FBQ2hCLFFBQUksSUFBSSxDQUFDLENBQUMsT0FBTyxJQUFJLElBQUksQ0FBQyxpQkFBaUIsRUFBRTtBQUM3QyxZQUFNLElBQUksQ0FBQyxVQUFVLEdBQUcsT0FBTyxDQUFDO0FBQ2hDLFlBQU0sSUFBSSxDQUFDLGlCQUFpQixDQUFDLEVBQUUsR0FBRyxPQUFPLENBQUM7QUFDMUMsU0FBSztBQUFDLGFBQUssSUFBSSxDQUFDLENBQUMsT0FBTyxFQUFFO0FBQzFCLFlBQU0sSUFBSSxDQUFDLFVBQVUsR0FBRyxPQUFPLENBQUM7QUFDaEMsU0FBSztBQUNMLElBQUUsQ0FBQztBQUNILElBQ0UsV0FBVztBQUNiLFFBQUksSUFBSSxDQUFDLGFBQWEsQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsV0FBVyxFQUFFLENBQUMsQ0FBQztBQUN6RCxJQUFFLENBQUM7QUFDSCxDQUFDOzs7O2lDQUFBO0FBQ0Q7QUFBcUMsWUF2QmdCLGlCQUFpQix1QkFBdkQsUUFBUTtBQUFNO0FBVTNCO0FBQWEsSUFEWixLQUFLLEVBQUU7QUFDVixxQ0FPRztBQW5CVSxXQUFXLG9CQU52QixTQUFTLENBQUMsZkFNUCxDQUVXLFdBQUEsUUFBUSxFQUFFLENBQUE7Q0FQdkIsUUFBUSxFQUFFLFhBT2MsR0FGYixXQUFXLENBd0J2QjtJQTdCcUIsVUFDcEIsSUFBSSxFQUFFLGNBQ0osTUFBTSxFQUFFLFlBQVksV0FDckI7RUFDRixDQUFDOzs7Ozs7Ozs7OztvQkEwQkY7QUFBQyxTQXpCWSxXQUFXO0FBQUkiLCJzb3VyY2VzQ29udGVudCI6WyIvKlxuICogQ29weXJpZ2h0IChjKSAyMDE2LTIwMjAgVk13YXJlLCBJbmMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKiBUaGlzIHNvZnR3YXJlIGlzIHJlbGVhc2VkIHVuZGVyIE1JVCBsaWNlbnNlLlxuICogVGhlIGZ1bGwgbGljZW5zZSBpbmZvcm1hdGlvbiBjYW4gYmUgZm91bmQgaW4gTElDRU5TRSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBwcm9qZWN0LlxuICovXG5cbmltcG9ydCB7IElucHV0LCBEaXJlY3RpdmUsIEFmdGVyQ29udGVudEluaXQsIE9wdGlvbmFsIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbmltcG9ydCB7IFN1YnNjcmlwdGlvbiB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgRGF0YWxpc3RJZFNlcnZpY2UgfSBmcm9tICcuL3Byb3ZpZGVycy9kYXRhbGlzdC1pZC5zZXJ2aWNlJztcblxuQERpcmVjdGl2ZSh7XG4gIHNlbGVjdG9yOiAnZGF0YWxpc3QnLFxuICBob3N0OiB7XG4gICAgJ1tpZF0nOiAnZGF0YWxpc3RJZCcsXG4gIH0sXG59KVxuZXhwb3J0IGNsYXNzIENsckRhdGFsaXN0IGltcGxlbWVudHMgQWZ0ZXJDb250ZW50SW5pdCB7XG4gIHByaXZhdGUgc3Vic2NyaXB0aW9uczogU3Vic2NyaXB0aW9uW10gPSBbXTtcbiAgY29uc3RydWN0b3IoQE9wdGlvbmFsKCkgcHJpdmF0ZSBkYXRhbGlzdElkU2VydmljZTogRGF0YWxpc3RJZFNlcnZpY2UpIHt9XG4gIGRhdGFsaXN0SWQ6IHN0cmluZztcblxuICBuZ0FmdGVyQ29udGVudEluaXQoKSB7XG4gICAgaWYgKCF0aGlzLmRhdGFsaXN0SWRTZXJ2aWNlKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHRoaXMuc3Vic2NyaXB0aW9ucy5wdXNoKHRoaXMuZGF0YWxpc3RJZFNlcnZpY2UuaWRDaGFuZ2Uuc3Vic2NyaWJlKGlkID0+ICh0aGlzLmRhdGFsaXN0SWQgPSBpZCkpKTtcbiAgfVxuICBASW5wdXQoKVxuICBzZXQgaWQoaWRWYWx1ZSkge1xuICAgIGlmICghIWlkVmFsdWUgJiYgdGhpcy5kYXRhbGlzdElkU2VydmljZSkge1xuICAgICAgdGhpcy5kYXRhbGlzdElkID0gaWRWYWx1ZTtcbiAgICAgIHRoaXMuZGF0YWxpc3RJZFNlcnZpY2UuaWQgPSBpZFZhbHVlO1xuICAgIH0gZWxzZSBpZiAoISFpZFZhbHVlKSB7XG4gICAgICB0aGlzLmRhdGFsaXN0SWQgPSBpZFZhbHVlO1xuICAgIH1cbiAgfVxuXG4gIG5nT25EZXN0cm95KCkge1xuICAgIHRoaXMuc3Vic2NyaXB0aW9ucy5mb3JFYWNoKHN1YiA9PiBzdWIudW5zdWJzY3JpYmUoKSk7XG4gIH1cbn1cbiJdfQ==