import { __decorate, __param } from "tslib";
/*
 * Copyright (c) 2016-2019 VMware, Inc. All Rights Reserved.
 * This software is released under MIT license.
 * The full license information can be found in LICENSE in the root directory of this project.
 */
import { AfterViewChecked, ElementRef, HostBinding, Injectable, Injector, OnDestroy, Renderer2, SkipSelf, } from '@angular/core';
import { ClrPopoverToggleService } from '../../utils/popover/providers/popover-toggle.service';
import { Popover } from './popover';
// Literally any annotation would work here, but writing our own @HoneyBadger annotation feels overkill.
import * as ɵngcc0 from '@angular/core';
let AbstractPopover = class AbstractPopover {
    constructor(injector, parentHost) {
        this.parentHost = parentHost;
        this.updateAnchor = false;
        this.popoverOptions = {};
        /*
           * Until https://github.com/angular/angular/issues/8785 is supported, we don't have any way to instantiate
           * a separate directive on the host. So let's do dirty but performant for now.
           */
        this.closeOnOutsideClick = false;
        this.el = injector.get(ElementRef);
        this.toggleService = injector.get(ClrPopoverToggleService);
        this.renderer = injector.get(Renderer2);
        // Default anchor is the parent host
        this.anchorElem = parentHost.nativeElement;
        this.popoverInstance = new Popover(this.el.nativeElement);
        this.subscription = this.toggleService.openChange.subscribe(change => {
            if (change) {
                this.anchor();
                this.attachESCListener();
            }
            else {
                this.release();
                this.detachESCListener();
            }
        });
        if (this.toggleService.open) {
            this.anchor();
            this.attachESCListener();
        }
    }
    anchor() {
        this.updateAnchor = true;
        // Ugh
        this.ignore = this.toggleService.originalEvent;
    }
    release() {
        this.detachOutsideClickListener();
        this.popoverInstance.release();
    }
    ngAfterViewChecked() {
        if (this.updateAnchor) {
            this.updateAnchor = false;
            this.popoverInstance
                .anchor(this.anchorElem, this.anchorPoint, this.popoverPoint, this.popoverOptions)
                .subscribe(() => {
                // if a scroll event is detected, close the popover
                this.toggleService.open = false;
            });
            this.attachOutsideClickListener();
        }
    }
    ngOnDestroy() {
        this.release();
        this.detachESCListener();
        this.subscription.unsubscribe();
    }
    /*
       * Fallback to hide when *clrIfOpen is not being used
       */
    get isOffScreen() {
        return this.toggleService.open ? false : true;
    }
    attachESCListener() {
        if (!this.popoverOptions.ignoreGlobalESCListener) {
            this.documentESCListener = this.renderer.listen('document', 'keydown', event => {
                if (event && event.key) {
                    if (event.key === 'Escape' || event.key === 'Esc') {
                        this.toggleService.open = false;
                    }
                }
            });
        }
    }
    detachESCListener() {
        if (this.documentESCListener) {
            this.documentESCListener();
            delete this.documentESCListener;
        }
    }
    attachOutsideClickListener() {
        if (this.closeOnOutsideClick) {
            this.hostClickListener = this.renderer.listen(this.el.nativeElement, 'click', event => (this.ignore = event));
            if (this.ignoredElement) {
                this.ignoredElementClickListener = this.renderer.listen(this.ignoredElement, 'click', event => (this.ignore = event));
            }
            this.documentClickListener = this.renderer.listen('document', 'click', event => {
                if (event === this.ignore) {
                    delete this.ignore;
                }
                else {
                    this.toggleService.open = false;
                }
            });
        }
    }
    detachOutsideClickListener() {
        if (this.closeOnOutsideClick) {
            if (this.hostClickListener) {
                this.hostClickListener();
                delete this.hostClickListener;
            }
            if (this.ignoredElementClickListener) {
                this.ignoredElementClickListener();
                delete this.ignoredElementClickListener;
            }
            if (this.documentClickListener) {
                this.documentClickListener();
                delete this.documentClickListener;
            }
        }
    }
};
AbstractPopover.ɵfac = function AbstractPopover_Factory(t) { return new (t || AbstractPopover)(ɵngcc0.ɵɵinject(ɵngcc0.Injector), ɵngcc0.ɵɵinject(ɵngcc0.ElementRef, 4)); };
AbstractPopover.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: AbstractPopover, factory: AbstractPopover.ɵfac });
AbstractPopover.ctorParameters = () => [
    { type: Injector },
    { type: ElementRef, decorators: [{ type: SkipSelf }] }
];
__decorate([
    HostBinding('class.is-off-screen')
], AbstractPopover.prototype, "isOffScreen", null);
AbstractPopover = __decorate([ __param(1, SkipSelf())
], AbstractPopover);
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(AbstractPopover, [{
        type: Injectable
    }], function () { return [{ type: ɵngcc0.Injector }, { type: ɵngcc0.ElementRef, decorators: [{
                type: SkipSelf
            }] }]; }, { isOffScreen: [{
            type: HostBinding,
            args: ['class.is-off-screen']
        }] }); })();
export { AbstractPopover };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,