/*
 * Copyright (c) 2016-2019 VMware, Inc. All Rights Reserved.
 * This software is released under MIT license.
 * The full license information can be found in LICENSE in the root directory of this project.
 */
import { __decorate } from "tslib";
import { Directive, HostListener } from '@angular/core';
import { ClrPopoverToggleService } from '../../utils/popover/providers/popover-toggle.service';
import { TooltipIdService } from './providers/tooltip-id.service';
import * as ɵngcc0 from '@angular/core';
let ClrTooltipTrigger = class ClrTooltipTrigger {
    constructor(toggleService, tooltipIdService) {
        this.toggleService = toggleService;
        this.tooltipIdService = tooltipIdService;
        this.subs = [];
        // The aria-described by comes from the id of content. It
        this.subs.push(this.tooltipIdService.id.subscribe(tooltipId => (this.ariaDescribedBy = tooltipId)));
    }
    showTooltip() {
        this.toggleService.open = true;
    }
    hideTooltip() {
        this.toggleService.open = false;
    }
    ngOnDestroy() {
        this.subs.forEach(sub => sub.unsubscribe());
    }
};
ClrTooltipTrigger.ɵfac = function ClrTooltipTrigger_Factory(t) { return new (t || ClrTooltipTrigger)(ɵngcc0.ɵɵdirectiveInject(ClrPopoverToggleService), ɵngcc0.ɵɵdirectiveInject(TooltipIdService)); };
ClrTooltipTrigger.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: ClrTooltipTrigger, selectors: [["", "clrTooltipTrigger", ""]], hostAttrs: ["tabindex", "0"], hostVars: 4, hostBindings: function ClrTooltipTrigger_HostBindings(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵlistener("mouseenter", function ClrTooltipTrigger_mouseenter_HostBindingHandler() { return ctx.showTooltip(); })("focus", function ClrTooltipTrigger_focus_HostBindingHandler() { return ctx.showTooltip(); })("mouseleave", function ClrTooltipTrigger_mouseleave_HostBindingHandler() { return ctx.hideTooltip(); })("blur", function ClrTooltipTrigger_blur_HostBindingHandler() { return ctx.hideTooltip(); });
    } if (rf & 2) {
        ɵngcc0.ɵɵattribute("aria-describedby", ctx.ariaDescribedBy)("role", "button");
        ɵngcc0.ɵɵclassProp("tooltip-trigger", true);
    } } });
ClrTooltipTrigger.ctorParameters = () => [
    { type: ClrPopoverToggleService },
    { type: TooltipIdService }
];
__decorate([
    HostListener('mouseenter'),
    HostListener('focus')
], ClrTooltipTrigger.prototype, "showTooltip", null);
__decorate([
    HostListener('mouseleave'),
    HostListener('blur')
], ClrTooltipTrigger.prototype, "hideTooltip", null);
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ClrTooltipTrigger, [{
        type: Directive,
        args: [{
                selector: '[clrTooltipTrigger]',
                host: {
                    tabindex: '0',
                    '[class.tooltip-trigger]': 'true',
                    '[attr.aria-describedby]': 'ariaDescribedBy',
                    '[attr.role]': '"button"'
                }
            }]
    }], function () { return [{ type: ClrPopoverToggleService }, { type: TooltipIdService }]; }, { showTooltip: [{
            type: HostListener,
            args: ['mouseenter']
        }, {
            type: HostListener,
            args: ['focus']
        }], hideTooltip: [{
            type: HostListener,
            args: ['mouseleave']
        }, {
            type: HostListener,
            args: ['blur']
        }] }); })();
export { ClrTooltipTrigger };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidG9vbHRpcC10cmlnZ2VyLmpzIiwic291cmNlcyI6WyJuZzovQGNsci9hbmd1bGFyL3BvcG92ZXIvdG9vbHRpcC90b29sdGlwLXRyaWdnZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQSxPQUFPLEVBQUUsU0FBUyxFQUFFLFlBQVksRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUN4RCxPQUFPLEVBQUUsdUJBQXVCLEVBQUUsTUFBTSxzREFBc0QsQ0FBQztBQUMvRixPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSxnQ0FBZ0MsQ0FBQzs7QUFZbEUsSUFBYSxpQkFBaUIsR0FBOUIsTUFBYSxpQkFBaUI7QUFDOUIsSUFFRSxZQUFvQixhQUFzQyxFQUFVLGdCQUFrQztBQUN4RyxRQURzQixrQkFBYSxHQUFiLGFBQWEsQ0FBeUI7QUFBQyxRQUFTLHFCQUFnQixHQUFoQixnQkFBZ0IsQ0FBa0I7QUFBQyxRQUQvRixTQUFJLEdBQW1CLEVBQUUsQ0FBQztBQUNwQyxRQUNJLHlEQUF5RDtBQUM3RCxRQUFJLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxFQUFFLENBQUMsU0FBUyxDQUFDLFNBQVMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsZUFBZSxHQUFHLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUN4RyxJQUFFLENBQUM7QUFDSCxJQUdFLFdBQVc7QUFBSyxRQUNkLElBQUksQ0FBQyxhQUFhLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQztBQUNuQyxJQUFFLENBQUM7QUFDSCxJQUdFLFdBQVc7QUFBSyxRQUNkLElBQUksQ0FBQyxhQUFhLENBQUMsSUFBSSxHQUFHLEtBQUssQ0FBQztBQUNwQyxJQUFFLENBQUM7QUFDSCxJQUNFLFdBQVc7QUFDYixRQUFJLElBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDLFdBQVcsRUFBRSxDQUFDLENBQUM7QUFDaEQsSUFBRSxDQUFDO0FBQ0gsQ0FBQzs7Ozs7OztXQUFBO0FBQ0Q7QUFBMkMsWUFyQk4sdUJBQXVCO0FBQUksWUFBd0IsZ0JBQWdCO0FBQUc7QUFPekc7QUFBYSxJQUZaLFlBQVksQ0FBQyxZQUFZLENBQUM7QUFDNUIsSUFBRSxZQUFZLENBQUMsT0FBTyxDQUFDO0FBQ3hCLG9EQUVHO0FBSUQ7QUFBYSxJQUZaLFlBQVksQ0FBQyxZQUFZLENBQUM7QUFDNUIsSUFBRSxZQUFZLENBQUMsTUFBTSxDQUFDO0FBQ3ZCLG9EQUVHO0FBbEJVLGlCQUFpQixvQkFUN0IsU0FBUyxDQUFDLFVBQ1QsUUFBUSxFQUFFO1lBQXFCLFVBQy9CO0NBQUksRUFBRTtBQUNKLFFBQVEsRUFBRSxHQUFHLGNBQ2I7R0FBeUIsRUFBRSxNQUFNO0NBQ2pDLHlCQUF5QixFQUFFO1VBQWlCLGNBQzVDLGFBQWEsRUFBRSxVQUFVO0tBQzFCLE9BQ0YsQ0FBQyxJQUNXLGlCQUFpQixDQXVCN0I7Ozs7Ozs7Ozs7Ozs7Ozs7b0JBQ0Q7QUFBQyxTQXhCWSxpQkFBaUI7QUFDN0IiLCJzb3VyY2VzQ29udGVudCI6WyIvKlxuICogQ29weXJpZ2h0IChjKSAyMDE2LTIwMTkgVk13YXJlLCBJbmMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKiBUaGlzIHNvZnR3YXJlIGlzIHJlbGVhc2VkIHVuZGVyIE1JVCBsaWNlbnNlLlxuICogVGhlIGZ1bGwgbGljZW5zZSBpbmZvcm1hdGlvbiBjYW4gYmUgZm91bmQgaW4gTElDRU5TRSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBwcm9qZWN0LlxuICovXG5cbmltcG9ydCB7IERpcmVjdGl2ZSwgSG9zdExpc3RlbmVyIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBDbHJQb3BvdmVyVG9nZ2xlU2VydmljZSB9IGZyb20gJy4uLy4uL3V0aWxzL3BvcG92ZXIvcHJvdmlkZXJzL3BvcG92ZXItdG9nZ2xlLnNlcnZpY2UnO1xuaW1wb3J0IHsgVG9vbHRpcElkU2VydmljZSB9IGZyb20gJy4vcHJvdmlkZXJzL3Rvb2x0aXAtaWQuc2VydmljZSc7XG5pbXBvcnQgeyBTdWJzY3JpcHRpb24gfSBmcm9tICdyeGpzJztcblxuQERpcmVjdGl2ZSh7XG4gIHNlbGVjdG9yOiAnW2NsclRvb2x0aXBUcmlnZ2VyXScsXG4gIGhvc3Q6IHtcbiAgICB0YWJpbmRleDogJzAnLFxuICAgICdbY2xhc3MudG9vbHRpcC10cmlnZ2VyXSc6ICd0cnVlJyxcbiAgICAnW2F0dHIuYXJpYS1kZXNjcmliZWRieV0nOiAnYXJpYURlc2NyaWJlZEJ5JyxcbiAgICAnW2F0dHIucm9sZV0nOiAnXCJidXR0b25cIicsXG4gIH0sXG59KVxuZXhwb3J0IGNsYXNzIENsclRvb2x0aXBUcmlnZ2VyIHtcbiAgcHVibGljIGFyaWFEZXNjcmliZWRCeTtcbiAgcHJpdmF0ZSBzdWJzOiBTdWJzY3JpcHRpb25bXSA9IFtdO1xuICBjb25zdHJ1Y3Rvcihwcml2YXRlIHRvZ2dsZVNlcnZpY2U6IENsclBvcG92ZXJUb2dnbGVTZXJ2aWNlLCBwcml2YXRlIHRvb2x0aXBJZFNlcnZpY2U6IFRvb2x0aXBJZFNlcnZpY2UpIHtcbiAgICAvLyBUaGUgYXJpYS1kZXNjcmliZWQgYnkgY29tZXMgZnJvbSB0aGUgaWQgb2YgY29udGVudC4gSXRcbiAgICB0aGlzLnN1YnMucHVzaCh0aGlzLnRvb2x0aXBJZFNlcnZpY2UuaWQuc3Vic2NyaWJlKHRvb2x0aXBJZCA9PiAodGhpcy5hcmlhRGVzY3JpYmVkQnkgPSB0b29sdGlwSWQpKSk7XG4gIH1cblxuICBASG9zdExpc3RlbmVyKCdtb3VzZWVudGVyJylcbiAgQEhvc3RMaXN0ZW5lcignZm9jdXMnKVxuICBzaG93VG9vbHRpcCgpOiB2b2lkIHtcbiAgICB0aGlzLnRvZ2dsZVNlcnZpY2Uub3BlbiA9IHRydWU7XG4gIH1cblxuICBASG9zdExpc3RlbmVyKCdtb3VzZWxlYXZlJylcbiAgQEhvc3RMaXN0ZW5lcignYmx1cicpXG4gIGhpZGVUb29sdGlwKCk6IHZvaWQge1xuICAgIHRoaXMudG9nZ2xlU2VydmljZS5vcGVuID0gZmFsc2U7XG4gIH1cblxuICBuZ09uRGVzdHJveSgpIHtcbiAgICB0aGlzLnN1YnMuZm9yRWFjaChzdWIgPT4gc3ViLnVuc3Vic2NyaWJlKCkpO1xuICB9XG59XG4iXX0=