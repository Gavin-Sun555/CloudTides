/*
 * Copyright (c) 2016-2020 VMware, Inc. All Rights Reserved.
 * This software is released under MIT license.
 * The full license information can be found in LICENSE in the root directory of this project.
 */
import { __decorate, __param } from "tslib";
import { isPlatformBrowser } from '@angular/common';
import { Inject, Injectable, Optional, PLATFORM_ID, Renderer2, SkipSelf } from '@angular/core';
import { of, ReplaySubject } from 'rxjs';
import { map, take } from 'rxjs/operators';
import { ClrPopoverToggleService } from '../../../utils/popover/providers/popover-toggle.service';
import { customFocusableItemProvider } from '../../../utils/focus/focusable-item/custom-focusable-item-provider';
import { UNIQUE_ID } from '../../../utils/id-generator/id-generator.service';
import { ArrowKeyDirection } from '../../../utils/focus/arrow-key-direction.enum';
import { FocusService } from '../../../utils/focus/focus.service';
import { Linkers } from '../../../utils/focus/focusable-item/linkers';
import { wrapObservable } from '../../../utils/focus/wrap-observable';
import * as ɵngcc0 from '@angular/core';
let DropdownFocusHandler = class DropdownFocusHandler {
    constructor(id, renderer, parent, toggleService, focusService, platformId) {
        this.id = id;
        this.renderer = renderer;
        this.parent = parent;
        this.toggleService = toggleService;
        this.focusService = focusService;
        this.platformId = platformId;
        this._unlistenFuncs = [];
        this.focusBackOnTrigger = false;
        this.resetChildren();
        this.moveToFirstItemWhenOpen();
        if (!this.parent) {
            this.handleRootFocus();
        }
    }
    /**
     * If the dropdown was opened by clicking on the trigger, we automatically move to the first item
     */
    moveToFirstItemWhenOpen() {
        this.toggleService.openChange.subscribe(open => {
            if (open && this.toggleService.originalEvent) {
                // Even if we properly waited for ngAfterViewInit, the container still wouldn't be attached to the DOM.
                // So setTimeout is the only way to wait for the container to be ready to move focus to first item.
                setTimeout(() => {
                    this.focusService.moveTo(this);
                    if (this.parent) {
                        this.focusService.move(ArrowKeyDirection.RIGHT);
                    }
                    else {
                        this.focusService.move(ArrowKeyDirection.DOWN);
                    }
                });
            }
        });
    }
    /**
     * Focus on the menu when it opens, and focus back on the root trigger when the whole dropdown becomes closed
     */
    handleRootFocus() {
        this.toggleService.openChange.subscribe(open => {
            if (!open) {
                // We reset the state of the focus service both on initialization and when closing.
                this.focusService.reset(this);
                // But we only actively focus the trigger when closing, not on initialization.
                if (this.focusBackOnTrigger) {
                    this.focus();
                }
            }
            this.focusBackOnTrigger = open;
        });
    }
    get trigger() {
        return this._trigger;
    }
    set trigger(el) {
        this._trigger = el;
        if (this.parent) {
            this._unlistenFuncs.push(this.renderer.listen(el, 'keydown.arrowright', event => this.toggleService.toggleWithEvent(event)));
        }
        else {
            this._unlistenFuncs.push(this.renderer.listen(el, 'keydown.arrowup', event => this.toggleService.toggleWithEvent(event)));
            this._unlistenFuncs.push(this.renderer.listen(el, 'keydown.arrowdown', event => this.toggleService.toggleWithEvent(event)));
            this.focusService.listenToArrowKeys(el);
        }
    }
    get container() {
        return this._container;
    }
    set container(el) {
        this._container = el;
        // whether root container or not, tab key should always toggle (i.e. close) the container
        this._unlistenFuncs.push(this.renderer.listen(el, 'keydown.tab', event => this.toggleService.toggleWithEvent(event)));
        if (this.parent) {
            // if it's a nested container, pressing esc has the same effect as pressing left key, which closes the current
            // popup and moves up to its parent. Here, we stop propagation so that the parent container
            // doesn't receive the esc keydown
            this._unlistenFuncs.push(this.renderer.listen(el, 'keydown.esc', event => {
                this.focusService.move(ArrowKeyDirection.LEFT);
                event.stopPropagation();
            }));
        }
        else {
            // The root container is the only one we register to the focus service, others do not need focus
            this.focusService.registerContainer(el);
            // The root container will simply close the container when esc key is pressed
            this._unlistenFuncs.push(this.renderer.listen(el, 'keydown.esc', event => this.toggleService.toggleWithEvent(event)));
            // When the user moves focus outside of the menu, we close the dropdown
            this._unlistenFuncs.push(this.renderer.listen(el, 'blur', event => {
                // we clear out any existing focus on the items
                this.children.pipe(take(1)).subscribe(items => items.forEach(item => item.blur()));
                // event.relatedTarget is null in IE11. In that case we use document.activeElement which correctly points
                // to the element we want to check. Note that other browsers might point document.activeElement to the
                // wrong element. This is ok, because all the other browsers we support relies on event.relatedTarget.
                const target = event.relatedTarget || document.activeElement;
                // If the user clicks on an item which triggers the blur, we don't want to close it since it may open a submenu.
                // In the case of needing to close it (i.e. user selected an item and the dropdown menu is set to close on
                // selection), dropdown-item.ts handles it.
                if (target && isPlatformBrowser(this.platformId)) {
                    if (el.contains(target) || target === this.trigger) {
                        return;
                    }
                }
                // We let the user move focus to where the want, we don't force the focus back on the trigger
                this.focusBackOnTrigger = false;
                this.toggleService.open = false;
            }));
        }
    }
    focus() {
        if (this.trigger && isPlatformBrowser(this.platformId)) {
            this.trigger.focus();
        }
    }
    blur() {
        if (this.trigger && isPlatformBrowser(this.platformId)) {
            this.trigger.blur();
        }
    }
    activate() {
        if (isPlatformBrowser(this.platformId)) {
            this.trigger.click();
        }
    }
    openAndGetChildren() {
        return wrapObservable(this.children, () => (this.toggleService.open = true));
    }
    closeAndGetThis() {
        return wrapObservable(of(this), () => (this.toggleService.open = false));
    }
    resetChildren() {
        this.children = new ReplaySubject(1);
        if (this.parent) {
            this.right = this.openAndGetChildren().pipe(map(all => all[0]));
        }
        else {
            this.down = this.openAndGetChildren().pipe(map(all => all[0]));
            this.up = this.openAndGetChildren().pipe(map(all => all[all.length - 1]));
        }
    }
    addChildren(children) {
        Linkers.linkVertical(children);
        if (this.parent) {
            Linkers.linkParent(children, this.closeAndGetThis(), ArrowKeyDirection.LEFT);
        }
        this.children.next(children);
    }
    ngOnDestroy() {
        this._unlistenFuncs.forEach((unlisten) => unlisten());
        this.focusService.detachListeners();
    }
};
DropdownFocusHandler.ɵfac = function DropdownFocusHandler_Factory(t) { return new (t || DropdownFocusHandler)(ɵngcc0.ɵɵinject(UNIQUE_ID), ɵngcc0.ɵɵinject(ɵngcc0.Renderer2), ɵngcc0.ɵɵinject(DropdownFocusHandler, 12), ɵngcc0.ɵɵinject(ClrPopoverToggleService), ɵngcc0.ɵɵinject(FocusService), ɵngcc0.ɵɵinject(PLATFORM_ID)); };
DropdownFocusHandler.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: DropdownFocusHandler, factory: DropdownFocusHandler.ɵfac });
DropdownFocusHandler.ctorParameters = () => [
    { type: String, decorators: [{ type: Inject, args: [UNIQUE_ID,] }] },
    { type: Renderer2 },
    { type: DropdownFocusHandler, decorators: [{ type: SkipSelf }, { type: Optional }] },
    { type: ClrPopoverToggleService },
    { type: FocusService },
    { type: Object, decorators: [{ type: Inject, args: [PLATFORM_ID,] }] }
];
DropdownFocusHandler = __decorate([ __param(0, Inject(UNIQUE_ID)),
    __param(2, SkipSelf()),
    __param(2, Optional()),
    __param(5, Inject(PLATFORM_ID))
], DropdownFocusHandler);
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(DropdownFocusHandler, [{
        type: Injectable
    }], function () { return [{ type: String, decorators: [{
                type: Inject,
                args: [UNIQUE_ID]
            }] }, { type: ɵngcc0.Renderer2 }, { type: DropdownFocusHandler, decorators: [{
                type: SkipSelf
            }, {
                type: Optional
            }] }, { type: ClrPopoverToggleService }, { type: FocusService }, { type: Object, decorators: [{
                type: Inject,
                args: [PLATFORM_ID]
            }] }]; }, null); })();
export { DropdownFocusHandler };
export const DROPDOWN_FOCUS_HANDLER_PROVIDER = customFocusableItemProvider(DropdownFocusHandler);

//# sourceMappingURL=data:application/json;charset=utf-8;base64,