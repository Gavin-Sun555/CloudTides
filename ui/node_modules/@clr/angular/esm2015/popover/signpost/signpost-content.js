import { __decorate, __param } from "tslib";
/*
 * Copyright (c) 2016-2020 VMware, Inc. All Rights Reserved.
 * This software is released under MIT license.
 * The full license information can be found in LICENSE in the root directory of this project.
 */
import { Component, ElementRef, Inject, Injector, Input, Optional, OnDestroy, PLATFORM_ID } from '@angular/core';
import { AbstractPopover } from '../common/abstract-popover';
import { POPOVER_HOST_ANCHOR } from '../common/popover-host-anchor.token';
import { SIGNPOST_POSITIONS } from './signpost-positions';
import { ClrCommonStringsService } from '../../utils/i18n/common-strings.service';
import { UNIQUE_ID, UNIQUE_ID_PROVIDER } from '../../utils/id-generator/id-generator.service';
import { SignpostIdService } from './providers/signpost-id.service';
import { SignpostFocusManager } from './providers/signpost-focus-manager.service';
import { DOCUMENT, isPlatformBrowser } from '@angular/common';
// aka where the arrow / pointer is at in relation to the anchor
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '../../icon/icon';

const _c0 = ["*"];
const POSITIONS = [
    'top-left',
    'top-middle',
    'top-right',
    'right-top',
    'right-middle',
    'right-bottom',
    'bottom-right',
    'bottom-middle',
    'bottom-left',
    'left-bottom',
    'left-middle',
    'left-top',
];
let ClrSignpostContent = class ClrSignpostContent extends AbstractPopover {
    constructor(injector, parentHost, commonStrings, signpostContentId, signpostIdService, signpostFocusManager, platformId, document) {
        super(injector, parentHost);
        this.commonStrings = commonStrings;
        this.signpostContentId = signpostContentId;
        this.signpostIdService = signpostIdService;
        this.signpostFocusManager = signpostFocusManager;
        this.platformId = platformId;
        if (!parentHost) {
            throw new Error('clr-signpost-content should only be used inside of a clr-signpost');
        }
        // Defaults
        this.position = 'right-middle';
        this.closeOnOutsideClick = true;
        this.signpostIdService.setId(signpostContentId);
        this.document = document;
    }
    /**********
     *
     * @description
     * Close function that uses the signpost instance to toggle the state of the content popover.
     *
     */
    close() {
        this.toggleService.open = false;
    }
    get position() {
        return this._position;
    }
    /*********
     *
     * @description
     * A setter for the position of the ClrSignpostContent popover. This is a combination of the following:
     * - anchorPoint - where on the trigger to anchor the ClrSignpostContent
     * - popoverPoint - where on the ClrSignpostContent container to align with the anchorPoint
     * - offsetY - where on the Y axis to align the ClrSignpostContent so it meets specs
     * - offsetX - where on the X axis to align the ClrSignpostContent so it meets specs
     * There are 12 possible positions to place a ClrSignpostContent container:
     * - top-left
     * - top-middle
     * - top-right
     * - right-top
     * - right-middle
     * - right-bottom
     * - bottom-right
     * - bottom-middle
     * - bottom-left
     * - left-bottom
     * - left-middle
     * - left-top
     *
     * I think of it as follows for 'top-left' -> CONTAINER_SIDE-SIDE_POSITION. In this case CONTAINER_SIDE is 'top'
     * meaning the top of the trigger icon (above the icon that hides/shows) the ClrSignpostContent. And, SIDE_POSITION
     * is 'left' meaning two things: 1) the ClrSignpostContent container extends to the left and 2) the 'arrow/pointer'
     * linking the SingpostContent to the trigger points down at the horizontal center of the trigger icon.
     *
     * @param newPosition
     */
    set position(position) {
        // Ugh
        this.renderer.removeClass(this.el.nativeElement, this.position);
        if (position && POSITIONS.indexOf(position) > -1) {
            this._position = position;
        }
        else {
            this._position = 'right-middle';
        }
        // Ugh
        this.renderer.addClass(this.el.nativeElement, this.position);
        const setPosition = SIGNPOST_POSITIONS[this.position];
        this.anchorPoint = setPosition.anchorPoint;
        this.popoverPoint = setPosition.popoverPoint;
        this.popoverOptions.offsetY = setPosition.offsetY;
        this.popoverOptions.offsetX = setPosition.offsetX;
    }
    ngOnDestroy() {
        if (isPlatformBrowser(this.platformId) && this.el.nativeElement.contains(this.document.activeElement)) {
            this.signpostFocusManager.focusTrigger();
        }
    }
};
ClrSignpostContent.ɵfac = function ClrSignpostContent_Factory(t) { return new (t || ClrSignpostContent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Injector), ɵngcc0.ɵɵdirectiveInject(POPOVER_HOST_ANCHOR, 8), ɵngcc0.ɵɵdirectiveInject(ClrCommonStringsService), ɵngcc0.ɵɵdirectiveInject(UNIQUE_ID), ɵngcc0.ɵɵdirectiveInject(SignpostIdService), ɵngcc0.ɵɵdirectiveInject(SignpostFocusManager), ɵngcc0.ɵɵdirectiveInject(PLATFORM_ID), ɵngcc0.ɵɵdirectiveInject(DOCUMENT)); };
ClrSignpostContent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: ClrSignpostContent, selectors: [["clr-signpost-content"]], hostVars: 3, hostBindings: function ClrSignpostContent_HostBindings(rf, ctx) { if (rf & 2) {
        ɵngcc0.ɵɵhostProperty("id", ctx.signpostContentId);
        ɵngcc0.ɵɵclassProp("signpost-content", true);
    } }, inputs: { position: ["clrPosition", "position"] }, features: [ɵngcc0.ɵɵProvidersFeature([UNIQUE_ID_PROVIDER]), ɵngcc0.ɵɵInheritDefinitionFeature], ngContentSelectors: _c0, decls: 7, vars: 3, consts: [[1, "signpost-wrap"], [1, "popover-pointer"], [1, "signpost-content-header"], ["type", "button", 1, "signpost-action", "close", 3, "click"], ["shape", "close"], [1, "signpost-content-body"]], template: function ClrSignpostContent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵelementStart(0, "div", 0);
        ɵngcc0.ɵɵelement(1, "div", 1);
        ɵngcc0.ɵɵelementStart(2, "div", 2);
        ɵngcc0.ɵɵelementStart(3, "button", 3);
        ɵngcc0.ɵɵlistener("click", function ClrSignpostContent_Template_button_click_3_listener() { return ctx.close(); });
        ɵngcc0.ɵɵelement(4, "clr-icon", 4);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(5, "div", 5);
        ɵngcc0.ɵɵprojection(6);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵadvance(3);
        ɵngcc0.ɵɵattribute("aria-label", ctx.commonStrings.keys.signpostClose)("aria-controls", ctx.signpostContentId);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵattribute("title", ctx.commonStrings.keys.close);
    } }, directives: [ɵngcc1.ClrIconCustomTag], encapsulation: 2 });
ClrSignpostContent.ctorParameters = () => [
    { type: Injector },
    { type: ElementRef, decorators: [{ type: Optional }, { type: Inject, args: [POPOVER_HOST_ANCHOR,] }] },
    { type: ClrCommonStringsService },
    { type: String, decorators: [{ type: Inject, args: [UNIQUE_ID,] }] },
    { type: SignpostIdService },
    { type: SignpostFocusManager },
    { type: Object, decorators: [{ type: Inject, args: [PLATFORM_ID,] }] },
    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] }
];
__decorate([
    Input('clrPosition')
], ClrSignpostContent.prototype, "position", null);
ClrSignpostContent = __decorate([ __param(1, Optional()),
    __param(1, Inject(POPOVER_HOST_ANCHOR)),
    __param(3, Inject(UNIQUE_ID)),
    __param(6, Inject(PLATFORM_ID)),
    __param(7, Inject(DOCUMENT))
], ClrSignpostContent);
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ClrSignpostContent, [{
        type: Component,
        args: [{
                selector: 'clr-signpost-content',
                template: `
      <div class="signpost-wrap">
          <div class="popover-pointer"></div>
          <div class="signpost-content-header">
              <button type="button" [attr.aria-label]="commonStrings.keys.signpostClose" class="signpost-action close"
                      (click)="close()" [attr.aria-controls]="signpostContentId">
                  <clr-icon shape="close" [attr.title]="commonStrings.keys.close"></clr-icon>
              </button>
          </div>
          <div class="signpost-content-body">
              <ng-content></ng-content>
          </div>
      </div>
  `,
                host: { '[class.signpost-content]': 'true', '[id]': 'signpostContentId' },
                providers: [UNIQUE_ID_PROVIDER]
            }]
    }], function () { return [{ type: ɵngcc0.Injector }, { type: ɵngcc0.ElementRef, decorators: [{
                type: Optional
            }, {
                type: Inject,
                args: [POPOVER_HOST_ANCHOR]
            }] }, { type: ClrCommonStringsService }, { type: String, decorators: [{
                type: Inject,
                args: [UNIQUE_ID]
            }] }, { type: SignpostIdService }, { type: SignpostFocusManager }, { type: Object, decorators: [{
                type: Inject,
                args: [PLATFORM_ID]
            }] }, { type: undefined, decorators: [{
                type: Inject,
                args: [DOCUMENT]
            }] }]; }, { position: [{
            type: Input,
            args: ['clrPosition']
        }] }); })();
export { ClrSignpostContent };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,