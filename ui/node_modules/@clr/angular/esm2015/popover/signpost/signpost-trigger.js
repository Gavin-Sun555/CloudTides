import { __decorate, __param } from "tslib";
/*
 * Copyright (c) 2016-2019 VMware, Inc. All Rights Reserved.
 * This software is released under MIT license.
 * The full license information can be found in LICENSE in the root directory of this project.
 */
import { DOCUMENT, isPlatformBrowser } from '@angular/common';
import { Directive, ElementRef, HostListener, Inject, OnDestroy, PLATFORM_ID } from '@angular/core';
import { ClrPopoverToggleService } from '../../utils/popover/providers/popover-toggle.service';
import { ClrCommonStringsService } from '../../utils/i18n/common-strings.service';
import { SignpostFocusManager } from './providers/signpost-focus-manager.service';
import { SignpostIdService } from './providers/signpost-id.service';
import * as ɵngcc0 from '@angular/core';
let ClrSignpostTrigger = 
/*********
 *
 * @description
 * A Directive added to the ClrSignpost Trigger button that will call the ClrSignpost.toggle() function to hide/show the
 * ClrSignpostContent.
 *
 */
class ClrSignpostTrigger {
    constructor(toggleService, el, commonStrings, signpostIdService, signpostFocusManager, document, platformId) {
        this.toggleService = toggleService;
        this.el = el;
        this.commonStrings = commonStrings;
        this.signpostIdService = signpostIdService;
        this.signpostFocusManager = signpostFocusManager;
        this.platformId = platformId;
        this.subscriptions = [];
        this.document = document;
    }
    ngOnInit() {
        this.signpostFocusManager.triggerEl = this.el.nativeElement;
        this.subscriptions.push(this.toggleService.openChange.subscribe((isOpen) => {
            this.ariaExpanded = isOpen;
            const prevIsOpen = this.isOpen;
            this.isOpen = isOpen;
            // openChange fires false on initialization because signpost starts as closed by default
            // but we shouldn't focus on that initial false value
            // we should focus back only if it's closed after being opened
            if (!this.isOpen && prevIsOpen) {
                this.focusOnClose();
            }
        }), this.signpostIdService.id.subscribe(idChange => (this.ariaControl = idChange)));
    }
    focusOnClose() {
        if (!isPlatformBrowser(this.platformId)) {
            return;
        }
        // we have to set the focus back on the trigger only if the focus is reset back to the body element
        // if the focus is on another element, we are not allowed to move that focus back to this trigger again.
        if (!this.isOpen && this.document.activeElement === this.document.body) {
            this.signpostFocusManager.focusTrigger();
        }
    }
    ngOnDestroy() {
        this.subscriptions.forEach((sub) => sub.unsubscribe());
    }
    /**********
     *
     * @description
     * click handler for the ClrSignpost trigger button used to hide/show ClrSignpostContent.
     */
    onSignpostTriggerClick(event) {
        this.toggleService.toggleWithEvent(event);
    }
};
ClrSignpostTrigger.ɵfac = function ClrSignpostTrigger_Factory(t) { return new (t || ClrSignpostTrigger)(ɵngcc0.ɵɵdirectiveInject(ClrPopoverToggleService), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ClrCommonStringsService), ɵngcc0.ɵɵdirectiveInject(SignpostIdService), ɵngcc0.ɵɵdirectiveInject(SignpostFocusManager), ɵngcc0.ɵɵdirectiveInject(DOCUMENT), ɵngcc0.ɵɵdirectiveInject(PLATFORM_ID)); };
ClrSignpostTrigger.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: ClrSignpostTrigger, selectors: [["", "clrSignpostTrigger", ""]], hostAttrs: [1, "signpost-trigger"], hostVars: 5, hostBindings: function ClrSignpostTrigger_HostBindings(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵlistener("click", function ClrSignpostTrigger_click_HostBindingHandler($event) { return ctx.onSignpostTriggerClick($event); });
    } if (rf & 2) {
        ɵngcc0.ɵɵattribute("aria-label", ctx.commonStrings.keys.signpostToggle)("aria-expanded", ctx.ariaExpanded)("aria-controls", ctx.ariaControl);
        ɵngcc0.ɵɵclassProp("active", ctx.isOpen);
    } } });
ClrSignpostTrigger.ctorParameters = () => [
    { type: ClrPopoverToggleService },
    { type: ElementRef },
    { type: ClrCommonStringsService },
    { type: SignpostIdService },
    { type: SignpostFocusManager },
    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] },
    { type: Object, decorators: [{ type: Inject, args: [PLATFORM_ID,] }] }
];
__decorate([
    HostListener('click', ['$event'])
], ClrSignpostTrigger.prototype, "onSignpostTriggerClick", null);
ClrSignpostTrigger = __decorate([ __param(5, Inject(DOCUMENT)),
    __param(6, Inject(PLATFORM_ID))
], ClrSignpostTrigger);
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ClrSignpostTrigger, [{
        type: Directive,
        args: [{
                selector: '[clrSignpostTrigger]',
                host: {
                    class: 'signpost-trigger',
                    '[attr.aria-label]': 'commonStrings.keys.signpostToggle',
                    '[attr.aria-expanded]': 'ariaExpanded',
                    '[attr.aria-controls]': 'ariaControl',
                    '[class.active]': 'isOpen'
                }
            }]
    }], function () { return [{ type: ClrPopoverToggleService }, { type: ɵngcc0.ElementRef }, { type: ClrCommonStringsService }, { type: SignpostIdService }, { type: SignpostFocusManager }, { type: undefined, decorators: [{
                type: Inject,
                args: [DOCUMENT]
            }] }, { type: Object, decorators: [{
                type: Inject,
                args: [PLATFORM_ID]
            }] }]; }, { onSignpostTriggerClick: [{
            type: HostListener,
            args: ['click', ['$event']]
        }] }); })();
export { ClrSignpostTrigger };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,