import { __decorate } from "tslib";
/*
 * Copyright (c) 2016-2020 VMware, Inc. All Rights Reserved.
 * This software is released under MIT license.
 * The full license information can be found in LICENSE in the root directory of this project.
 */
import { Component, ContentChild, EventEmitter, Injector, Input, OnDestroy, OnInit, Output, ViewContainerRef, ChangeDetectionStrategy, ChangeDetectorRef, SimpleChanges, OnChanges, } from '@angular/core';
import { HostWrapper } from '../../utils/host-wrapping/host-wrapper';
import { DatagridPropertyComparator } from './built-in/comparators/datagrid-property-comparator';
import { DatagridPropertyStringFilter } from './built-in/filters/datagrid-property-string-filter';
import { DatagridPropertyNumericFilter } from './built-in/filters/datagrid-property-numeric-filter';
import { DatagridStringFilterImpl } from './built-in/filters/datagrid-string-filter-impl';
import { DatagridNumericFilterImpl } from './built-in/filters/datagrid-numeric-filter-impl';
import { ClrDatagridSortOrder } from './enums/sort-order.enum';
import { CustomFilter } from './providers/custom-filter';
import { FiltersProvider } from './providers/filters';
import { Sort } from './providers/sort';
import { DatagridFilterRegistrar } from './utils/datagrid-filter-registrar';
import { WrappedColumn } from './wrapped-column';
import { ClrCommonStringsService } from '../../utils/i18n/common-strings.service';
import { ClrPopoverPositionService } from '../../utils/popover/providers/popover-position.service';
import { ClrPopoverEventsService } from '../../utils/popover/providers/popover-events.service';
import { ClrPopoverToggleService } from '../../utils/popover/providers/popover-toggle.service';
import { DetailService } from './providers/detail.service';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@angular/common';
import * as ɵngcc2 from '../../icon/icon';
import * as ɵngcc3 from './built-in/filters/datagrid-string-filter';
import * as ɵngcc4 from './built-in/filters/datagrid-numeric-filter';
import * as ɵngcc5 from './datagrid-column-separator';

function ClrDatagridColumn_button_1_ng_container_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainer(0);
} }
function ClrDatagridColumn_button_1_clr_icon_2_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelement(0, "clr-icon", 10);
} if (rf & 2) {
    const ctx_r8 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵattribute("shape", ctx_r8.sortIcon);
} }
function ClrDatagridColumn_button_1_Template(rf, ctx) { if (rf & 1) {
    const _r10 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "button", 7);
    ɵngcc0.ɵɵlistener("click", function ClrDatagridColumn_button_1_Template_button_click_0_listener() { ɵngcc0.ɵɵrestoreView(_r10); const ctx_r9 = ɵngcc0.ɵɵnextContext(); return ctx_r9.sort(); });
    ɵngcc0.ɵɵtemplate(1, ClrDatagridColumn_button_1_ng_container_1_Template, 1, 0, "ng-container", 8);
    ɵngcc0.ɵɵtemplate(2, ClrDatagridColumn_button_1_clr_icon_2_Template, 1, 1, "clr-icon", 9);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r0 = ɵngcc0.ɵɵnextContext();
    const _r3 = ɵngcc0.ɵɵreference(6);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngTemplateOutlet", _r3);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r0.sortIcon);
} }
function ClrDatagridColumn_clr_dg_string_filter_3_Template(rf, ctx) { if (rf & 1) {
    const _r12 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "clr-dg-string-filter", 11);
    ɵngcc0.ɵɵlistener("clrFilterValueChange", function ClrDatagridColumn_clr_dg_string_filter_3_Template_clr_dg_string_filter_clrFilterValueChange_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r12); const ctx_r11 = ɵngcc0.ɵɵnextContext(); return ctx_r11.filterValue = $event; });
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r1 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("clrDgStringFilter", ctx_r1.registered)("clrFilterValue", ctx_r1.filterValue);
} }
function ClrDatagridColumn_clr_dg_numeric_filter_4_Template(rf, ctx) { if (rf & 1) {
    const _r14 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "clr-dg-numeric-filter", 12);
    ɵngcc0.ɵɵlistener("clrFilterValueChange", function ClrDatagridColumn_clr_dg_numeric_filter_4_Template_clr_dg_numeric_filter_clrFilterValueChange_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r14); const ctx_r13 = ɵngcc0.ɵɵnextContext(); return ctx_r13.filterValue = $event; });
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r2 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("clrDgNumericFilter", ctx_r2.registered)("clrFilterValue", ctx_r2.filterValue);
} }
function ClrDatagridColumn_ng_template_5_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵprojection(0, 1);
} }
function ClrDatagridColumn_span_7_ng_container_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainer(0);
} }
function ClrDatagridColumn_span_7_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "span", 13);
    ɵngcc0.ɵɵtemplate(1, ClrDatagridColumn_span_7_ng_container_1_Template, 1, 0, "ng-container", 8);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    ɵngcc0.ɵɵnextContext();
    const _r3 = ɵngcc0.ɵɵreference(6);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngTemplateOutlet", _r3);
} }
function ClrDatagridColumn_clr_dg_column_separator_8_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelement(0, "clr-dg-column-separator");
} }
const _c0 = [[["clr-dg-filter"], ["clr-dg-string-filter"], ["clr-dg-numeric-filter"]], "*"];
const _c1 = ["clr-dg-filter, clr-dg-string-filter, clr-dg-numeric-filter", "*"];
let ClrDatagridColumn = class ClrDatagridColumn extends DatagridFilterRegistrar {
    constructor(_sort, filters, vcr, detailService, changeDetectorRef, commonStrings) {
        super(filters);
        this._sort = _sort;
        this.vcr = vcr;
        this.detailService = detailService;
        this.changeDetectorRef = changeDetectorRef;
        this.commonStrings = commonStrings;
        this.showSeparator = true;
        /**
         * Subscription to the sort service changes
         */
        this.subscriptions = [];
        /*
        * What type is this column?  This defaults to STRING, but can also be
        * set to NUMBER.  Unsupported types default to STRING. Users can set it
        * via the [clrDgColType] input by setting it to 'string' or 'number'.
        */
        this._colType = 'string';
        // deprecated: to be removed - START
        /**
         * Indicates if the column is currently sorted
         *
         * @deprecated This will be removed soon, in favor of the sortOrder mechanism
         */
        this._sorted = false;
        /**
         * @deprecated This will be removed soon, in favor of the sortOrder mechanism
         */
        this.sortedChange = new EventEmitter();
        // deprecated: to be removed - END
        /**
         * Indicates how the column is currently sorted
         */
        this._sortOrder = ClrDatagridSortOrder.UNSORTED;
        this.sortOrderChange = new EventEmitter();
        /**
         * A custom filter for this column that can be provided in the projected content
         */
        this.customFilter = false;
        this.filterValueChange = new EventEmitter();
        this.subscriptions.push(this.listenForSortingChanges());
        this.subscriptions.push(this.listenForDetailPaneChanges());
    }
    ngOnDestroy() {
        this.subscriptions.forEach(s => s.unsubscribe());
    }
    listenForDetailPaneChanges() {
        return this.detailService.stateChange.subscribe(state => {
            if (this.showSeparator !== !state) {
                this.showSeparator = !state;
                // Have to manually change because of OnPush
                this.changeDetectorRef.markForCheck();
            }
        });
    }
    listenForSortingChanges() {
        return this._sort.change.subscribe(sort => {
            // Need to manually mark the component to be checked
            // for both activating and deactivating sorting
            this.changeDetectorRef.markForCheck();
            // We're only listening to make sure we emit an event when the column goes from sorted to unsorted
            if (this.sortOrder !== ClrDatagridSortOrder.UNSORTED && sort.comparator !== this._sortBy) {
                this._sortOrder = ClrDatagridSortOrder.UNSORTED;
                this.sortOrderChange.emit(this._sortOrder);
                // removes the sortIcon when column becomes unsorted
                this.sortIcon = null;
            }
            // deprecated: to be removed - START
            if (this.sorted && sort.comparator !== this._sortBy) {
                this._sorted = false;
                this.sortedChange.emit(false);
            }
            // deprecated: to be removed - END
        });
    }
    get field() {
        return this._field;
    }
    get colType() {
        return this._colType;
    }
    // TODO: We might want to make this an enum in the future
    set colType(value) {
        this._colType = value;
    }
    set field(field) {
        if (typeof field === 'string') {
            this._field = field;
            if (!this.sortBy) {
                this._sortBy = new DatagridPropertyComparator(field);
            }
        }
    }
    setupDefaultFilter(field, colType) {
        if (colType === 'number') {
            this.setFilter(new DatagridNumericFilterImpl(new DatagridPropertyNumericFilter(field)));
        }
        else if (colType === 'string') {
            this.setFilter(new DatagridStringFilterImpl(new DatagridPropertyStringFilter(field)));
        }
        if (this.filter && this.initFilterValue) {
            this.updateFilterValue = this.initFilterValue;
            // This initFilterValue should be used only once after the filter registration
            // So deleting this property value to prevent it from being used again
            // if this field property is set again
            delete this.initFilterValue;
        }
    }
    ngOnChanges(changes) {
        if (changes.colType &&
            changes.colType.currentValue &&
            changes.colType.currentValue !== changes.colType.previousValue) {
            if (!this.customFilter && !this.filter && this.colType && this.field) {
                this.setupDefaultFilter(this.field, this.colType);
            }
        }
        if (changes.field && changes.field.currentValue && changes.field.currentValue !== changes.field.previousValue) {
            if (!this.customFilter && this.colType) {
                this.setupDefaultFilter(this.field, this.colType);
            }
        }
    }
    get sortBy() {
        return this._sortBy;
    }
    set sortBy(comparator) {
        if (typeof comparator === 'string') {
            this._sortBy = new DatagridPropertyComparator(comparator);
        }
        else {
            if (comparator) {
                this._sortBy = comparator;
            }
            else {
                if (this.field) {
                    this._sortBy = new DatagridPropertyComparator(this.field);
                }
                else {
                    delete this._sortBy;
                }
            }
        }
    }
    /**
     * Indicates if the column is sortable
     */
    get sortable() {
        return !!this._sortBy;
    }
    get sorted() {
        return this._sorted;
    }
    /**
     * @deprecated This will be removed soon, in favor of the sortOrder mechanism
     */
    set sorted(value) {
        if (!value && this.sorted) {
            this._sorted = false;
            this._sort.clear();
        }
        else if (value && !this.sorted) {
            this.sort();
        }
    }
    get sortOrder() {
        return this._sortOrder;
    }
    set sortOrder(value) {
        if (typeof value === 'undefined') {
            return;
        }
        // only if the incoming order is different from the current one
        if (this._sortOrder === value) {
            return;
        }
        switch (value) {
            // the Unsorted case happens when the current state is either Asc or Desc
            default:
            case ClrDatagridSortOrder.UNSORTED:
                this._sort.clear();
                break;
            case ClrDatagridSortOrder.ASC:
                this.sort(false);
                break;
            case ClrDatagridSortOrder.DESC:
                this.sort(true);
                break;
        }
    }
    get ariaSort() {
        switch (this._sortOrder) {
            default:
            case ClrDatagridSortOrder.UNSORTED:
                return 'none';
            case ClrDatagridSortOrder.ASC:
                return 'ascending';
            case ClrDatagridSortOrder.DESC:
                return 'descending';
        }
    }
    /**
     * Sorts the datagrid based on this column
     */
    sort(reverse) {
        if (!this.sortable) {
            return;
        }
        this._sort.toggle(this._sortBy, reverse);
        // setting the private variable to not retrigger the setter logic
        this._sortOrder = this._sort.reverse ? ClrDatagridSortOrder.DESC : ClrDatagridSortOrder.ASC;
        // Sets the correct icon for current sort order
        this.sortIcon = this._sortOrder === ClrDatagridSortOrder.DESC ? 'arrow down' : 'arrow';
        this.sortOrderChange.emit(this._sortOrder);
        // deprecated: to be removed - START
        this._sorted = true;
        this.sortedChange.emit(true);
        // deprecated: to be removed - END
    }
    set projectedFilter(custom) {
        if (custom) {
            this.deleteFilter();
            this.customFilter = true;
        }
    }
    get filterValue() {
        if (this.filter instanceof DatagridStringFilterImpl || this.filter instanceof DatagridNumericFilterImpl) {
            return this.filter.value;
        }
    }
    set updateFilterValue(newValue) {
        if (this.filter) {
            if (this.filter instanceof DatagridStringFilterImpl) {
                if (!newValue || typeof newValue !== 'string') {
                    newValue = '';
                }
                if (newValue !== this.filter.value) {
                    this.filter.value = newValue;
                }
            }
            else if (this.filter instanceof DatagridNumericFilterImpl) {
                if (!newValue || !(newValue instanceof Array)) {
                    newValue = [null, null];
                }
                if (newValue.length === 2 && (newValue[0] !== this.filter.value[0] || newValue[1] !== this.filter.value[1])) {
                    this.filter.value = newValue;
                }
            }
        }
        else {
            this.initFilterValue = newValue;
        }
    }
    set filterValue(newValue) {
        if (this.filter instanceof DatagridStringFilterImpl || this.filter instanceof DatagridNumericFilterImpl) {
            this.updateFilterValue = newValue;
            this.filterValueChange.emit(this.filter.value);
        }
    }
    ngOnInit() {
        this.wrappedInjector = new HostWrapper(WrappedColumn, this.vcr);
    }
    get _view() {
        return this.wrappedInjector.get(WrappedColumn, this.vcr).columnView;
    }
};
ClrDatagridColumn.ɵfac = function ClrDatagridColumn_Factory(t) { return new (t || ClrDatagridColumn)(ɵngcc0.ɵɵdirectiveInject(Sort), ɵngcc0.ɵɵdirectiveInject(FiltersProvider), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef), ɵngcc0.ɵɵdirectiveInject(DetailService), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ClrCommonStringsService)); };
ClrDatagridColumn.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: ClrDatagridColumn, selectors: [["clr-dg-column"]], contentQueries: function ClrDatagridColumn_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {
        ɵngcc0.ɵɵcontentQuery(dirIndex, CustomFilter, true);
    } if (rf & 2) {
        var _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.projectedFilter = _t.first);
    } }, hostAttrs: ["role", "columnheader"], hostVars: 3, hostBindings: function ClrDatagridColumn_HostBindings(rf, ctx) { if (rf & 2) {
        ɵngcc0.ɵɵattribute("aria-sort", ctx.ariaSort);
        ɵngcc0.ɵɵclassProp("datagrid-column", true);
    } }, inputs: { field: ["clrDgField", "field"], colType: ["clrDgColType", "colType"], updateFilterValue: ["clrFilterValue", "updateFilterValue"], sortBy: ["clrDgSortBy", "sortBy"], sorted: ["clrDgSorted", "sorted"], sortOrder: ["clrDgSortOrder", "sortOrder"] }, outputs: { sortedChange: "clrDgSortedChange", sortOrderChange: "clrDgSortOrderChange", filterValueChange: "clrFilterValueChange" }, features: [ɵngcc0.ɵɵProvidersFeature([ClrPopoverPositionService, ClrPopoverEventsService, ClrPopoverToggleService]), ɵngcc0.ɵɵInheritDefinitionFeature, ɵngcc0.ɵɵNgOnChangesFeature], ngContentSelectors: _c1, decls: 9, vars: 5, consts: [[1, "datagrid-column-flex"], ["class", "datagrid-column-title", "type", "button", 3, "click", 4, "ngIf"], [3, "clrDgStringFilter", "clrFilterValue", "clrFilterValueChange", 4, "ngIf"], [3, "clrDgNumericFilter", "clrFilterValue", "clrFilterValueChange", 4, "ngIf"], ["columnTitle", ""], ["class", "datagrid-column-title", 4, "ngIf"], [4, "ngIf"], ["type", "button", 1, "datagrid-column-title", 3, "click"], [4, "ngTemplateOutlet"], ["class", "sort-icon", 4, "ngIf"], [1, "sort-icon"], [3, "clrDgStringFilter", "clrFilterValue", "clrFilterValueChange"], [3, "clrDgNumericFilter", "clrFilterValue", "clrFilterValueChange"], [1, "datagrid-column-title"]], template: function ClrDatagridColumn_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef(_c0);
        ɵngcc0.ɵɵelementStart(0, "div", 0);
        ɵngcc0.ɵɵtemplate(1, ClrDatagridColumn_button_1_Template, 3, 2, "button", 1);
        ɵngcc0.ɵɵprojection(2);
        ɵngcc0.ɵɵtemplate(3, ClrDatagridColumn_clr_dg_string_filter_3_Template, 1, 2, "clr-dg-string-filter", 2);
        ɵngcc0.ɵɵtemplate(4, ClrDatagridColumn_clr_dg_numeric_filter_4_Template, 1, 2, "clr-dg-numeric-filter", 3);
        ɵngcc0.ɵɵtemplate(5, ClrDatagridColumn_ng_template_5_Template, 1, 0, "ng-template", null, 4, ɵngcc0.ɵɵtemplateRefExtractor);
        ɵngcc0.ɵɵtemplate(7, ClrDatagridColumn_span_7_Template, 2, 1, "span", 5);
        ɵngcc0.ɵɵtemplate(8, ClrDatagridColumn_clr_dg_column_separator_8_Template, 1, 0, "clr-dg-column-separator", 6);
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.sortable);
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("ngIf", ctx.field && !ctx.customFilter && ctx.colType == "string");
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.field && !ctx.customFilter && ctx.colType == "number");
        ɵngcc0.ɵɵadvance(3);
        ɵngcc0.ɵɵproperty("ngIf", !ctx.sortable);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.showSeparator);
    } }, directives: [ɵngcc1.NgIf, ɵngcc1.NgTemplateOutlet, ɵngcc2.ClrIconCustomTag, ɵngcc3.DatagridStringFilter, ɵngcc4.DatagridNumericFilter, ɵngcc5.ClrDatagridColumnSeparator], encapsulation: 2, changeDetection: 0 });
ClrDatagridColumn.ctorParameters = () => [
    { type: Sort },
    { type: FiltersProvider },
    { type: ViewContainerRef },
    { type: DetailService },
    { type: ChangeDetectorRef },
    { type: ClrCommonStringsService }
];
__decorate([
    Input('clrDgColType')
], ClrDatagridColumn.prototype, "colType", null);
__decorate([
    Input('clrDgField')
], ClrDatagridColumn.prototype, "field", null);
__decorate([
    Input('clrDgSortBy')
], ClrDatagridColumn.prototype, "sortBy", null);
__decorate([
    Input('clrDgSorted')
], ClrDatagridColumn.prototype, "sorted", null);
__decorate([
    Output('clrDgSortedChange')
], ClrDatagridColumn.prototype, "sortedChange", void 0);
__decorate([
    Input('clrDgSortOrder')
], ClrDatagridColumn.prototype, "sortOrder", null);
__decorate([
    Output('clrDgSortOrderChange')
], ClrDatagridColumn.prototype, "sortOrderChange", void 0);
__decorate([
    ContentChild(CustomFilter)
], ClrDatagridColumn.prototype, "projectedFilter", null);
__decorate([
    Input('clrFilterValue')
], ClrDatagridColumn.prototype, "updateFilterValue", null);
__decorate([
    Output('clrFilterValueChange')
], ClrDatagridColumn.prototype, "filterValueChange", void 0);
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ClrDatagridColumn, [{
        type: Component,
        args: [{
                selector: 'clr-dg-column',
                template: `
      <div class="datagrid-column-flex">
          <button
            class="datagrid-column-title"
            *ngIf="sortable"
            (click)="sort()"
            type="button">
              <ng-container  *ngTemplateOutlet="columnTitle"></ng-container>
              <clr-icon
                      *ngIf="sortIcon"
                      [attr.shape]="sortIcon"
                      class="sort-icon"></clr-icon>
          </button>
          <!-- I'm really not happy with that select since it's not very scalable -->
          <ng-content select="clr-dg-filter, clr-dg-string-filter, clr-dg-numeric-filter"></ng-content>

          <clr-dg-string-filter
                  *ngIf="field && !customFilter && (colType=='string')"
                  [clrDgStringFilter]="registered"
                  [(clrFilterValue)]="filterValue"></clr-dg-string-filter>

          <clr-dg-numeric-filter
                  *ngIf="field && !customFilter && (colType=='number')"
                  [clrDgNumericFilter]="registered"
                  [(clrFilterValue)]="filterValue"></clr-dg-numeric-filter>

          <ng-template #columnTitle>
              <ng-content></ng-content>
          </ng-template>


          <span class="datagrid-column-title" *ngIf="!sortable">
              <ng-container *ngTemplateOutlet="columnTitle"></ng-container>
          </span>

          <clr-dg-column-separator *ngIf="showSeparator"></clr-dg-column-separator>
      </div>
    `,
                providers: [ClrPopoverPositionService, ClrPopoverEventsService, ClrPopoverToggleService],
                host: {
                    '[class.datagrid-column]': 'true',
                    '[attr.aria-sort]': 'ariaSort',
                    role: 'columnheader'
                },
                changeDetection: ChangeDetectionStrategy.OnPush
            }]
    }], function () { return [{ type: Sort }, { type: FiltersProvider }, { type: ɵngcc0.ViewContainerRef }, { type: DetailService }, { type: ɵngcc0.ChangeDetectorRef }, { type: ClrCommonStringsService }]; }, { sortedChange: [{
            type: Output,
            args: ['clrDgSortedChange']
        }], sortOrderChange: [{
            type: Output,
            args: ['clrDgSortOrderChange']
        }], filterValueChange: [{
            type: Output,
            args: ['clrFilterValueChange']
        }], field: [{
            type: Input,
            args: ['clrDgField']
        }], colType: [{
            type: Input,
            args: ['clrDgColType']
        }], updateFilterValue: [{
            type: Input,
            args: ['clrFilterValue']
        }], sortBy: [{
            type: Input,
            args: ['clrDgSortBy']
        }], sorted: [{
            type: Input,
            args: ['clrDgSorted']
        }], sortOrder: [{
            type: Input,
            args: ['clrDgSortOrder']
        }], projectedFilter: [{
            type: ContentChild,
            args: [CustomFilter]
        }] }); })();
export { ClrDatagridColumn };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,