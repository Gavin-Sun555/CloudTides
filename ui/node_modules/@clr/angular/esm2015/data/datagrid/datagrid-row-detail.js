import { __decorate } from "tslib";
/*
 * Copyright (c) 2016-2020 VMware, Inc. All Rights Reserved.
 * This software is released under MIT license.
 * The full license information can be found in LICENSE in the root directory of this project.
 */
import { Component, ContentChildren, Input } from '@angular/core';
import { ClrDatagridCell } from './datagrid-cell';
import { ExpandableRowsCount } from './providers/global-expandable-rows';
import { RowActionService } from './providers/row-action-service';
import { Selection } from './providers/selection';
import { SelectionType } from './enums/selection-type';
import { DatagridIfExpandService } from './datagrid-if-expanded.service';
import { ClrCommonStringsService } from '../../utils/i18n/common-strings.service';
/**
 * Generic bland container serving various purposes for Datagrid.
 * For instance, it can help span a text over multiple rows in detail view.
 */
import * as ɵngcc0 from '@angular/core';

const _c0 = ["*"];
let ClrDatagridRowDetail = class ClrDatagridRowDetail {
    constructor(selection, rowActionService, expand, expandableRows, commonStrings) {
        this.selection = selection;
        this.rowActionService = rowActionService;
        this.expand = expand;
        this.expandableRows = expandableRows;
        this.commonStrings = commonStrings;
        /* reference to the enum so that template can access it */
        this.SELECTION_TYPE = SelectionType;
        this.subscriptions = [];
        this.replacedRow = false;
    }
    set replace(value) {
        this.expand.setReplace(!!value);
    }
    ngAfterContentInit() {
        this.subscriptions.push(this.expand.replace.subscribe(replaceChange => {
            this.replacedRow = replaceChange;
        }));
    }
    ngOnDestroy() {
        this.subscriptions.forEach(sub => sub.unsubscribe());
    }
    get beginningOfExpandableContentAriaText() {
        return (this._beginningOfExpandableContentAriaText ||
            `${this.commonStrings.keys.dategridExpandableBeginningOf} ${this.commonStrings.keys.dategridExpandableRowContent}`);
    }
    get endOfExpandableContentAriaText() {
        return (this._endOfExpandableContentAriaText ||
            `${this.commonStrings.keys.dategridExpandableEndOf} ${this.commonStrings.keys.dategridExpandableRowContent}`);
    }
};
ClrDatagridRowDetail.ɵfac = function ClrDatagridRowDetail_Factory(t) { return new (t || ClrDatagridRowDetail)(ɵngcc0.ɵɵdirectiveInject(Selection), ɵngcc0.ɵɵdirectiveInject(RowActionService), ɵngcc0.ɵɵdirectiveInject(DatagridIfExpandService), ɵngcc0.ɵɵdirectiveInject(ExpandableRowsCount), ɵngcc0.ɵɵdirectiveInject(ClrCommonStringsService)); };
ClrDatagridRowDetail.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: ClrDatagridRowDetail, selectors: [["clr-dg-row-detail"]], contentQueries: function ClrDatagridRowDetail_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {
        ɵngcc0.ɵɵcontentQuery(dirIndex, ClrDatagridCell, false);
    } if (rf & 2) {
        var _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.cells = _t);
    } }, hostVars: 7, hostBindings: function ClrDatagridRowDetail_HostBindings(rf, ctx) { if (rf & 2) {
        ɵngcc0.ɵɵattribute("id", ctx.expand.expandableId);
        ɵngcc0.ɵɵclassProp("datagrid-row-flex", true)("datagrid-row-detail", true)("datagrid-container", ctx.cells.length === 0);
    } }, inputs: { replace: ["clrDgReplace", "replace"], _beginningOfExpandableContentAriaText: ["clrRowDetailBeginningAriaText", "_beginningOfExpandableContentAriaText"], _endOfExpandableContentAriaText: ["clrRowDetailEndAriaText", "_endOfExpandableContentAriaText"] }, ngContentSelectors: _c0, decls: 5, vars: 3, consts: [[1, "clr-sr-only"]], template: function ClrDatagridRowDetail_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵelementStart(0, "div", 0);
        ɵngcc0.ɵɵtext(1);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵprojection(2);
        ɵngcc0.ɵɵelementStart(3, "div", 0);
        ɵngcc0.ɵɵtext(4);
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵtextInterpolate2(" ", ctx.beginningOfExpandableContentAriaText, " ", ctx.commonStrings.keys.dategridExpandableRowsHelperText, " ");
        ɵngcc0.ɵɵadvance(3);
        ɵngcc0.ɵɵtextInterpolate(ctx.endOfExpandableContentAriaText);
    } }, encapsulation: 2 });
ClrDatagridRowDetail.ctorParameters = () => [
    { type: Selection },
    { type: RowActionService },
    { type: DatagridIfExpandService },
    { type: ExpandableRowsCount },
    { type: ClrCommonStringsService }
];
__decorate([
    ContentChildren(ClrDatagridCell)
], ClrDatagridRowDetail.prototype, "cells", void 0);
__decorate([
    Input('clrDgReplace')
], ClrDatagridRowDetail.prototype, "replace", null);
__decorate([
    Input('clrRowDetailBeginningAriaText')
], ClrDatagridRowDetail.prototype, "_beginningOfExpandableContentAriaText", void 0);
__decorate([
    Input('clrRowDetailEndAriaText')
], ClrDatagridRowDetail.prototype, "_endOfExpandableContentAriaText", void 0);
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ClrDatagridRowDetail, [{
        type: Component,
        args: [{
                selector: 'clr-dg-row-detail',
                template: `
    <div class="clr-sr-only">
      {{ beginningOfExpandableContentAriaText }} {{ commonStrings.keys.dategridExpandableRowsHelperText }}
    </div>
    <ng-content></ng-content>
    <div class="clr-sr-only">{{ endOfExpandableContentAriaText }}</div>
  `,
                host: {
                    '[class.datagrid-row-flex]': 'true',
                    '[class.datagrid-row-detail]': 'true',
                    '[class.datagrid-container]': 'cells.length === 0',
                    '[attr.id]': 'expand.expandableId'
                }
            }]
    }], function () { return [{ type: Selection }, { type: RowActionService }, { type: DatagridIfExpandService }, { type: ExpandableRowsCount }, { type: ClrCommonStringsService }]; }, { replace: [{
            type: Input,
            args: ['clrDgReplace']
        }], cells: [{
            type: ContentChildren,
            args: [ClrDatagridCell]
        }], _beginningOfExpandableContentAriaText: [{
            type: Input,
            args: ['clrRowDetailBeginningAriaText']
        }], _endOfExpandableContentAriaText: [{
            type: Input,
            args: ['clrRowDetailEndAriaText']
        }] }); })();
export { ClrDatagridRowDetail };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGF0YWdyaWQtcm93LWRldGFpbC5qcyIsInNvdXJjZXMiOlsibmc6L0BjbHIvYW5ndWxhci9kYXRhL2RhdGFncmlkL2RhdGFncmlkLXJvdy1kZXRhaWwudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNILE9BQU8sRUFBb0IsU0FBUyxFQUFFLGVBQWUsRUFBRSxLQUFLLEVBQXdCLE1BQU0sZUFBZSxDQUFDO0FBRzFHLE9BQU8sRUFBRSxlQUFlLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUNsRCxPQUFPLEVBQUUsbUJBQW1CLEVBQUUsTUFBTSxvQ0FBb0MsQ0FBQztBQUN6RSxPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSxnQ0FBZ0MsQ0FBQztBQUNsRSxPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0sdUJBQXVCLENBQUM7QUFDbEQsT0FBTyxFQUFFLGFBQWEsRUFBRSxNQUFNLHdCQUF3QixDQUFDO0FBQ3ZELE9BQU8sRUFBRSx1QkFBdUIsRUFBRSxNQUFNLGdDQUFnQyxDQUFDO0FBQ3pFLE9BQU8sRUFBRSx1QkFBdUIsRUFBRSxNQUFNLHlDQUF5QyxDQUFDO0FBRWxGO0FBQ0E7QUFDQTtBQUNBLEdBQUc7Ozs7QUFpQkgsSUFBYSxvQkFBb0IsR0FBakMsTUFBYSxvQkFBb0I7QUFBRyxJQUlsQyxZQUNTLFNBQW9CLEVBQ3BCLGdCQUFrQyxFQUNsQyxNQUErQixFQUMvQixjQUFtQyxFQUNuQyxhQUFzQztBQUM5QyxRQUxRLGNBQVMsR0FBVCxTQUFTLENBQVc7QUFBQyxRQUNyQixxQkFBZ0IsR0FBaEIsZ0JBQWdCLENBQWtCO0FBQUMsUUFDbkMsV0FBTSxHQUFOLE1BQU0sQ0FBeUI7QUFBQyxRQUNoQyxtQkFBYyxHQUFkLGNBQWMsQ0FBcUI7QUFBQyxRQUNwQyxrQkFBYSxHQUFiLGFBQWEsQ0FBeUI7QUFDakQsUUFURSwwREFBMEQ7QUFDNUQsUUFBUyxtQkFBYyxHQUFHLGFBQWEsQ0FBQztBQUN4QyxRQWVVLGtCQUFhLEdBQW1CLEVBQUUsQ0FBQztBQUM3QyxRQUFTLGdCQUFXLEdBQUcsS0FBSyxDQUFDO0FBQzdCLElBVkssQ0FBQztBQUNOLElBSUUsSUFBSSxPQUFPLENBQUMsS0FBYztBQUM1QixRQUFJLElBQUksQ0FBQyxNQUFNLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQztBQUNwQyxJQUFFLENBQUM7QUFDSCxJQUdFLGtCQUFrQjtBQUNwQixRQUFJLElBQUksQ0FBQyxhQUFhLENBQUMsSUFBSSxDQUNyQixJQUFJLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxTQUFTLENBQUMsYUFBYSxDQUFDLEVBQUU7QUFDcEQsWUFBUSxJQUFJLENBQUMsV0FBVyxHQUFHLGFBQWEsQ0FBQztBQUN6QyxRQUFNLENBQUMsQ0FBQyxDQUNILENBQUM7QUFDTixJQUFFLENBQUM7QUFDSCxJQUNFLFdBQVc7QUFDYixRQUFJLElBQUksQ0FBQyxhQUFhLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDLFdBQVcsRUFBRSxDQUFDLENBQUM7QUFDekQsSUFBRSxDQUFDO0FBQ0gsSUFFRSxJQUFXLG9DQUFvQztBQUNqRCxRQUFJLE9BQU8sQ0FDTCxJQUFJLENBQUMscUNBQXFDO0FBQ2hELFlBQU0sR0FBRyxJQUFJLENBQUMsYUFBYSxDQUFDLElBQUksQ0FBQyw2QkFBNkIsSUFBSSxJQUFJLENBQUMsYUFBYSxDQUFDLElBQUksQ0FBQyw0QkFBNEIsRUFBRSxDQUNuSCxDQUFDO0FBQ04sSUFBRSxDQUFDO0FBQ0gsSUFFRSxJQUFXLDhCQUE4QjtBQUMzQyxRQUFJLE9BQU8sQ0FDTCxJQUFJLENBQUMsK0JBQStCO0FBQzFDLFlBQU0sR0FBRyxJQUFJLENBQUMsYUFBYSxDQUFDLElBQUksQ0FBQyx1QkFBdUIsSUFBSSxJQUFJLENBQUMsYUFBYSxDQUFDLElBQUksQ0FBQyw0QkFBNEIsRUFBRSxDQUM3RyxDQUFDO0FBQ04sSUFBRSxDQUFDO0FBQ0gsQ0FBQzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OzZCQUFBO0FBQ0Q7QUFBOEMsWUE1Q3hCLFNBQVM7QUFDN0IsWUFBMkIsZ0JBQWdCO0FBQzNDLFlBQWlCLHVCQUF1QjtBQUN4QyxZQUF5QixtQkFBbUI7QUFDNUMsWUFBd0IsdUJBQXVCO0FBQy9DO0FBRWtDO0FBQWEsSUFBOUMsZUFBZSxDQUFDLGVBQWUsQ0FBQztBQUFDLG1EQUFrQztBQUdwRTtBQUFhLElBRFosS0FBSyxDQUFDLGNBQWMsQ0FBQztBQUN4QixtREFFRztBQWdCdUM7QUFBYSxJQUFwRCxLQUFLLENBQUMsK0JBQStCLENBQUM7QUFBQyxtRkFBc0Q7QUFRNUQ7QUFBYSxJQUE5QyxLQUFLLENBQUMseUJBQXlCLENBQUM7QUFBQyw2RUFBZ0Q7QUF6Q3ZFLG9CQUFvQixvQkFoQmhDLFNBQVMsQ0FBQyxVQUNULFFBQVEsRUFBRTtVQUFtQixVQUM3QjtHQUFRLEVBQUU7Ozs7OztvQkFNVDtBQUNELElBQUksRUFBRSxjQUNKLDJCQUEyQixFQUFFLE1BQU0sY0FDbkM7O3FCQUE2QixFQUFFO0tBQU0sY0FDckMsNEJBQTRCLEVBQUU7WUFBb0IsY0FDbEQsV0FBVyxFQUFFO0NBQXFCLFdBQ25DLE1BQ0YsQ0FBQyxJQUNXLG9CQUFvQixDQWdEaEM7Ozs7Ozs7Ozs7Ozs7Ozs7b0JBQ0Q7QUFBQyxTQWpEWSxvQkFBb0I7QUFBSSIsInNvdXJjZXNDb250ZW50IjpbIi8qXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTYtMjAyMCBWTXdhcmUsIEluYy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqIFRoaXMgc29mdHdhcmUgaXMgcmVsZWFzZWQgdW5kZXIgTUlUIGxpY2Vuc2UuXG4gKiBUaGUgZnVsbCBsaWNlbnNlIGluZm9ybWF0aW9uIGNhbiBiZSBmb3VuZCBpbiBMSUNFTlNFIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHByb2plY3QuXG4gKi9cbmltcG9ydCB7IEFmdGVyQ29udGVudEluaXQsIENvbXBvbmVudCwgQ29udGVudENoaWxkcmVuLCBJbnB1dCwgT25EZXN0cm95LCBRdWVyeUxpc3QgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IFN1YnNjcmlwdGlvbiB9IGZyb20gJ3J4anMnO1xuXG5pbXBvcnQgeyBDbHJEYXRhZ3JpZENlbGwgfSBmcm9tICcuL2RhdGFncmlkLWNlbGwnO1xuaW1wb3J0IHsgRXhwYW5kYWJsZVJvd3NDb3VudCB9IGZyb20gJy4vcHJvdmlkZXJzL2dsb2JhbC1leHBhbmRhYmxlLXJvd3MnO1xuaW1wb3J0IHsgUm93QWN0aW9uU2VydmljZSB9IGZyb20gJy4vcHJvdmlkZXJzL3Jvdy1hY3Rpb24tc2VydmljZSc7XG5pbXBvcnQgeyBTZWxlY3Rpb24gfSBmcm9tICcuL3Byb3ZpZGVycy9zZWxlY3Rpb24nO1xuaW1wb3J0IHsgU2VsZWN0aW9uVHlwZSB9IGZyb20gJy4vZW51bXMvc2VsZWN0aW9uLXR5cGUnO1xuaW1wb3J0IHsgRGF0YWdyaWRJZkV4cGFuZFNlcnZpY2UgfSBmcm9tICcuL2RhdGFncmlkLWlmLWV4cGFuZGVkLnNlcnZpY2UnO1xuaW1wb3J0IHsgQ2xyQ29tbW9uU3RyaW5nc1NlcnZpY2UgfSBmcm9tICcuLi8uLi91dGlscy9pMThuL2NvbW1vbi1zdHJpbmdzLnNlcnZpY2UnO1xuXG4vKipcbiAqIEdlbmVyaWMgYmxhbmQgY29udGFpbmVyIHNlcnZpbmcgdmFyaW91cyBwdXJwb3NlcyBmb3IgRGF0YWdyaWQuXG4gKiBGb3IgaW5zdGFuY2UsIGl0IGNhbiBoZWxwIHNwYW4gYSB0ZXh0IG92ZXIgbXVsdGlwbGUgcm93cyBpbiBkZXRhaWwgdmlldy5cbiAqL1xuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAnY2xyLWRnLXJvdy1kZXRhaWwnLFxuICB0ZW1wbGF0ZTogYFxuICAgIDxkaXYgY2xhc3M9XCJjbHItc3Itb25seVwiPlxuICAgICAge3sgYmVnaW5uaW5nT2ZFeHBhbmRhYmxlQ29udGVudEFyaWFUZXh0IH19IHt7IGNvbW1vblN0cmluZ3Mua2V5cy5kYXRlZ3JpZEV4cGFuZGFibGVSb3dzSGVscGVyVGV4dCB9fVxuICAgIDwvZGl2PlxuICAgIDxuZy1jb250ZW50PjwvbmctY29udGVudD5cbiAgICA8ZGl2IGNsYXNzPVwiY2xyLXNyLW9ubHlcIj57eyBlbmRPZkV4cGFuZGFibGVDb250ZW50QXJpYVRleHQgfX08L2Rpdj5cbiAgYCxcbiAgaG9zdDoge1xuICAgICdbY2xhc3MuZGF0YWdyaWQtcm93LWZsZXhdJzogJ3RydWUnLFxuICAgICdbY2xhc3MuZGF0YWdyaWQtcm93LWRldGFpbF0nOiAndHJ1ZScsXG4gICAgJ1tjbGFzcy5kYXRhZ3JpZC1jb250YWluZXJdJzogJ2NlbGxzLmxlbmd0aCA9PT0gMCcsXG4gICAgJ1thdHRyLmlkXSc6ICdleHBhbmQuZXhwYW5kYWJsZUlkJyxcbiAgfSxcbn0pXG5leHBvcnQgY2xhc3MgQ2xyRGF0YWdyaWRSb3dEZXRhaWw8VCA9IGFueT4gaW1wbGVtZW50cyBBZnRlckNvbnRlbnRJbml0LCBPbkRlc3Ryb3kge1xuICAvKiByZWZlcmVuY2UgdG8gdGhlIGVudW0gc28gdGhhdCB0ZW1wbGF0ZSBjYW4gYWNjZXNzIGl0ICovXG4gIHB1YmxpYyBTRUxFQ1RJT05fVFlQRSA9IFNlbGVjdGlvblR5cGU7XG5cbiAgY29uc3RydWN0b3IoXG4gICAgcHVibGljIHNlbGVjdGlvbjogU2VsZWN0aW9uLFxuICAgIHB1YmxpYyByb3dBY3Rpb25TZXJ2aWNlOiBSb3dBY3Rpb25TZXJ2aWNlLFxuICAgIHB1YmxpYyBleHBhbmQ6IERhdGFncmlkSWZFeHBhbmRTZXJ2aWNlLFxuICAgIHB1YmxpYyBleHBhbmRhYmxlUm93czogRXhwYW5kYWJsZVJvd3NDb3VudCxcbiAgICBwdWJsaWMgY29tbW9uU3RyaW5nczogQ2xyQ29tbW9uU3RyaW5nc1NlcnZpY2VcbiAgKSB7fVxuXG4gIEBDb250ZW50Q2hpbGRyZW4oQ2xyRGF0YWdyaWRDZWxsKSBjZWxsczogUXVlcnlMaXN0PENsckRhdGFncmlkQ2VsbD47XG5cbiAgQElucHV0KCdjbHJEZ1JlcGxhY2UnKVxuICBzZXQgcmVwbGFjZSh2YWx1ZTogYm9vbGVhbikge1xuICAgIHRoaXMuZXhwYW5kLnNldFJlcGxhY2UoISF2YWx1ZSk7XG4gIH1cbiAgcHJpdmF0ZSBzdWJzY3JpcHRpb25zOiBTdWJzY3JpcHRpb25bXSA9IFtdO1xuICBwdWJsaWMgcmVwbGFjZWRSb3cgPSBmYWxzZTtcblxuICBuZ0FmdGVyQ29udGVudEluaXQoKSB7XG4gICAgdGhpcy5zdWJzY3JpcHRpb25zLnB1c2goXG4gICAgICB0aGlzLmV4cGFuZC5yZXBsYWNlLnN1YnNjcmliZShyZXBsYWNlQ2hhbmdlID0+IHtcbiAgICAgICAgdGhpcy5yZXBsYWNlZFJvdyA9IHJlcGxhY2VDaGFuZ2U7XG4gICAgICB9KVxuICAgICk7XG4gIH1cblxuICBuZ09uRGVzdHJveSgpIHtcbiAgICB0aGlzLnN1YnNjcmlwdGlvbnMuZm9yRWFjaChzdWIgPT4gc3ViLnVuc3Vic2NyaWJlKCkpO1xuICB9XG5cbiAgQElucHV0KCdjbHJSb3dEZXRhaWxCZWdpbm5pbmdBcmlhVGV4dCcpIHByaXZhdGUgX2JlZ2lubmluZ09mRXhwYW5kYWJsZUNvbnRlbnRBcmlhVGV4dDogc3RyaW5nO1xuICBwdWJsaWMgZ2V0IGJlZ2lubmluZ09mRXhwYW5kYWJsZUNvbnRlbnRBcmlhVGV4dCgpIHtcbiAgICByZXR1cm4gKFxuICAgICAgdGhpcy5fYmVnaW5uaW5nT2ZFeHBhbmRhYmxlQ29udGVudEFyaWFUZXh0IHx8XG4gICAgICBgJHt0aGlzLmNvbW1vblN0cmluZ3Mua2V5cy5kYXRlZ3JpZEV4cGFuZGFibGVCZWdpbm5pbmdPZn0gJHt0aGlzLmNvbW1vblN0cmluZ3Mua2V5cy5kYXRlZ3JpZEV4cGFuZGFibGVSb3dDb250ZW50fWBcbiAgICApO1xuICB9XG5cbiAgQElucHV0KCdjbHJSb3dEZXRhaWxFbmRBcmlhVGV4dCcpIHByaXZhdGUgX2VuZE9mRXhwYW5kYWJsZUNvbnRlbnRBcmlhVGV4dDogc3RyaW5nO1xuICBwdWJsaWMgZ2V0IGVuZE9mRXhwYW5kYWJsZUNvbnRlbnRBcmlhVGV4dCgpIHtcbiAgICByZXR1cm4gKFxuICAgICAgdGhpcy5fZW5kT2ZFeHBhbmRhYmxlQ29udGVudEFyaWFUZXh0IHx8XG4gICAgICBgJHt0aGlzLmNvbW1vblN0cmluZ3Mua2V5cy5kYXRlZ3JpZEV4cGFuZGFibGVFbmRPZn0gJHt0aGlzLmNvbW1vblN0cmluZ3Mua2V5cy5kYXRlZ3JpZEV4cGFuZGFibGVSb3dDb250ZW50fWBcbiAgICApO1xuICB9XG59XG4iXX0=