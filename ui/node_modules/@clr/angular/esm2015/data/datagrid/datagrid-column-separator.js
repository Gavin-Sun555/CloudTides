import { __decorate, __param } from "tslib";
/*
 * Copyright (c) 2016-2018 VMware, Inc. All Rights Reserved.
 * This software is released under MIT license.
 * The full license information can be found in LICENSE in the root directory of this project.
 */
import { DOCUMENT } from '@angular/common';
import { Component, Inject, Renderer2 } from '@angular/core';
import { ColumnResizerService } from './providers/column-resizer.service';
import { TableSizeService } from './providers/table-size.service';
import { UNIQUE_ID_PROVIDER, UNIQUE_ID } from '../../utils/id-generator/id-generator.service';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '../../utils/drag-and-drop/draggable/draggable';
let ClrDatagridColumnSeparator = class ClrDatagridColumnSeparator {
    // Every column draggable separator should have its own unique ID
    // in order to not conflict with other draggables/droppables.
    constructor(columnResizerService, renderer, tableSizeService, document, columnSeparatorId) {
        this.columnResizerService = columnResizerService;
        this.renderer = renderer;
        this.tableSizeService = tableSizeService;
        this.document = document;
        this.columnSeparatorId = columnSeparatorId;
    }
    showTracker(resizeTrackerEl) {
        this.columnResizerService.startResize();
        const tableHeight = this.tableSizeService.getColumnDragHeight();
        this.renderer.setStyle(resizeTrackerEl, 'height', tableHeight);
        this.renderer.setStyle(resizeTrackerEl, 'display', 'block');
    }
    moveTracker(event, resizeTrackerEl) {
        this.columnResizerService.calculateResize(event);
        this.renderer.setStyle(resizeTrackerEl, 'transform', `translateX(${this.columnResizerService.resizedBy}px)`);
        this.renderer.setStyle(this.document.body, 'cursor', 'col-resize');
        this.redFlagTracker(resizeTrackerEl);
    }
    hideTracker(resizeTrackerEl) {
        this.columnResizerService.endResize();
        this.renderer.setStyle(resizeTrackerEl, 'display', 'none');
        this.renderer.setStyle(resizeTrackerEl, 'transform', `translateX(0px)`);
        this.renderer.setStyle(this.document.body, 'cursor', 'auto');
    }
    redFlagTracker(resizeTrackerEl) {
        let isWithinMaxResizeRange;
        // @TODO(JEREMY) Review this, it will always be true because above is always null
        if (isWithinMaxResizeRange !== this.columnResizerService.isWithinMaxResizeRange) {
            isWithinMaxResizeRange = this.columnResizerService.isWithinMaxResizeRange;
            if (!isWithinMaxResizeRange) {
                this.renderer.addClass(resizeTrackerEl, 'exceeded-max');
            }
            else {
                this.renderer.removeClass(resizeTrackerEl, 'exceeded-max');
            }
        }
    }
};
ClrDatagridColumnSeparator.ɵfac = function ClrDatagridColumnSeparator_Factory(t) { return new (t || ClrDatagridColumnSeparator)(ɵngcc0.ɵɵdirectiveInject(ColumnResizerService), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Renderer2), ɵngcc0.ɵɵdirectiveInject(TableSizeService), ɵngcc0.ɵɵdirectiveInject(DOCUMENT), ɵngcc0.ɵɵdirectiveInject(UNIQUE_ID)); };
ClrDatagridColumnSeparator.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: ClrDatagridColumnSeparator, selectors: [["clr-dg-column-separator"]], hostVars: 2, hostBindings: function ClrDatagridColumnSeparator_HostBindings(rf, ctx) { if (rf & 2) {
        ɵngcc0.ɵɵclassProp("datagrid-column-separator", true);
    } }, features: [ɵngcc0.ɵɵProvidersFeature([UNIQUE_ID_PROVIDER])], decls: 3, vars: 1, consts: [["aria-hidden", "true", "clrDraggable", "", 1, "datagrid-column-handle", 3, "clrGroup", "clrDragStart", "clrDragMove", "clrDragEnd"], [1, "datagrid-column-resize-tracker"], ["resizeTrackerEl", ""]], template: function ClrDatagridColumnSeparator_Template(rf, ctx) { if (rf & 1) {
        const _r1 = ɵngcc0.ɵɵgetCurrentView();
        ɵngcc0.ɵɵelementStart(0, "div", 0);
        ɵngcc0.ɵɵlistener("clrDragStart", function ClrDatagridColumnSeparator_Template_div_clrDragStart_0_listener() { ɵngcc0.ɵɵrestoreView(_r1); const _r0 = ɵngcc0.ɵɵreference(2); return ctx.showTracker(_r0); })("clrDragMove", function ClrDatagridColumnSeparator_Template_div_clrDragMove_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r1); const _r0 = ɵngcc0.ɵɵreference(2); return ctx.moveTracker($event, _r0); })("clrDragEnd", function ClrDatagridColumnSeparator_Template_div_clrDragEnd_0_listener() { ɵngcc0.ɵɵrestoreView(_r1); const _r0 = ɵngcc0.ɵɵreference(2); return ctx.hideTracker(_r0); });
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelement(1, "div", 1, 2);
    } if (rf & 2) {
        ɵngcc0.ɵɵproperty("clrGroup", ctx.columnSeparatorId);
    } }, directives: [ɵngcc1.ClrDraggable], encapsulation: 2 });
ClrDatagridColumnSeparator.ctorParameters = () => [
    { type: ColumnResizerService },
    { type: Renderer2 },
    { type: TableSizeService },
    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] },
    { type: String, decorators: [{ type: Inject, args: [UNIQUE_ID,] }] }
];
ClrDatagridColumnSeparator = __decorate([ __param(3, Inject(DOCUMENT)),
    __param(4, Inject(UNIQUE_ID))
], ClrDatagridColumnSeparator);
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ClrDatagridColumnSeparator, [{
        type: Component,
        args: [{
                selector: 'clr-dg-column-separator',
                template: `
    <div class="datagrid-column-handle" aria-hidden="true"
      clrDraggable 
      [clrGroup]="columnSeparatorId" 
      (clrDragStart)="showTracker(resizeTrackerEl)" 
      (clrDragMove)="moveTracker($event, resizeTrackerEl)" 
      (clrDragEnd)="hideTracker(resizeTrackerEl)"></div>
    <div class="datagrid-column-resize-tracker" #resizeTrackerEl></div>
    `,
                host: {
                    '[class.datagrid-column-separator]': 'true'
                },
                providers: [UNIQUE_ID_PROVIDER]
            }]
    }], function () { return [{ type: ColumnResizerService }, { type: ɵngcc0.Renderer2 }, { type: TableSizeService }, { type: undefined, decorators: [{
                type: Inject,
                args: [DOCUMENT]
            }] }, { type: String, decorators: [{
                type: Inject,
                args: [UNIQUE_ID]
            }] }]; }, null); })();
export { ClrDatagridColumnSeparator };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGF0YWdyaWQtY29sdW1uLXNlcGFyYXRvci5qcyIsInNvdXJjZXMiOlsibmc6L0BjbHIvYW5ndWxhci9kYXRhL2RhdGFncmlkL2RhdGFncmlkLWNvbHVtbi1zZXBhcmF0b3IudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNILE9BQU8sRUFBRSxRQUFRLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUMzQyxPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0sRUFBRSxTQUFTLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFHN0QsT0FBTyxFQUFFLG9CQUFvQixFQUFFLE1BQU0sb0NBQW9DLENBQUM7QUFDMUUsT0FBTyxFQUFFLGdCQUFnQixFQUFFLE1BQU0sZ0NBQWdDLENBQUM7QUFDbEUsT0FBTyxFQUFFLGtCQUFrQixFQUFFLFNBQVMsRUFBRSxNQUFNLCtDQUErQyxDQUFDOzs7QUFrQjlGLElBQWEsMEJBQTBCLEdBQXZDLE1BQWEsMEJBQTBCO0FBQ3ZDLElBQUUsaUVBQWlFO0FBQ25FLElBQUUsNkRBQTZEO0FBQy9ELElBQUUsWUFDVSxvQkFBMEMsRUFDMUMsUUFBbUIsRUFDbkIsZ0JBQWtDLEVBQ2hCLFFBQWEsRUFDYixpQkFBeUI7QUFDcEQsUUFMUyx5QkFBb0IsR0FBcEIsb0JBQW9CLENBQXNCO0FBQUMsUUFDM0MsYUFBUSxHQUFSLFFBQVEsQ0FBVztBQUFDLFFBQ3BCLHFCQUFnQixHQUFoQixnQkFBZ0IsQ0FBa0I7QUFBQyxRQUNqQixhQUFRLEdBQVIsUUFBUSxDQUFLO0FBQUMsUUFDZCxzQkFBaUIsR0FBakIsaUJBQWlCLENBQVE7QUFDdkQsSUFBSyxDQUFDO0FBQ04sSUFDUyxXQUFXLENBQUMsZUFBNEI7QUFDakQsUUFBSSxJQUFJLENBQUMsb0JBQW9CLENBQUMsV0FBVyxFQUFFLENBQUM7QUFDNUMsUUFBSSxNQUFNLFdBQVcsR0FBRyxJQUFJLENBQUMsZ0JBQWdCLENBQUMsbUJBQW1CLEVBQUUsQ0FBQztB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LTIwMTggVk13YXJlLCBJbmMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKiBUaGlzIHNvZnR3YXJlIGlzIHJlbGVhc2VkIHVuZGVyIE1JVCBsaWNlbnNlLlxuICogVGhlIGZ1bGwgbGljZW5zZSBpbmZvcm1hdGlvbiBjYW4gYmUgZm91bmQgaW4gTElDRU5TRSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBwcm9qZWN0LlxuICovXG5pbXBvcnQgeyBET0NVTUVOVCB9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbic7XG5pbXBvcnQgeyBDb21wb25lbnQsIEluamVjdCwgUmVuZGVyZXIyIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbmltcG9ydCB7IENsckRyYWdFdmVudCB9IGZyb20gJy4uLy4uL3V0aWxzL2RyYWctYW5kLWRyb3AvZHJhZy1ldmVudCc7XG5pbXBvcnQgeyBDb2x1bW5SZXNpemVyU2VydmljZSB9IGZyb20gJy4vcHJvdmlkZXJzL2NvbHVtbi1yZXNpemVyLnNlcnZpY2UnO1xuaW1wb3J0IHsgVGFibGVTaXplU2VydmljZSB9IGZyb20gJy4vcHJvdmlkZXJzL3RhYmxlLXNpemUuc2VydmljZSc7XG5pbXBvcnQgeyBVTklRVUVfSURfUFJPVklERVIsIFVOSVFVRV9JRCB9IGZyb20gJy4uLy4uL3V0aWxzL2lkLWdlbmVyYXRvci9pZC1nZW5lcmF0b3Iuc2VydmljZSc7XG5cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ2Nsci1kZy1jb2x1bW4tc2VwYXJhdG9yJyxcbiAgdGVtcGxhdGU6IGBcbiAgICA8ZGl2IGNsYXNzPVwiZGF0YWdyaWQtY29sdW1uLWhhbmRsZVwiIGFyaWEtaGlkZGVuPVwidHJ1ZVwiXG4gICAgICBjbHJEcmFnZ2FibGUgXG4gICAgICBbY2xyR3JvdXBdPVwiY29sdW1uU2VwYXJhdG9ySWRcIiBcbiAgICAgIChjbHJEcmFnU3RhcnQpPVwic2hvd1RyYWNrZXIocmVzaXplVHJhY2tlckVsKVwiIFxuICAgICAgKGNsckRyYWdNb3ZlKT1cIm1vdmVUcmFja2VyKCRldmVudCwgcmVzaXplVHJhY2tlckVsKVwiIFxuICAgICAgKGNsckRyYWdFbmQpPVwiaGlkZVRyYWNrZXIocmVzaXplVHJhY2tlckVsKVwiPjwvZGl2PlxuICAgIDxkaXYgY2xhc3M9XCJkYXRhZ3JpZC1jb2x1bW4tcmVzaXplLXRyYWNrZXJcIiAjcmVzaXplVHJhY2tlckVsPjwvZGl2PlxuICAgIGAsXG4gIGhvc3Q6IHtcbiAgICAnW2NsYXNzLmRhdGFncmlkLWNvbHVtbi1zZXBhcmF0b3JdJzogJ3RydWUnLFxuICB9LFxuICBwcm92aWRlcnM6IFtVTklRVUVfSURfUFJPVklERVJdLFxufSlcbmV4cG9ydCBjbGFzcyBDbHJEYXRhZ3JpZENvbHVtblNlcGFyYXRvciB7XG4gIC8vIEV2ZXJ5IGNvbHVtbiBkcmFnZ2FibGUgc2VwYXJhdG9yIHNob3VsZCBoYXZlIGl0cyBvd24gdW5pcXVlIElEXG4gIC8vIGluIG9yZGVyIHRvIG5vdCBjb25mbGljdCB3aXRoIG90aGVyIGRyYWdnYWJsZXMvZHJvcHBhYmxlcy5cbiAgY29uc3RydWN0b3IoXG4gICAgcHJpdmF0ZSBjb2x1bW5SZXNpemVyU2VydmljZTogQ29sdW1uUmVzaXplclNlcnZpY2UsXG4gICAgcHJpdmF0ZSByZW5kZXJlcjogUmVuZGVyZXIyLFxuICAgIHByaXZhdGUgdGFibGVTaXplU2VydmljZTogVGFibGVTaXplU2VydmljZSxcbiAgICBASW5qZWN0KERPQ1VNRU5UKSBwcml2YXRlIGRvY3VtZW50OiBhbnksXG4gICAgQEluamVjdChVTklRVUVfSUQpIHB1YmxpYyBjb2x1bW5TZXBhcmF0b3JJZDogc3RyaW5nXG4gICkge31cblxuICBwdWJsaWMgc2hvd1RyYWNrZXIocmVzaXplVHJhY2tlckVsOiBIVE1MRWxlbWVudCkge1xuICAgIHRoaXMuY29sdW1uUmVzaXplclNlcnZpY2Uuc3RhcnRSZXNpemUoKTtcbiAgICBjb25zdCB0YWJsZUhlaWdodCA9IHRoaXMudGFibGVTaXplU2VydmljZS5nZXRDb2x1bW5EcmFnSGVpZ2h0KCk7XG4gICAgdGhpcy5yZW5kZXJlci5zZXRTdHlsZShyZXNpemVUcmFja2VyRWwsICdoZWlnaHQnLCB0YWJsZUhlaWdodCk7XG4gICAgdGhpcy5yZW5kZXJlci5zZXRTdHlsZShyZXNpemVUcmFja2VyRWwsICdkaXNwbGF5JywgJ2Jsb2NrJyk7XG4gIH1cblxuICBwdWJsaWMgbW92ZVRyYWNrZXIoZXZlbnQ6IENsckRyYWdFdmVudDxhbnk+LCByZXNpemVUcmFja2VyRWw6IEhUTUxFbGVtZW50KSB7XG4gICAgdGhpcy5jb2x1bW5SZXNpemVyU2VydmljZS5jYWxjdWxhdGVSZXNpemUoZXZlbnQpO1xuICAgIHRoaXMucmVuZGVyZXIuc2V0U3R5bGUocmVzaXplVHJhY2tlckVsLCAndHJhbnNmb3JtJywgYHRyYW5zbGF0ZVgoJHt0aGlzLmNvbHVtblJlc2l6ZXJTZXJ2aWNlLnJlc2l6ZWRCeX1weClgKTtcbiAgICB0aGlzLnJlbmRlcmVyLnNldFN0eWxlKHRoaXMuZG9jdW1lbnQuYm9keSwgJ2N1cnNvcicsICdjb2wtcmVzaXplJyk7XG4gICAgdGhpcy5yZWRGbGFnVHJhY2tlcihyZXNpemVUcmFja2VyRWwpO1xuICB9XG5cbiAgcHVibGljIGhpZGVUcmFja2VyKHJlc2l6ZVRyYWNrZXJFbDogSFRNTEVsZW1lbnQpIHtcbiAgICB0aGlzLmNvbHVtblJlc2l6ZXJTZXJ2aWNlLmVuZFJlc2l6ZSgpO1xuICAgIHRoaXMucmVuZGVyZXIuc2V0U3R5bGUocmVzaXplVHJhY2tlckVsLCAnZGlzcGxheScsICdub25lJyk7XG4gICAgdGhpcy5yZW5kZXJlci5zZXRTdHlsZShyZXNpemVUcmFja2VyRWwsICd0cmFuc2Zvcm0nLCBgdHJhbnNsYXRlWCgwcHgpYCk7XG4gICAgdGhpcy5yZW5kZXJlci5zZXRTdHlsZSh0aGlzLmRvY3VtZW50LmJvZHksICdjdXJzb3InLCAnYXV0bycpO1xuICB9XG5cbiAgcHJpdmF0ZSByZWRGbGFnVHJhY2tlcihyZXNpemVUcmFja2VyRWw6IEhUTUxFbGVtZW50KSB7XG4gICAgbGV0IGlzV2l0aGluTWF4UmVzaXplUmFuZ2U6IGJvb2xlYW47XG4gICAgLy8gQFRPRE8oSkVSRU1ZKSBSZXZpZXcgdGhpcywgaXQgd2lsbCBhbHdheXMgYmUgdHJ1ZSBiZWNhdXNlIGFib3ZlIGlzIGFsd2F5cyBudWxsXG4gICAgaWYgKGlzV2l0aGluTWF4UmVzaXplUmFuZ2UgIT09IHRoaXMuY29sdW1uUmVzaXplclNlcnZpY2UuaXNXaXRoaW5NYXhSZXNpemVSYW5nZSkge1xuICAgICAgaXNXaXRoaW5NYXhSZXNpemVSYW5nZSA9IHRoaXMuY29sdW1uUmVzaXplclNlcnZpY2UuaXNXaXRoaW5NYXhSZXNpemVSYW5nZTtcbiAgICAgIGlmICghaXNXaXRoaW5NYXhSZXNpemVSYW5nZSkge1xuICAgICAgICB0aGlzLnJlbmRlcmVyLmFkZENsYXNzKHJlc2l6ZVRyYWNrZXJFbCwgJ2V4Y2VlZGVkLW1heCcpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5yZW5kZXJlci5yZW1vdmVDbGFzcyhyZXNpemVUcmFja2VyRWwsICdleGNlZWRlZC1tYXgnKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cbiJdfQ==