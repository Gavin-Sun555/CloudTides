/*
 * Copyright (c) 2016-2019 VMware, Inc. All Rights Reserved.
 * This software is released under MIT license.
 * The full license information can be found in LICENSE in the root directory of this project.
 */
import { __decorate } from "tslib";
import { Directive, EventEmitter, Input, OnDestroy, OnInit, Output, TemplateRef, ViewContainerRef, } from '@angular/core';
import { DetailService } from './providers/detail.service';
import * as ɵngcc0 from '@angular/core';
let ClrIfDetail = class ClrIfDetail {
    constructor(templateRef, viewContainer, detailService) {
        this.templateRef = templateRef;
        this.viewContainer = viewContainer;
        this.detailService = detailService;
        this.subscriptions = [];
        this.skip = false; // This keeps us from resetting the input and calling the toggle twice
        this.stateChange = new EventEmitter(null);
        this.detailService.enabled = true;
    }
    set state(model) {
        if (!this.skip) {
            this.detailService.toggle(model);
        }
        this.skip = false;
    }
    ngOnInit() {
        this.subscriptions.push(this.detailService.stateChange.subscribe(state => {
            if (state === true) {
                this.togglePanel(true);
            }
            else {
                this.togglePanel(false);
            }
        }));
    }
    togglePanel(showPanel) {
        let stateChangeParams = null;
        this.viewContainer.clear();
        if (showPanel === true) {
            this.viewContainer.createEmbeddedView(this.templateRef, { $implicit: this.detailService.state });
            this.skip = true;
            stateChangeParams = this.detailService.state;
        }
        this.stateChange.emit(stateChangeParams);
    }
    ngOnDestroy() {
        this.subscriptions.forEach(sub => sub.unsubscribe());
    }
};
ClrIfDetail.ɵfac = function ClrIfDetail_Factory(t) { return new (t || ClrIfDetail)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.TemplateRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef), ɵngcc0.ɵɵdirectiveInject(DetailService)); };
ClrIfDetail.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: ClrIfDetail, selectors: [["", "clrIfDetail", ""]], inputs: { state: ["clrIfDetail", "state"] }, outputs: { stateChange: "clrIfDetailChange" } });
ClrIfDetail.ctorParameters = () => [
    { type: TemplateRef },
    { type: ViewContainerRef },
    { type: DetailService }
];
__decorate([
    Input('clrIfDetail')
], ClrIfDetail.prototype, "state", null);
__decorate([
    Output('clrIfDetailChange')
], ClrIfDetail.prototype, "stateChange", void 0);
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ClrIfDetail, [{
        type: Directive,
        args: [{
                selector: '[clrIfDetail]'
            }]
    }], function () { return [{ type: ɵngcc0.TemplateRef }, { type: ɵngcc0.ViewContainerRef }, { type: DetailService }]; }, { stateChange: [{
            type: Output,
            args: ['clrIfDetailChange']
        }], state: [{
            type: Input,
            args: ['clrIfDetail']
        }] }); })();
export { ClrIfDetail };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGF0YWdyaWQtaWYtZGV0YWlsLmpzIiwic291cmNlcyI6WyJuZzovQGNsci9hbmd1bGFyL2RhdGEvZGF0YWdyaWQvZGF0YWdyaWQtaWYtZGV0YWlsLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0EsT0FBTyxFQUNMLFNBQVMsRUFDVCxZQUFZLEVBQ1osS0FBSyxFQUNMLFNBQVMsRUFDVCxNQUFNLEVBQ04sTUFBTSxFQUNOLFdBQVcsRUFDWCxnQkFBZ0IsR0FDakIsTUFBTSxlQUFlLENBQUM7QUFFdkIsT0FBTyxFQUFFLGFBQWEsRUFBRSxNQUFNLDRCQUE0QixDQUFDOztBQUszRCxJQUFhLFdBQVcsR0FBeEIsTUFBYSxXQUFXO0FBQUcsSUFjekIsWUFDVSxXQUE2QixFQUM3QixhQUErQixFQUMvQixhQUE0QjtBQUNyQyxRQUhTLGdCQUFXLEdBQVgsV0FBVyxDQUFrQjtBQUFDLFFBQzlCLGtCQUFhLEdBQWIsYUFBYSxDQUFrQjtBQUFDLFFBQ2hDLGtCQUFhLEdBQWIsYUFBYSxDQUFlO0FBQ3hDLFFBakJVLGtCQUFhLEdBQW1CLEVBQUUsQ0FBQztBQUM3QyxRQUFVLFNBQUksR0FBRyxLQUFLLENBQUMsQ0FBQyxzRUFBc0U7QUFDOUYsUUFTc0MsZ0JBQVcsR0FBRyxJQUFJLFlBQVksQ0FBTSxJQUFJLENBQUMsQ0FBQztBQUNoRixRQU1JLElBQUksQ0FBQyxhQUFhLENBQUMsT0FBTyxHQUFHLElBQUksQ0FBQztBQUN0QyxJQUFFLENBQUM7QUFDSCxJQWhCRSxJQUFJLEtBQUssQ0FBQyxLQUFLO0FBQ2pCLFFBQUksSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLEVBQUU7QUFDcEIsWUFBTSxJQUFJLENBQUMsYUFBYSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQztBQUN2QyxTQUFLO0FBQ0wsUUFBSSxJQUFJLENBQUMsSUFBSSxHQUFHLEtBQUssQ0FBQztBQUN0QixJQUFFLENBQUM7QUFDSCxJQVdFLFFBQVE7QUFDVixRQUFJLElBQUksQ0FBQyxhQUFhLENBQUMsSUFBSSxDQUNyQixJQUFJLENBQUMsYUFBYSxDQUFDLFdBQVcsQ0FBQyxTQUFTLENBQUMsS0FBSyxDQUFDLEVBQUU7QUFDdkQsWUFBUSxJQUFJLEtBQUssS0FBSyxJQUFJLEVBQUU7QUFDNUIsZ0JBQVUsSUFBSSxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsQ0FBQztBQUNqQyxhQUFTO0FBQUMsaUJBQUs7QUFDZixnQkFBVSxJQUFJLENBQUMsV0FBVyxDQUFDLEtBQUssQ0FBQyxDQUFDO0FBQ2xDLGFBQVM7QUFDVCxRQUFNLENBQUMsQ0FBQyxDQUNILENBQUM7QUFDTixJQUFFLENBQUM7QUFDSCxJQUNVLFdBQVcsQ0FBQyxTQUFrQjtBQUN4QyxRQUFJLElBQUksaUJBQWlCLEdBQUcsSUFBSSxDQUFDO0FBQ2pDLFFBQUksSUFBSSxDQUFDLGFBQWEsQ0FBQyxLQUFLLEVBQUUsQ0FBQztBQUMvQixRQUFJLElBQUksU0FBUyxLQUFLLElBQUksRUFBRTtBQUM1QixZQUFNLElBQUksQ0FBQyxhQUFhLENBQUMsa0JBQWtCLENBQUMsSUFBSSxDQUFDLFdBQVcsRUFBRSxFQUFFLFNBQVMsRUFBRSxJQUFJLENBQUMsYUFBYSxDQUFDLEtBQUssRUFBRSxDQUFDLENBQUM7QUFDdkcsWUFBTSxJQUFJLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQztBQUN2QixZQUFNLGlCQUFpQixHQUFHLElBQUksQ0FBQyxhQUFhLENBQUMsS0FBSyxDQUFDO0FBQ25ELFNBQUs7QUFDTCxRQUNJLElBQUksQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLGlCQUFpQixDQUFDLENBQUM7QUFDN0MsSUFBRSxDQUFDO0FBQ0gsSUFDRSxXQUFXO0FBQ2IsUUFBSSxJQUFJLENBQUMsYUFBYSxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxXQUFXLEVBQUUsQ0FBQyxDQUFDO0FBQ3pELElBQUUsQ0FBQztBQUNILENBQUM7O3FNQUFBO0FBQ0Q7QUFBcUMsWUFuQ1osV0FBVztBQUFJLFlBQ2IsZ0JBQWdCO0FBQ3pDLFlBQXlCLGFBQWE7QUFDdEM7QUFiQTtBQUFhLElBRFosS0FBSyxDQUFDLGFBQWEsQ0FBQztBQUN2Qix3Q0FLRztBQUU0QjtBQUFhLElBQXpDLE1BQU0sQ0FBQyxtQkFBbUIsQ0FBQztBQUFDLGdEQUFpRDtBQVpuRSxXQUFXLG9CQUh2QixTQUFTLENBQUMsVUFDVCxRQUFRLEVBQUU7TUFBZSxPQUMxQixDQUFDLElBQ1c7SUFBVyxDQWlEdkI7Ozs7Ozs7OztvQkFDRDtBQUFDLFNBbERZLFdBQVc7QUFBSSIsInNvdXJjZXNDb250ZW50IjpbIi8qXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTYtMjAxOSBWTXdhcmUsIEluYy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqIFRoaXMgc29mdHdhcmUgaXMgcmVsZWFzZWQgdW5kZXIgTUlUIGxpY2Vuc2UuXG4gKiBUaGUgZnVsbCBsaWNlbnNlIGluZm9ybWF0aW9uIGNhbiBiZSBmb3VuZCBpbiBMSUNFTlNFIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHByb2plY3QuXG4gKi9cblxuaW1wb3J0IHtcbiAgRGlyZWN0aXZlLFxuICBFdmVudEVtaXR0ZXIsXG4gIElucHV0LFxuICBPbkRlc3Ryb3ksXG4gIE9uSW5pdCxcbiAgT3V0cHV0LFxuICBUZW1wbGF0ZVJlZixcbiAgVmlld0NvbnRhaW5lclJlZixcbn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBTdWJzY3JpcHRpb24gfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IERldGFpbFNlcnZpY2UgfSBmcm9tICcuL3Byb3ZpZGVycy9kZXRhaWwuc2VydmljZSc7XG5cbkBEaXJlY3RpdmUoe1xuICBzZWxlY3RvcjogJ1tjbHJJZkRldGFpbF0nLFxufSlcbmV4cG9ydCBjbGFzcyBDbHJJZkRldGFpbCBpbXBsZW1lbnRzIE9uSW5pdCwgT25EZXN0cm95IHtcbiAgcHJpdmF0ZSBzdWJzY3JpcHRpb25zOiBTdWJzY3JpcHRpb25bXSA9IFtdO1xuICBwcml2YXRlIHNraXAgPSBmYWxzZTsgLy8gVGhpcyBrZWVwcyB1cyBmcm9tIHJlc2V0dGluZyB0aGUgaW5wdXQgYW5kIGNhbGxpbmcgdGhlIHRvZ2dsZSB0d2ljZVxuXG4gIEBJbnB1dCgnY2xySWZEZXRhaWwnKVxuICBzZXQgc3RhdGUobW9kZWwpIHtcbiAgICBpZiAoIXRoaXMuc2tpcCkge1xuICAgICAgdGhpcy5kZXRhaWxTZXJ2aWNlLnRvZ2dsZShtb2RlbCk7XG4gICAgfVxuICAgIHRoaXMuc2tpcCA9IGZhbHNlO1xuICB9XG5cbiAgQE91dHB1dCgnY2xySWZEZXRhaWxDaGFuZ2UnKSBwdWJsaWMgc3RhdGVDaGFuZ2UgPSBuZXcgRXZlbnRFbWl0dGVyPGFueT4obnVsbCk7XG5cbiAgY29uc3RydWN0b3IoXG4gICAgcHJpdmF0ZSB0ZW1wbGF0ZVJlZjogVGVtcGxhdGVSZWY8YW55PixcbiAgICBwcml2YXRlIHZpZXdDb250YWluZXI6IFZpZXdDb250YWluZXJSZWYsXG4gICAgcHJpdmF0ZSBkZXRhaWxTZXJ2aWNlOiBEZXRhaWxTZXJ2aWNlXG4gICkge1xuICAgIHRoaXMuZGV0YWlsU2VydmljZS5lbmFibGVkID0gdHJ1ZTtcbiAgfVxuXG4gIG5nT25Jbml0KCkge1xuICAgIHRoaXMuc3Vic2NyaXB0aW9ucy5wdXNoKFxuICAgICAgdGhpcy5kZXRhaWxTZXJ2aWNlLnN0YXRlQ2hhbmdlLnN1YnNjcmliZShzdGF0ZSA9PiB7XG4gICAgICAgIGlmIChzdGF0ZSA9PT0gdHJ1ZSkge1xuICAgICAgICAgIHRoaXMudG9nZ2xlUGFuZWwodHJ1ZSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdGhpcy50b2dnbGVQYW5lbChmYWxzZSk7XG4gICAgICAgIH1cbiAgICAgIH0pXG4gICAgKTtcbiAgfVxuXG4gIHByaXZhdGUgdG9nZ2xlUGFuZWwoc2hvd1BhbmVsOiBib29sZWFuKSB7XG4gICAgbGV0IHN0YXRlQ2hhbmdlUGFyYW1zID0gbnVsbDtcbiAgICB0aGlzLnZpZXdDb250YWluZXIuY2xlYXIoKTtcbiAgICBpZiAoc2hvd1BhbmVsID09PSB0cnVlKSB7XG4gICAgICB0aGlzLnZpZXdDb250YWluZXIuY3JlYXRlRW1iZWRkZWRWaWV3KHRoaXMudGVtcGxhdGVSZWYsIHsgJGltcGxpY2l0OiB0aGlzLmRldGFpbFNlcnZpY2Uuc3RhdGUgfSk7XG4gICAgICB0aGlzLnNraXAgPSB0cnVlO1xuICAgICAgc3RhdGVDaGFuZ2VQYXJhbXMgPSB0aGlzLmRldGFpbFNlcnZpY2Uuc3RhdGU7XG4gICAgfVxuXG4gICAgdGhpcy5zdGF0ZUNoYW5nZS5lbWl0KHN0YXRlQ2hhbmdlUGFyYW1zKTtcbiAgfVxuXG4gIG5nT25EZXN0cm95KCkge1xuICAgIHRoaXMuc3Vic2NyaXB0aW9ucy5mb3JFYWNoKHN1YiA9PiBzdWIudW5zdWJzY3JpYmUoKSk7XG4gIH1cbn1cbiJdfQ==