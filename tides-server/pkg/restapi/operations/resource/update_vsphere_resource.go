// Code generated by go-swagger; DO NOT EDIT.

package resource

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// UpdateVsphereResourceHandlerFunc turns a function with the right signature into a update vsphere resource handler
type UpdateVsphereResourceHandlerFunc func(UpdateVsphereResourceParams) middleware.Responder

// Handle executing the request and returning a response
func (fn UpdateVsphereResourceHandlerFunc) Handle(params UpdateVsphereResourceParams) middleware.Responder {
	return fn(params)
}

// UpdateVsphereResourceHandler interface for that can handle valid update vsphere resource params
type UpdateVsphereResourceHandler interface {
	Handle(UpdateVsphereResourceParams) middleware.Responder
}

// NewUpdateVsphereResource creates a new http.Handler for the update vsphere resource operation
func NewUpdateVsphereResource(ctx *middleware.Context, handler UpdateVsphereResourceHandler) *UpdateVsphereResource {
	return &UpdateVsphereResource{Context: ctx, Handler: handler}
}

/*UpdateVsphereResource swagger:route PUT /resource/vsphere/update resource updateVsphereResource

update usage info of resource

*/
type UpdateVsphereResource struct {
	Context *middleware.Context
	Handler UpdateVsphereResourceHandler
}

func (o *UpdateVsphereResource) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewUpdateVsphereResourceParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}

// UpdateVsphereResourceBody update vsphere resource body
//
// swagger:model UpdateVsphereResourceBody
type UpdateVsphereResourceBody struct {

	// current CPU
	CurrentCPU float64 `json:"currentCPU,omitempty"`

	// current RAM
	CurrentRAM float64 `json:"currentRAM,omitempty"`

	// host address
	HostAddress string `json:"hostAddress,omitempty"`

	// name
	Name string `json:"name,omitempty"`
}

// Validate validates this update vsphere resource body
func (o *UpdateVsphereResourceBody) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *UpdateVsphereResourceBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdateVsphereResourceBody) UnmarshalBinary(b []byte) error {
	var res UpdateVsphereResourceBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// UpdateVsphereResourceNotFoundBody update vsphere resource not found body
//
// swagger:model UpdateVsphereResourceNotFoundBody
type UpdateVsphereResourceNotFoundBody struct {

	// message
	Message string `json:"message,omitempty"`
}

// Validate validates this update vsphere resource not found body
func (o *UpdateVsphereResourceNotFoundBody) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *UpdateVsphereResourceNotFoundBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdateVsphereResourceNotFoundBody) UnmarshalBinary(b []byte) error {
	var res UpdateVsphereResourceNotFoundBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// UpdateVsphereResourceOKBody update vsphere resource o k body
//
// swagger:model UpdateVsphereResourceOKBody
type UpdateVsphereResourceOKBody struct {

	// message
	Message string `json:"message,omitempty"`
}

// Validate validates this update vsphere resource o k body
func (o *UpdateVsphereResourceOKBody) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *UpdateVsphereResourceOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdateVsphereResourceOKBody) UnmarshalBinary(b []byte) error {
	var res UpdateVsphereResourceOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
