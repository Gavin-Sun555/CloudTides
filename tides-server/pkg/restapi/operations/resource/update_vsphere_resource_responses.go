// Code generated by go-swagger; DO NOT EDIT.

package resource

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"
)

// UpdateVsphereResourceOKCode is the HTTP code returned for type UpdateVsphereResourceOK
const UpdateVsphereResourceOKCode int = 200

/*UpdateVsphereResourceOK returns success message

swagger:response updateVsphereResourceOK
*/
type UpdateVsphereResourceOK struct {

	/*
	  In: Body
	*/
	Payload *UpdateVsphereResourceOKBody `json:"body,omitempty"`
}

// NewUpdateVsphereResourceOK creates UpdateVsphereResourceOK with default headers values
func NewUpdateVsphereResourceOK() *UpdateVsphereResourceOK {

	return &UpdateVsphereResourceOK{}
}

// WithPayload adds the payload to the update vsphere resource o k response
func (o *UpdateVsphereResourceOK) WithPayload(payload *UpdateVsphereResourceOKBody) *UpdateVsphereResourceOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the update vsphere resource o k response
func (o *UpdateVsphereResourceOK) SetPayload(payload *UpdateVsphereResourceOKBody) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *UpdateVsphereResourceOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// UpdateVsphereResourceNotFoundCode is the HTTP code returned for type UpdateVsphereResourceNotFound
const UpdateVsphereResourceNotFoundCode int = 404

/*UpdateVsphereResourceNotFound resource not found

swagger:response updateVsphereResourceNotFound
*/
type UpdateVsphereResourceNotFound struct {

	/*
	  In: Body
	*/
	Payload *UpdateVsphereResourceNotFoundBody `json:"body,omitempty"`
}

// NewUpdateVsphereResourceNotFound creates UpdateVsphereResourceNotFound with default headers values
func NewUpdateVsphereResourceNotFound() *UpdateVsphereResourceNotFound {

	return &UpdateVsphereResourceNotFound{}
}

// WithPayload adds the payload to the update vsphere resource not found response
func (o *UpdateVsphereResourceNotFound) WithPayload(payload *UpdateVsphereResourceNotFoundBody) *UpdateVsphereResourceNotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the update vsphere resource not found response
func (o *UpdateVsphereResourceNotFound) SetPayload(payload *UpdateVsphereResourceNotFoundBody) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *UpdateVsphereResourceNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(404)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
