// Code generated by go-swagger; DO NOT EDIT.

package resource

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// VsphereOverviewStatsHandlerFunc turns a function with the right signature into a vsphere overview stats handler
type VsphereOverviewStatsHandlerFunc func(VsphereOverviewStatsParams) middleware.Responder

// Handle executing the request and returning a response
func (fn VsphereOverviewStatsHandlerFunc) Handle(params VsphereOverviewStatsParams) middleware.Responder {
	return fn(params)
}

// VsphereOverviewStatsHandler interface for that can handle valid vsphere overview stats params
type VsphereOverviewStatsHandler interface {
	Handle(VsphereOverviewStatsParams) middleware.Responder
}

// NewVsphereOverviewStats creates a new http.Handler for the vsphere overview stats operation
func NewVsphereOverviewStats(ctx *middleware.Context, handler VsphereOverviewStatsHandler) *VsphereOverviewStats {
	return &VsphereOverviewStats{Context: ctx, Handler: handler}
}

/*VsphereOverviewStats swagger:route GET /resource/vsphere/overview resource vsphereOverviewStats

returns overall contribution statistics for a user

*/
type VsphereOverviewStats struct {
	Context *middleware.Context
	Handler VsphereOverviewStatsHandler
}

func (o *VsphereOverviewStats) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewVsphereOverviewStatsParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}

// VsphereOverviewStatsNotFoundBody vsphere overview stats not found body
//
// swagger:model VsphereOverviewStatsNotFoundBody
type VsphereOverviewStatsNotFoundBody struct {

	// message
	Message string `json:"message,omitempty"`
}

// Validate validates this vsphere overview stats not found body
func (o *VsphereOverviewStatsNotFoundBody) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *VsphereOverviewStatsNotFoundBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *VsphereOverviewStatsNotFoundBody) UnmarshalBinary(b []byte) error {
	var res VsphereOverviewStatsNotFoundBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// VsphereOverviewStatsOKBody vsphere overview stats o k body
//
// swagger:model VsphereOverviewStatsOKBody
type VsphereOverviewStatsOKBody struct {

	// message
	Message string `json:"message,omitempty"`

	// results
	Results *VsphereOverviewStatsOKBodyResults `json:"results,omitempty"`
}

// Validate validates this vsphere overview stats o k body
func (o *VsphereOverviewStatsOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateResults(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *VsphereOverviewStatsOKBody) validateResults(formats strfmt.Registry) error {

	if swag.IsZero(o.Results) { // not required
		return nil
	}

	if o.Results != nil {
		if err := o.Results.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("vsphereOverviewStatsOK" + "." + "results")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *VsphereOverviewStatsOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *VsphereOverviewStatsOKBody) UnmarshalBinary(b []byte) error {
	var res VsphereOverviewStatsOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// VsphereOverviewStatsOKBodyResults vsphere overview stats o k body results
//
// swagger:model VsphereOverviewStatsOKBodyResults
type VsphereOverviewStatsOKBodyResults struct {

	// contribution
	Contribution float64 `json:"contribution,omitempty"`

	// power
	Power float64 `json:"power,omitempty"`

	// resource
	Resource *VsphereOverviewStatsOKBodyResultsResource `json:"resource,omitempty"`

	// workload
	Workload *VsphereOverviewStatsOKBodyResultsWorkload `json:"workload,omitempty"`
}

// Validate validates this vsphere overview stats o k body results
func (o *VsphereOverviewStatsOKBodyResults) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateResource(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateWorkload(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *VsphereOverviewStatsOKBodyResults) validateResource(formats strfmt.Registry) error {

	if swag.IsZero(o.Resource) { // not required
		return nil
	}

	if o.Resource != nil {
		if err := o.Resource.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("vsphereOverviewStatsOK" + "." + "results" + "." + "resource")
			}
			return err
		}
	}

	return nil
}

func (o *VsphereOverviewStatsOKBodyResults) validateWorkload(formats strfmt.Registry) error {

	if swag.IsZero(o.Workload) { // not required
		return nil
	}

	if o.Workload != nil {
		if err := o.Workload.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("vsphereOverviewStatsOK" + "." + "results" + "." + "workload")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *VsphereOverviewStatsOKBodyResults) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *VsphereOverviewStatsOKBodyResults) UnmarshalBinary(b []byte) error {
	var res VsphereOverviewStatsOKBodyResults
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// VsphereOverviewStatsOKBodyResultsResource vsphere overview stats o k body results resource
//
// swagger:model VsphereOverviewStatsOKBodyResultsResource
type VsphereOverviewStatsOKBodyResultsResource struct {

	// contributing
	Contributing int64 `json:"contributing,omitempty"`

	// hosts
	Hosts int64 `json:"hosts,omitempty"`

	// vms
	Vms int64 `json:"vms,omitempty"`
}

// Validate validates this vsphere overview stats o k body results resource
func (o *VsphereOverviewStatsOKBodyResultsResource) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *VsphereOverviewStatsOKBodyResultsResource) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *VsphereOverviewStatsOKBodyResultsResource) UnmarshalBinary(b []byte) error {
	var res VsphereOverviewStatsOKBodyResultsResource
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// VsphereOverviewStatsOKBodyResultsWorkload vsphere overview stats o k body results workload
//
// swagger:model VsphereOverviewStatsOKBodyResultsWorkload
type VsphereOverviewStatsOKBodyResultsWorkload struct {

	// contributed
	Contributed int64 `json:"contributed,omitempty"`

	// destroyed
	Destroyed int64 `json:"destroyed,omitempty"`

	// hosts used
	HostsUsed int64 `json:"hostsUsed,omitempty"`

	// running
	Running int64 `json:"running,omitempty"`
}

// Validate validates this vsphere overview stats o k body results workload
func (o *VsphereOverviewStatsOKBodyResultsWorkload) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *VsphereOverviewStatsOKBodyResultsWorkload) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *VsphereOverviewStatsOKBodyResultsWorkload) UnmarshalBinary(b []byte) error {
	var res VsphereOverviewStatsOKBodyResultsWorkload
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
